<?xml version="1.0" encoding="UTF-8"?><unload unload_date="2024-09-04 08:02:20">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<application_name>NCM Self-Service</application_name>
<application_scope>x_nuta2_nutanix_ca</application_scope>
<application_version>1.6.4</application_version>
<collisions/>
<commit_date/>
<deleted/>
<description>Final Delta Updates</description>
<inserted/>
<name>1.7.1 Delta Updates</name>
<origin_sys_id/>
<parent display_value=""/>
<release_date/>
<remote_base_update_set display_value=""/>
<remote_parent_id/>
<remote_sys_id>ec27ec10c33f021064971612b40131d7</remote_sys_id>
<state>loaded</state>
<summary/>
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>16ab4133c3d4569064971612b401311f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<update_set display_value=""/>
<update_source display_value=""/>
<updated/>
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_5ab9a957dbbc3300bd097dda8c961914</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_Import_Subnets&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_Import_Subnets&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_Import_Subnets = Class.create();
Nutanix_Import_Subnets.prototype = {
	initialize: function () {
		this.logger = new Nutanix_Calm_Logger();
		this.utils = new Nutanix_Calm_Utils();
		this.pageLimit = 999;
	},

	startSubnetImport: function () {
		try {
			this.logger.debug("Inside Nutanix_Import_Subnets.startImportSubnets");
			var body = {
				"kind": "subnet",
				"length": 1,
				"offset": 0
			};
			var response = this.utils.makeCalmApiCall('POST', this.utils.configuration.api.getSubnets + '', this.utils.stringify(body));
			if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
				var totalSubnetsCount = JSON.parse(response.getBody()).metadata.total_matches;
				var pages = parseInt(totalSubnetsCount / this.pageLimit);
				for (var i = 0; i &lt;= pages; i++) {
					body = {
						"kind": "subnet",
						"length": this.pageLimit,
						"offset": i * this.pageLimit
					};
					var subResponse = this.utils.makeCalmApiCall('POST', this.utils.configuration.api.getSubnets + '', this.utils.stringify(body));

					//this.utils.insertIntoQueue('processSubnets', '', '', subResponse.getBody() + '' , 'Process Subnets', 'This process invokes the processing of all subnets.');
					var options = {
						"parameter": "",
						"payload": subResponse.getBody() + ""
					};
					this.processSubnets(options);
				}
			}
		} catch (e) {
			this.logger.error("Exception caught during retrieval of subnets. Error :- " + e);
		}
	},

	processSubnets: function (current) {
		try {
			this.logger.debug("Inside Nutanix_Import_Subnets.processSubnets");
			var subnetResp = this.utils.parse(current.payload).entities;
			//FEAT-15844 - VPC Support in Catalogs in Self-Service SNOW Plugin
			var clusterName = '';
			var clusterUUID = '';
			var vpcReference = '';
			var vpc = '';
			var extsubnetlist ='';
			//VPC Support in Catalogs in Self-Service SNOW Plugin


			for (var i = 0; i &lt; subnetResp.length; i++) {
				var subnetUUID = subnetResp[i].metadata.uuid;
				var subnetName = subnetResp[i].status.name;
				//FEAT-15844 Start - VPC Support in Catalogs in Self-Service SNOW Plugin
				var subnet_type = subnetResp[i].status.resources.subnet_type;
				if (subnetResp[i].spec.resources.subnet_type == 'VLAN') {
					
					clusterName = subnetResp[i].status.cluster_reference.name;
					clusterUUID = subnetResp[i].status.cluster_reference.uuid;
				} else if (subnetResp[i].spec.resources.subnet_type == 'OVERLAY') {
					vpcReference = subnetResp[i].spec.resources.vpc_reference.uuid;
					var vpcResponse = this.utils.makeCalmApiCall('GET', this.utils.configuration.api.vpc + vpcReference, "");
					if (vpcResponse.getStatusCode() == '200' || vpcResponse.getStatusCode() == '201') {
						vpcResponse = this.utils.parse(vpcResponse.getBody());
						vpc = vpcResponse.status.name;
						extsubnetlist = vpcResponse.status.resources.external_subnet_list;
						var calbck = this.getClusterdetail(extsubnetlist);
						clusterName = calbck.clusterName;
						clusterUUID = calbck.clusterUUID;
						//FEAT-15844 END- VPC Support in Catalogs in Self-Service SNOW Plugin

					}
				}
				

				var grSubnet = new GlideRecord(this.utils.configuration.table.subnet);
				grSubnet.addEncodedQuery('uuid=' + subnetUUID);
				grSubnet.query();

				if (grSubnet.next()) {

					grSubnet.name = subnetName + '';
					grSubnet.cluster_name = clusterName;
					grSubnet.cluster_uuid = clusterUUID;
					//FEAT-15844 START- VPC Support in Catalogs in Self-Service SNOW Plugin
					grSubnet.subnet_type = subnet_type;
					grSubnet.vpc_reference_uuid = vpcReference;
					grSubnet.vpc_name = vpc;
					//FEAT-15844 END- VPC Support in Catalogs in Self-Service SNOW Plugin
					grSubnet.update();
				} else {
					grSubnet.initialize();
					grSubnet.name = subnetName + '';
					grSubnet.uuid = subnetUUID + '';
					grSubnet.cluster_name = clusterName;
					grSubnet.cluster_uuid = clusterUUID;
					//FEAT-15844 START- VPC Support in Catalogs in Self-Service SNOW Plugin
					grSubnet.subnet_type = subnet_type;
					grSubnet.vpc_reference_uuid = vpcReference;
					grSubnet.vpc_name = vpc;
					//FEAT-15844 END- VPC Support in Catalogs in Self-Service SNOW Plugin
					grSubnet.insert();
				}


			}
		} catch (e) {
			this.logger.error("Exception caught during processing of subnets. Error :- " + e);
		}

	},
	getClusterdetail: function (extsubnetlist) {
		try{
		//FEAT-15844 - VPC Support in Catalogs in Self-Service SNOW Plugin
		//To fetch the name of the VPC from External Subnet Reference
		var clusterName = '',clusterUUID='';
		for (var t in extsubnetlist) {
			var ext = JSON.stringify(extsubnetlist[t].external_subnet_reference.uuid.toString());
			var ext_uuid = ext.split('"').join('');
			var extsubnetResponse = this.utils.makeCalmApiCall('GET', this.utils.configuration.api.getSubnet + ext_uuid, "");
			if (extsubnetResponse.getStatusCode() == '200' || extsubnetResponse.getStatusCode() == '201') {
				extsubnetResponse = this.utils.parse(extsubnetResponse.getBody());
				clusterName = extsubnetResponse.status.cluster_reference.name;
				clusterUUID = extsubnetResponse.status.cluster_reference.uuid;
			}
		}
		var res = {
			clusterName: clusterName,
			clusterUUID: clusterUUID,
		};
		return res;
		}
		catch (e) {
			this.logger.error("Exception caught during processing of External Subnet Reference. Error :- " + e);
		}
		
	},


	type: 'Nutanix_Import_Subnets'

};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-04-19 07:38:08&lt;/sys_created_on&gt;&lt;sys_id&gt;5ab9a957dbbc3300bd097dda8c961914&lt;/sys_id&gt;&lt;sys_mod_count&gt;35&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_Import_Subnets&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_5ab9a957dbbc3300bd097dda8c961914&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-05-14 13:39:21&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>1978006173</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>12ab0533c3d4569064971612b4013150</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c31110000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Nutanix_Import_Subnets</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>f52d10e7644e0e10f88c808f9995d7eb</update_guid>
<update_guid_history>f52d10e7644e0e10f88c808f9995d7eb:1978006173,81539746b1ce4610fb7e527f571fb72d:-1383975668,de39cab9038ec21032e25ef60d71cd6b:-140010812,876802f1978ec2102154234a368c588e:716557911,89e13535288ac210b2d9f7a87f925af6:-669001333,d37135b1df8ac2104f9b534f6d4d916d:716557911,b0b0f9b1dd8ac21056bf70ffd7abba7f:-605818714,c60489a117ce4210a5dcac548f7ecbfe:141095384,afd7a829da0e42108b04a30a7db25107:-1937427354,7cb624e15d0e4210648174b762d875f7:668530832,819624e1300e42101aad4c38ad4069f3:-229759945,ade26c65c7ca42106771e8ad8e27a6cc:1314986409,2722a865feca4210b80de183ff573a6a:-234487310,75d790255f8a421083f7371d2fb92e21:-1300245897,6515dcedb70a421018dde08cbc1f921e:-1859072721,ffe354ed1a0a42100e3aabbaaef23ce5:-1818840632,c9390829ce0a4210d7a6656253840d75:1859894732,5ec84c21060a42108f925d9c155d6660:-479559234,1df740e18a0a4210988c95ef454c9de4:-1837406863,a9e6d1153e4a02103ed8f2ebccacd183:-546023405,7efdd278808e8e50903d75d2f8c4300f:801541602,2d4d5ef42d8e8e50739a82f142104174:393694784,4777d6770a3d4a504272c87111a2c9f1:778218446,c448d26994358e1088d59971d1bee025:332666624,c3281a29fb358e10012ac70fac3f2591:462574282,6823975dff623300eaedf8d1597bff13:-727501658,38cf7c0200eda110e295e5da5cc60062:-1936370907,6823975dff623300eaedf8d1597bff13:-727501658,26897221ef6d6110ab9e9c58e5dc8f72:-1936370907,6823975dff623300eaedf8d1597bff13:-727501658,102295002ce9e9104317e348c30468c1:-1936370907,6823975dff623300eaedf8d1597bff13:-727501658,a8264f557c623300e885fff188aad125:-1814253151,a9758b1529623300c44320af40f99f5a:-1912062626,8ba34b15b3623300393d336ac43988ff:-2075981090,c83e6695fb2233008fcd4475857c1347:475816090,f92d2a555b22330043b42713bfbdc007:2130444514,7becea5534223300a4f5724b57b532f3:1787854708,ee5c2655aa223300a954493b65163178:-46516389,66162609d2a23300e9509c3f555f5370:1295789893,9d7ded5b4cbc3300f189a006792e726b:-830463988,2fbc695b72bc3300b228f67e13cad757:1470654782,181b25975bbc33008edb9f3b70c65d5c:-1484472328,5d1ae1579cbc33001042a9bcd7c5f127:832990600</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_6abe75c39369421090acfa497bba1086</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="INSERT_OR_UPDATE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2024-04-18 11:00:49</sys_created_on><sys_id>6abe75c39369421090acfa497bba1086</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.calm_admin</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_security_acl display_value="x_nuta2_nutanix_ca_environment_subnet_mtom">0f484cb82f77a1904627de1a2799b617</sys_security_acl><sys_update_name>sys_security_acl_role_6abe75c39369421090acfa497bba1086</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2024-04-18 11:00:49</sys_updated_on><sys_user_role display_value="x_nuta2_nutanix_ca.calm_admin" name="x_nuta2_nutanix_ca.calm_admin">7b91d2024fc1630065e48020a310c7bb</sys_user_role></sys_security_acl_role></record_update>]]></payload>
<payload_hash>1080085468</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>12ab0533c3d4569064971612b4013153</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30a80000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.calm_admin</target_name>
<type>Access Roles</type>
<update_domain>global</update_domain>
<update_guid>b58ff983446942108bb7a09e5f880164</update_guid>
<update_guid_history>b58ff983446942108bb7a09e5f880164:1080085468</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_environment_subnet_mtom_subnet_uuid</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="subnet_uuid" table="x_nuta2_nutanix_ca_environment_subnet_mtom"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;Subnet UUID&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;subnet_uuid&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;formula/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value="String"&gt;string&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;40&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_environment_subnet_mtom&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;ratakondala.arun&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-06-30 06:32:31&lt;/sys_created_on&gt;&lt;sys_id&gt;29080cf42f77a1904627de1a2799b6d5&lt;/sys_id&gt;&lt;sys_name&gt;Subnet UUID&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_environment_subnet_mtom_subnet_uuid&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;ratakondala.arun&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-06-30 06:32:31&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;virtual_type&gt;script&lt;/virtual_type&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>1257438168</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>12ab4133c3d4569064971612b4013121</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30300000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>Environment Subnet MTOM.Subnet UUID</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>d8a34d7c8efba1905965959c36a6f2ee</update_guid>
<update_guid_history>d8a34d7c8efba1905965959c36a6f2ee:1257438168,0f480cb88977a19042ac565aedf9e6ec:1257438168</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_documentation_x_nuta2_nutanix_ca_subnet_subnet_vpc_type_en</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_documentation element="subnet_vpc_type" label="Subnet VPC Type" language="en" table="x_nuta2_nutanix_ca_subnet"><sys_documentation action="INSERT_OR_UPDATE"><element>subnet_vpc_type</element><help/><hint/><label>Subnet VPC Type</label><language>en</language><name>x_nuta2_nutanix_ca_subnet</name><plural>Subnet VPC Types</plural><sys_class_name>sys_documentation</sys_class_name><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-05-06 10:01:05</sys_created_on><sys_id>5a7e1a7c938e8e5090acfa497bba10bc</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Subnet VPC Type</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_documentation_x_nuta2_nutanix_ca_subnet_subnet_vpc_type_en</sys_update_name><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-05-06 10:01:05</sys_updated_on><url/><url_target/></sys_documentation></sys_documentation></record_update>]]></payload>
<payload_hash>514674665</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>12ab4133c3d4569064971612b4013124</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c31050000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_subnet</table>
<target_name>Subnet.Subnet VPC Type</target_name>
<type>Field Label</type>
<update_domain>global</update_domain>
<update_guid>da7e52bc438e8e505315fa8c82f40677</update_guid>
<update_guid_history>da7e52bc438e8e505315fa8c82f40677:514674665</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_bbb0915f37896300fdfc097973990eaf</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;x_nuta2_nutanix_ca_nutanix_process_queue&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition table="x_nuta2_nutanix_ca_nutanix_process_queue"&gt;state=ready^EQ&lt;item display_value="Ready" endquery="false" field="state" goto="false" newquery="false" operator="=" or="false" value="ready"/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;CALM Queue Post Insert BR&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    this.logger = new Nutanix_Calm_Logger();

    // Add your code here
    try {
        var topic = current.topic + '';
        current.state = "processing";
        current.update();

        var call = "";
        var callFunction = "";
        switch (topic) {

            case "startMigration":
                call = new Migration_Script();
                callFunction = call.updateCatalog();
                current.comments = "Migration Completed.";
                current.state = "complete";
                break;

            case "startMigration_1_7":
                var appUtil = new Migration_Script();
                appUtil.updateSubnetFilteringOneDotSeven();
				appUtil.updateTheCatalogClientScriptForOneDotSeven();
                current.comments = "startMigration_1_7_Migration_Completed.";
                current.state = "complete";
                break;

            case "startMigration_1_6_1":
                current.comments = "V_1_6_1_Migration Completed.";
                current.state = "complete";
                break;
            case "startMigration_1_6":
                var appUtil = new Migration_Script();
                appUtil.updateTheCatalogClientScriptForOneDotSix();
                current.comments = "V_1_6_Migration Completed.";
                current.state = "complete";
                break;

            case "startMigration_1_5_2":
                var appUtil = new Migration_Script();
                appUtil.updateTheCatalogClientScriptForOneDotFiveDotTwo();
                current.comments = "V_1_5_2_Migration Completed.";
                current.state = "complete";
                break;

            case "startMigration_1_5_1":
                var appUtil = new Migration_Script();
                appUtil.updateTheCatalogClientScriptForOneDotFiveDotOne();
                current.comments = "V_1_5_1_Migration Completed.";
                current.state = "complete";
                break;

            case "startMigration_1_4_5":
                var appUtil = new Migration_Script();
                appUtil.updateTheFetchOnChangeClientScripts();
                current.comments = "V_1_4_5_Migration Completed.";
                current.state = "complete";
                break;


            case "startMigration_1_4_4":
                var appUtil = new Migration_Script();
                appUtil.addEnvironmentVariableToAllCatalogs();
                current.comments = "V_1_4_4Migration Completed.";
                current.state = "complete";

                break;

            case "start1_4_3_Migration":
                var appUtil = new Nutanix_Calm_Utils();
                appUtil.migrateV1_4_3();
                current.comments = "V_1_4_3Migration Completed.";
                current.state = "complete";

                break;

            case "startInventorySync":
                call = new Nutanix_ImportUsers();
                call.startUsersImport();

                call = new Nutanix_ImportUsers();
                call.startGroupsImport();

                call = new Nutanix_Import_Subnets();
                call.startSubnetImport();

                call = new Nutanix_ImportProjects();
                call.startImportProjects();

                //call = new Nutanix_Categories();
                //call.importCategoryData();

                call = new Nutanix_ImportBlueprints();
                call.startImportBlueprints();

                call = new Nutanix_ImportRunbooks();
                call.startImportRunbooks();

                call = new Nutanix_Import_Marketplace_Items();
                call.startImportMPI();

                call = new NutanixAppIntermediateDao();
                call.startAppImport();
                call.startDeletedAppImport();

                current.comments = "Imports Started.";
                current.state = "complete";

                break;

            case "startProjectSync":
                call = new Nutanix_ImportProjects();
                call.startImportProjects();

                call = new Nutanix_ImportUsers();
                call.startUsersImport();

                call = new Nutanix_ImportUsers();
                call.startGroupsImport();

                call = new Nutanix_Import_Subnets();
                call.startSubnetImport();



                current.comments = "Imports Started.";
                current.state = "complete";
                break;

            case "startBlueprintSync":
                call = new Nutanix_ImportUsers();
                call.startUsersImport();

                call = new Nutanix_ImportUsers();
                call.startGroupsImport();

                call = new Nutanix_ImportProjects();
                call.startImportProjects();

                call = new Nutanix_ImportBlueprints();
                call.startImportBlueprints();

				call = new Nutanix_Import_Subnets();
                call.startSubnetImport();

                current.comments = "Imports Started.";
                current.state = "complete";
                break;

            case "startRunbookSync":
                call = new Nutanix_ImportUsers();
                call.startUsersImport();

                call = new Nutanix_ImportUsers();
                call.startGroupsImport();

                call = new Nutanix_ImportProjects();
                call.startImportProjects();

                call = new Nutanix_ImportRunbooks();
                call.startImportRunbooks();

				call = new Nutanix_Import_Subnets();
                call.startSubnetImport();

                current.comments = "Imports Started.";
                current.state = "complete";
                break;

            case "startMPISync":
                call = new Nutanix_ImportUsers();
                call.startUsersImport();

                call = new Nutanix_ImportUsers();
                call.startGroupsImport();

                call = new Nutanix_ImportProjects();
                call.startImportProjects();

                call = new Nutanix_Import_Marketplace_Items();
                call.startImportMPI();

				call = new Nutanix_Import_Subnets();
                call.startSubnetImport();

                current.comments = "Imports Started.";
                current.state = "complete";
                break;

            case "startApplicationSync":
                call = new Nutanix_ImportUsers();
                call.startUsersImport();

                call = new Nutanix_ImportUsers();
                call.startGroupsImport();

                call = new Nutanix_ImportProjects();
                call.startImportProjects();

                call = new NutanixAppIntermediateDao();
                call.startAppImport();
                call.startDeletedAppImport();

				call = new Nutanix_Import_Subnets();
                call.startSubnetImport();

                current.comments = "Imports Started.";
                current.state = "complete";
                break;

            case "ProcessApplicationProfiles":
                call = new Nutanix_ImportApplicationProfiles();
                callFunction = call.processApplicationProfiles(current);
                current.comments = "Application Profiles processed";
                current.state = "complete";

                current.process_name = 'Process application profiles';
                current.description = 'This process invokes the import of application profiles.';
                break;


            case "importApplications":
                call = new NutanixAppIntermediateDao();
                call.importApplications(current);
                current.comments = "Aplications imported";
                current.state = "complete";

                break;

            case "processImportedApp":
                call = new NutanixAppIntermediateDao();
                current.comments = "Imported Applications processed";
                call.processImportedApp(current);
                current.state = "complete";

                break;

            case "importDeletedApplications":
                call = new NutanixAppIntermediateDao();
                call.importDeletedApplications(current);
                current.comments = "Deleted Aplications imported";
                current.state = "complete";

                break;


            case "importProjectData":
                call = new Nutanix_ImportProjects();
                callFunction = call.importProjectData(current);
                current.comments = "Projects imported";
                current.state = "complete";

                break;

            case "processImportProjectData":
                call = new Nutanix_ImportProjects();
                current.comments = "Imported Projects processed";
                callFunction = call.processImportProjectData(current);
                current.state = "complete";

                break;

            case "importBlueprintDataByUUID":
                call = new Nutanix_ImportBlueprints();
                callFunction = call.importBlueprintDataByUUID(current);
                current.comments = "Blueprint details imported";
                current.state = "complete";

                break;

            case "processImportBlueprintData":
                call = new Nutanix_ImportBlueprints();
                current.comments = "Imported Blueprint processed";
                callFunction = call.processImportBlueprintData(current);
                current.state = "complete";

                break;
            case "importMPIData":
                call = new Nutanix_Import_Marketplace_Items();
                callFunction = call.importMPIData(current);
                current.comments = "MarketplaceItem imported";
                current.state = "complete";

                break;

            case "processImportMPIData":
                call = new Nutanix_Import_Marketplace_Items();
                current.comments = "Imported MarketplaceItem processed";
                callFunction = call.processImportMPIData(current);
                current.state = "complete";

                break;

            case "processImportRunbookData":
                call = new Nutanix_ImportRunbooks();
                current.comments = "Imported Runbook processed";
                callFunction = call.importRunbookDataByUUID(current);
                current.state = "complete";

                break;

            case "processImportRunbookDataByUUID":
                call = new Nutanix_ImportRunbooks();
                current.comments = "Imported Runbook by UUID processed";
                callFunction = call.processImportRunbookDataByUUID(current);
                current.state = "complete";

                break;


            case "processEndpoint":
                call = new Nutanix_ImportRunbooks();
                current.comments = "Imported Endpoin processed";
                callFunction = call.processRunbookEndPoint(current);
                current.state = "complete";

                break;

                /*case "createUserCriteria" :             call = new Nutanix_ImportBlueprints();
                									current.comments = "Adding User Criteria.";
                									callFunction = call.createUserCriteria(current);
                									current.state = "complete";
                									break;*/

            case "MapCatItemToProject":
                if (current.payload != "") {
                    call = new Nutanix_ImportProjects();
                    current.comments = "Mapping Catalog Items to Projects";
                    callFunction = call.MapCatItemToProject(current);
                    current.state = "complete";

                    break;
                } else {
                    current.comments = "No Project reference list for SysId:" + current.parameter;
                    current.state = "complete";
                    break;
                }

            case "ProcessingCredentials":
                call = new Nutanix_ImportCredentials();
                current.comments = "Imported Credentials processed";
                callFunction = call.ProcessingCredentials(current);
                current.state = "complete";

                break;

            case "processCatalogVariables":
                call = new Nutanix_CreateCatalogVariables();
                callFunction = call.processCatalogVariables(current);
                current.comments = "Blueprint/MPI variables created.";
                current.state = "complete";

                break;

            case "processingIcon":
                call = new Nutanix_Import_Marketplace_Items();
                callFunction = call.processingIcon(current);
                current.comments = "Imported MarketplaceItem Icons processed.";
                current.state = "complete";

                break;

            case "startImportEnvironment":
                call = new Nutanix_ImportEnvironment();
                callFunction = call.startImportEnvironment(current);
                current.comments = "Import of environments";
                current.state = "complete";

                break;

            case "processImportedEnvironment":
                call = new Nutanix_ImportEnvironment();
                callFunction = call.processImportedEnvironment(current);
                current.comments = "Processing of environment";
                current.state = "complete";

                break;

            case "processEnvCredentials":
                call = new Nutanix_ImportCredentials();
                callFunction = call.processEnvCredentials(current);
                current.comments = "Processing of environment credentials";
                current.state = "complete";

                break;

            case "importUsers":
                call = new Nutanix_ImportUsers();
                callFunction = call.importUsers(current);
                current.comments = "Updates the UUID of imported users to those of calm";
                current.state = "complete";

                break;

            case "importGroups":
                call = new Nutanix_ImportUsers();
                callFunction = call.importGroups(current);
                current.comments = "Updates the UUID of imported groups to those of calm";
                current.state = "complete";

                break;

            case "processProviders":
                call = new Nutanix_ProcessProviders();
                callFunction = call.processProviders(current);
                current.comments = "Processing of environment providers";
                current.state = "complete";

                break;

                // 			case "processAWStorage" :               call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processAWStorage(current);
                // 													current.comments = "Processing of AWS storage";
                // 													current.state = "complete";

                // 													break;   

                // 			case "processTags" :                    call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processTags(current);
                // 													current.comments = "Processing of Tags";
                // 													current.state = "complete";

                // 													break;    
                // 			case "processBlankDisk" :               call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processBlankDisk(current);
                // 													current.comments = "Processing of BlankDisk";
                // 													current.state = "complete";

                // 													break;    
                // 			case "processNetworkInterfaces" :       call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processNetworkInterfaces(current);
                // 													current.comments = "Processing of NetworkInterfaces";
                // 													current.state = "complete";

                // 													break;  

                // 			case "processDisks" :                   call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processDisks(current);
                // 													current.comments = "Processing of Disks";
                // 													current.state = "complete";

                // 													break; 

                // 			case "processOSProfile" :               call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processOSProfile(current);
                // 													current.comments = "Processing of OS Profile";
                // 													current.state = "complete";

                // 													break;    

                // 			case "processNetworkProfiles" :         call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processNetworkProfiles(current);
                // 													current.comments = "Processing of Network Profiles";
                // 													current.state = "complete";

                // 													break; 

                // 			case "processDataDisk" :                call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processDataDisk(current);
                // 													current.comments = "Processing of Data Disk";
                // 													current.state = "complete";

                // 													break; 

                // 			case "processNutanixDisk" :             call = new Nutanix_ProcessProviders();
                // 													callFunction = call.processNutanixDisk(current);
                // 													current.comments = "Processing of Nutanix Disks.";
                // 													current.state = "complete";
                // 													break;

            case "processSubnets":
                call = new Nutanix_Import_Subnets();
                callFunction = call.processSubnets(current);
                current.comments = "Processing of Subnets.";
                current.state = "complete";

                break;

            case "importRecoveryPoints":
                call = new Nutanix_ImportRecoveryPoints();
                callFunction = call.importRecoveryPoints(current);
                current.comments = "Import of Recovery Points.";
                current.state = "complete";

                break;

            case "processAzureRecoveryPoints":
                call = new Nutanix_ImportRecoveryPoints();
                callFunction = call.processAzureRecoveryPoints(current);
                current.comments = "Processing of Azure Recovery Points.";
                current.state = "complete";
                break;

            case "processAhvRecoveryPoints":
                call = new Nutanix_ImportRecoveryPoints();
                callFunction = call.processAhvRecoveryPoints(current);
                current.comments = "Processing of AHV Recovery Points.";
                current.state = "complete";

                break;

            case "processAwsRecoveryPoints":
                call = new Nutanix_ImportRecoveryPoints();
                callFunction = call.processAwsRecoveryPoints(current);
                current.comments = "Processing of AMIs.";
                current.state = "complete";

                break;

            case "processVmwareRecoveryPoints":
                call = new Nutanix_ImportRecoveryPoints();
                callFunction = call.processVmwareRecoveryPoints(current);
                current.comments = "Processing of VMWare Recovery Points.";
                current.state = "complete";

                break;

            case "startInventoryDelete":
                call = new Delete_Inventory();
                call.deleteInventory();
                current.comments = "Starts the deletion of calm snow data.";
                current.state = "complete";
                gs.setProperty('x_nuta2_nutanix_ca.Delete_Flag', '0');
                this.logger.info("Inventory deletion has successfully completed.");
                break;

            default:
                this.logger.error("Method :: " + topic + " not found inside CALM Queue Post Insert BR.");
                break;

        }

    } catch (e) {
        current.state = "error";
        current.comments = "Exception caught inside CALM Queue Post Insert BR : " + e;
        this.logger.error("Exception caught inside CALM Queue Post Insert BR : " + e);

    } finally {
        current.update();
        this.logger.info("CALM Queue Post Insert BR ran sucessfully");
    }

})(current, previous);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-14 19:58:34&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;bbb0915f37896300fdfc097973990eaf&lt;/sys_id&gt;&lt;sys_mod_count&gt;112&lt;/sys_mod_count&gt;&lt;sys_name&gt;CALM Queue Post Insert BR&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_bbb0915f37896300fdfc097973990eaf&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;subuhee.fathima&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-05-21 10:24:49&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;async&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=bbb0915f37896300fdfc097973990eaf"/&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1999921715</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>16ab0533c3d4569064971612b401314f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c31620000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_process_queue</table>
<target_name>CALM Queue Post Insert BR</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>d4c3b7256cde0a5011407c493e75ac06</update_guid>
<update_guid_history>d4c3b7256cde0a5011407c493e75ac06:-1999921715,86a33365b5de0a50ce730029d14dbc9a:-1134942065,b2633fa18cde0a500350e6577791f87d:-1999921715,b1b4de5db69e865021bd7eb17b28c172:76711916,79f35a9de79e86501aa03e4e1f75a3f8:1629601615,69635a11e3de865063b2b2080121085a:76711916,0db6557770ce8e1079e5f64ce125b106:1629601615,874fc1f7838e8e108e34901a63fd1d8b:177948719,7deb8c2ba70e0e104ad4eded8beb9339:-256955116,5b00beb14186061045f11d1fe00c098d:-1264420427,cca50ab9840ec21049b3fc411bdc106a:932005621,14b039591ae4b11020d635ff0dcc687f:-228958059,1c183701f15601103ead454b667d183e:574511324,167f30cec0ada110813d161ec3f4ddca:249596652,1c183701f15601103ead454b667d183e:574511324,9189feed542d6110ea93209b91e520a1:249596652,1c183701f15601103ead454b667d183e:574511324,35d1994cf4a9e91017043ffd187d0e1f:249596652,1c183701f15601103ead454b667d183e:574511324,37d9e7c5c9d2011028096103df7c7c0f:-1728743762,3850a7495a520110af11ca83ff7fedd0:-689856332,a052b8ce80bc0110461d704108cca7d7:-2117224255,698d6ca223a4411099be226d09af2cde:-1596808913,05014346e3a00110cbe56acfc5d0eba3:-1068005728,6a227e4af260011045a334d96edc2ef0:-2146883582,ed0545584e600110df92883bc6ca5dca:1576427589,b743b05c0120011019a702feefd38857:170423434,cef23c1c0620011040c6d2ad1ecfd87d:1854116426,39ac5fc77ac23010c2a080e895c89ad8:932129879,e5ebe8f0bf353010b831087fc8ebc3b0:1149949279,bf5ff2b8c73030105d2a489f532824fe:1109753876,941ff2b8c9303010ffebd9f9674587a6:1191961138,b54e7a78d4303010716b8a01437c7198:1076177624,7cc46d0e3868bc10c2d4c0b8dbffb2e3:2133410602,3f22a902e664bc10a07121b5ca19b89e:850639531,b5e481c2c2287c101aa5e52616bfd020:611827908,6709b32080a03810971f893f7ffb137c:-601110856,3737fbec0e6038108eae6b9ca38d8794:1989500344,c7a80d64c0a8b41006761ae796b17615:657374893,4cd5531ce5a0b41083c0ee23da1fd8d1:-648178676,d502d75829a0b41008d1d8bab3f550f9:941103053,b37748acba68b0105586b26ebd4b0bd6:1579148322,52af46230fd030109b53042d8932e867:2093997854,ed5f0ea3e4d03010eb99ff01d26455c7:-650016090,9adbc28873d530102de45d6ad1a27ece:1546574397,36aefca7bb09b4104f26ad7704ac79d8:1027236733,3c3f3315a3453010faab3d493d4951a1:-1087638242,e71998a4b60ba41034a118ff5a8e5651:-1786798839,623a85d3b781601016e92fb35dc699f8:850604808,fad1a024a013501032408c827ab59a01:-860939647,566a6c7be3219410dbbead8ca62ff506:1555223931,6dc9283bfc21941033f1b5864d1d4ec2:810007801,a1fe59c64c255010bd664dca27b981a6:810007801,2dd3a5adab3944103b4409a210808b90:1442195893,072da9eac73bb300ba488f9282721c28:1828341754,b5a5818575df330064cc8be698d53c84:-1264698420,0ae9a550edb2330083ac781245d72418:-1790012302,ca99f6de7b623300810be0bba9d52cc0:347639304,65aa86330a3a3300394108f0158f806a:-218226572,ff131311ffa23300901b0b72d7ba7560:182684174,5aeb611b15bc3300b435a8e4e3d31175:2058851827,f6790cdac2e033007dc047d33e0acdf6:1329591928,6f2572e34e143300a219428e0d6cdf12:-1560476379,23d0fe6ba5d033002a9730c6a1b597b6:-298398622,7f41802c095033006cfb04bc310016bf:-1808920150,eb64f1c3840c3300b58be800684825d8:-1082137276,e332b54fb0c833004eea7a624cfec946:-2046263791,373231c120832300baa39ec469345073:-957216339,bde079cd924323002aceaca4fa18eb40:-831597633,36e5e2447f322300ad16271df493a507:-146187127,faaaa5933faa63002138751fe281ba61:864117116,8b9dca8bcaa26300161c0d5a0fc06b47:-117261664,ad26380b71ee23000794f68dc71f9f99:-960480305,f220b32636262300b19720b55e3fbfd5:-256310908,ae10b326ee26230094d58cb6ecf00fce:-1648393065,bcff6326172623005f7ce39bba763d12:1079254834,522563ae76e223007bc54dd706d17880:977754310,c34fdc86dda26300db8df302509e9f82:794859114,4e355d8cc662230032aa216cf016d33f:-1497518300,d371d1880b6223005550ea114a9b2838:-56043395,674a490402622300cc98dc2eb301a13c:-1456565443,f183113dd4122300d6929e92d60ce594:-1651936013,6c1b8d1068522300b0cd1b1d0f8ba992:923013573,e896541f9d02a3007e1a8ae3c8c1eac2:-1408485879,48151c5bde02a30013fb51a54999f2d2:-494754017,23a6ddcd91466b0059c15a7fcc2c6da0:-936893512,0e848941d8466b00634093d4a600b5ef:1063480246,7764494153466b00bbd24126f39a3da0:-175139695,aaec3cc956066b008408246d162573dc:2130389375,dd04644989c26b00f09ef8706f818400:-1294107837,b7e8adc717f5a300fbc71e061366abfd:2029954177,f8ab741e0ff5230052cd48b7d5b0655d:-1874103587,76a465394635e300ea845393180b83f9:54423497,0cc40db16ef1e3007f961be3efcdcd7f:1280628513,1defe0a910f5a300b828d67214b241be:-662906672,2c0ee4e50cf5a3008765e45f25dacf76:-1450709752,b07724e1c4f5a3002956ea81facbb776:-1529791267,94ee5f0187b9630090f940471cfff6de:-1162330319,138e570154b96300d69ddbfec5c20494:1533409521,c015e4554e6d2300f651b69bb1a8c8cc:-148526255,f4041b28c32523003de907be98b7ab1f:1784191909,88ebda3765152300d7aaa6f973f16827:1836702593,5e5b5a37c81523006cf79b390043662c:-905503957,5cb5bc4fe05123005424628ebeb4aa27:-2141048635,f967ccc3c2112300f0042e4a11e8a592:-279721595,92f38843351123009dbef46787a137fb:237522898,84a3213e979523005430521238d53412:-1445107717,d38559b273952300a5ea3b920f6857ab:1269245409,ff2845ba0a552300110193f58d36ad91:1753065237,8a91c47ede9123009978778665e3f706:996518732,3d0a7be67d91230011625b289c3f7bdd:-129430740,4ac9f3e6999123008b22c910895032bc:1810600742,2ea97be68391230020a3722b45a1b1d3:53090790,a1f83f660f9123005cc457e3aca10a9f:-559054214,e8e8ff663c912300cb3d49e9d9d47f61:1336326260,78fa8be6e7112300a803b0e766a363f6:7505214,07d717927f9d2300dbfdea8c98ac472b:-429338116,aae18c7a2ad1230000a18e692b7ecdd1:-1373919756,b35ff7e63fd12300a1be23ee7265877a:-1120294527,db13ff66469123001f1f82f21e4dee96:350511550,e936ef667a9123003153d10f3932ff0f:396412953,2fe607620b512300d44964d0aafe890c:604204092,2dce5756ac55230029c24c930f4d6ceb:-1593874500,e45e9792715523006846a6ded6c483a4:190119948,75d6531278552300f50b3d075b82ca69:2023833913,609c0f96481523000ff28285411be7a4:234303908,74cbc39642152300e1eb38d8f6bc6e85:448758465,0c3bc35655152300c9b979bec4612d4b:1417140707,993a8bd299152300b985f39505e4e97e:-396633100,62a84bd2ca15230063aa7c0b8c0a349f:1062555803,850ffe1e4bd12300b7dfb7e1bfda5e0d:2126984610,cf9a1608b451230017a907bb61523936:-868424183,b8dccd2b5a4523000669646534f2bdf1:360327139,be5b416b10452300a5707f7bfd346df9:-702058998,7e72615b28c96300600a575a54685303:980471509,554fd59727c96300f2ff10e8d12ffa8d:213021568,6f1f5597bcc96300b0639a63798eac53:1147603682,7fae9d57f7c963009ae232f26b6a4860:-1194791625,9372519ffc896300075f5bebdbd6619c:131003476,1c42d55f318963006dd01eb3259dfd5c:-1921484377</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_0f484cb82f77a1904627de1a2799b617</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl"><sys_security_acl action="INSERT_OR_UPDATE"><active>true</active><admin_overrides>true</admin_overrides><advanced>false</advanced><condition/><description>Default access control on x_nuta2_nutanix_ca_environment_subnet_mtom</description><name>x_nuta2_nutanix_ca_environment_subnet_mtom</name><operation display_value="write">write</operation><script/><sys_class_name>sys_security_acl</sys_class_name><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 06:32:32</sys_created_on><sys_id>0f484cb82f77a1904627de1a2799b617</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_security_acl_0f484cb82f77a1904627de1a2799b617</sys_update_name><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 06:32:32</sys_updated_on><type display_value="record">record</type></sys_security_acl></record_update>]]></payload>
<payload_hash>-529528628</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>16ab0533c3d4569064971612b4013152</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30620000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>x_nuta2_nutanix_ca_environment_subnet_mtom</target_name>
<type>Access Control</type>
<update_domain>global</update_domain>
<update_guid>94a34d7caafba190f7b03f6234288dfc</update_guid>
<update_guid_history>94a34d7caafba190f7b03f6234288dfc:-529528628,cf484cb87877a190519feada9a0fb63e:-529528628</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_db_object_0042c0742f77a1904627de1a2799b659</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_db_object"><sys_db_object action="INSERT_OR_UPDATE"><access>public</access><actions_access>false</actions_access><alter_access>false</alter_access><caller_access/><client_scripts_access>false</client_scripts_access><configuration_access>false</configuration_access><create_access>false</create_access><create_access_controls>true</create_access_controls><delete_access>false</delete_access><is_extendable>false</is_extendable><label>Environment Subnet MTOM</label><live_feed_enabled>false</live_feed_enabled><name>x_nuta2_nutanix_ca_environment_subnet_mtom</name><number_ref/><provider_class/><read_access>true</read_access><scriptable_table>false</scriptable_table><super_class/><sys_class_name>sys_db_object</sys_class_name><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 06:32:31</sys_created_on><sys_id>0042c0742f77a1904627de1a2799b659</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Environment Subnet MTOM</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_db_object_0042c0742f77a1904627de1a2799b659</sys_update_name><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 06:32:31</sys_updated_on><update_access>false</update_access><user_role display_value="x_nuta2_nutanix_ca.user" name="x_nuta2_nutanix_ca.user">3376fd254f452b001200e5201310c717</user_role><ws_access>true</ws_access></sys_db_object></record_update>]]></payload>
<payload_hash>-282440450</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>16ab4133c3d4569064971612b4013120</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c300e0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>Environment Subnet MTOM</target_name>
<type>Table</type>
<update_domain>global</update_domain>
<update_guid>08a3897cc4fba19063de217b0aeee0b0</update_guid>
<update_guid_history>08a3897cc4fba19063de217b0aeee0b0:-282440450,1f484cb81777a190eddbf208b7bad2cd:-282440450</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_documentation_x_nuta2_nutanix_ca_environment_subnet_mtom__en</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_documentation element="" label="Environment Subnet MTOM" language="en" table="x_nuta2_nutanix_ca_environment_subnet_mtom"><sys_documentation action="INSERT_OR_UPDATE"><element/><help/><hint/><label>Environment Subnet MTOM</label><language>en</language><name>x_nuta2_nutanix_ca_environment_subnet_mtom</name><plural>Environment Subnet MTOMs</plural><sys_class_name>sys_documentation</sys_class_name><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 06:32:32</sys_created_on><sys_id>df484cb82f77a1904627de1a2799b673</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Environment Subnet MTOM</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_documentation_x_nuta2_nutanix_ca_environment_subnet_mtom__en</sys_update_name><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 06:32:32</sys_updated_on><url/><url_target/></sys_documentation></sys_documentation></record_update>]]></payload>
<payload_hash>-38429111</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>16ab4133c3d4569064971612b4013123</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30220000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>Environment Subnet MTOM</target_name>
<type>Field Label</type>
<update_domain>global</update_domain>
<update_guid>84a34d7c7bfba1904f0685e10447aee9</update_guid>
<update_guid_history>84a34d7c7bfba1904f0685e10447aee9:-38429111,13484cb82777a190ed42f7aba45452cc:-38429111</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>DELETE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_relationship_9322a08193f1ca1090acfa497bba1075</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_relationship"&gt;&lt;sys_relationship action="DELETE"&gt;&lt;advanced&gt;false&lt;/advanced&gt;&lt;apply_to/&gt;&lt;basic_apply_to&gt;x_nuta2_nutanix_ca_nutanix_environment&lt;/basic_apply_to&gt;&lt;basic_query_from&gt;x_nuta2_nutanix_ca_subnet&lt;/basic_query_from&gt;&lt;insert_callback/&gt;&lt;name&gt;Subnets&lt;/name&gt;&lt;query_from/&gt;&lt;query_with&gt;&lt;![CDATA[(function refineQuery(current, parent) {

	current.addJoinQuery('x_nuta2_nutanix_ca_environment_subnet_mtom', 'uuid', 'subnet_uuid');
	joinByMtom.addCondition('environment_uuid', current.getUniqueValue());

})(current, parent);]]&gt;&lt;/query_with&gt;&lt;reference_field/&gt;&lt;related_list/&gt;&lt;simple_reference&gt;false&lt;/simple_reference&gt;&lt;sys_class_name&gt;sys_relationship&lt;/sys_class_name&gt;&lt;sys_created_by&gt;users.midserver&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-04-24 09:28:06&lt;/sys_created_on&gt;&lt;sys_id&gt;9322a08193f1ca1090acfa497bba1075&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;Subnets&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_relationship_9322a08193f1ca1090acfa497bba1075&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-04-24 09:28:06&lt;/sys_updated_on&gt;&lt;/sys_relationship&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=9322a08193f1ca1090acfa497bba1075"/&gt;&lt;/record_update&gt;</payload>
<payload_hash>-175569942</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>1aab0533c3d4569064971612b401314e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30ce0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Subnets</target_name>
<type>Relationship</type>
<update_domain>global</update_domain>
<update_guid>d4b428452af1ca10134045097b50818c</update_guid>
<update_guid_history>d4b428452af1ca10134045097b50818c:-175569942,56d328c19bf1ca10943dd32e143d3614:-57084298</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_d018c57f37112300fdfc097973990e26</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;true&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ClientServerScriptBridge&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ClientServerScriptBridge = Class.create();
Nutanix_ClientServerScriptBridge.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
    isOnSubmitCheckEnabled: function() {
        return new Nutanix_ConfigureSettingScripts().isOnSubmitCheckEnabled();
    },
    fetchDataFromRequestedItem: function() {
        var gr = new GlideRecord("sc_req_item");
        if (gr.get(this.getParameter("sysparm_sysID"))) {
            return gr;
        }
    },

    fieldValidation: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fieldValidation.");

            var catSysId = this.getParameter('sysparm_catSysId');
            var fieldValueMap = this.getParameter('sysparm_fieldValueMap');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();

            return configureScript.fieldValidation(catSysId, fieldValueMap);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fieldValidation. Error:- " + e);
        }
    },

    runScriptIncludeCode: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.runScriptIncludeCode.");
            this.updateCalmVersion();
            gs.setProperty("x_nuta2_nutanix_ca.sync", "1");
			if (new x_nuta2_nutanix_ca.Migration_Script().updatedOneDotSevenMigrationNeeded()) {
                var appUtil = new Nutanix_Calm_Utils();
                appUtil.insertIntoQueue('startMigration_1_7', '', '', '', 'Migrating to v1.7', 'This process is migrating v1.6.1 to v1.7');
            }
            if (new x_nuta2_nutanix_ca.Migration_Script().updatedOneDotSixDotOneMigrationNeeded()) {
                var appUtil = new Nutanix_Calm_Utils();
                appUtil.insertIntoQueue('startMigration_1_6_1', '', '', '', 'Migrating to v1.6.1', 'This process is migrating v1.6 to v1.6.1');
            }
            if (new x_nuta2_nutanix_ca.Migration_Script().updatedOneDotSixMigrationNeeded()) {
                var appUtil = new Nutanix_Calm_Utils();
                appUtil.insertIntoQueue('startMigration_1_6', '', '', '', 'Migrating to v1.6', 'This process is migrating v1.5.2 to v1.6');
            }
            if (new x_nuta2_nutanix_ca.Migration_Script().updatedOneDotFiveDotTwoMigrationNeeded()) {
                var appUtil = new Nutanix_Calm_Utils();
                appUtil.insertIntoQueue('startMigration_1_5_2', '', '', '', 'Migrating to v1.5.2', 'This process is migrating v1.5.1 to v1.5.2');
            }
            if (new x_nuta2_nutanix_ca.Migration_Script().updatedOneDotFiveDotOneMigrationNeeded()) {
                var appUtil = new Nutanix_Calm_Utils();
                appUtil.insertIntoQueue('startMigration_1_5_1', '', '', '', 'Migrating to v1.5.1', 'This process is migrating v1.4.5 to v1.5.1');
            }
            if (new x_nuta2_nutanix_ca.Migration_Script().checkForTheRuntimeConfigurationsCatalogItems()) {
                var appUtil = new Nutanix_Calm_Utils();
                appUtil.insertIntoQueue('startMigration_1_4_5', '', '', '', 'Migrating to v1.4.5', 'This process is migrating v1.4.4 to v1.4.5');
            }
            if (new x_nuta2_nutanix_ca.Migration_Script().isCatalogItemsAvailable()) {
                var appUtil = new Nutanix_Calm_Utils();
                appUtil.insertIntoQueue('startMigration_1_4_4', '', '', '', 'Migrating to v1.4.4', 'This process is migrating v1.4 to v1.4.4');
            }
            if (new x_nuta2_nutanix_ca.Migration_Script().isMigrationNeeded()) {
                var appUtil = new Nutanix_Calm_Utils();
                appUtil.insertIntoQueue('startMigration', '', '', '', 'Migrating to v1.4', 'This process is migrating v1.3 to v1.4.');
            }
            if (gs.getProperty('x_nuta2_nutanix_ca.1_4_3') == 0) {
                var appUtil = new Nutanix_Calm_Utils();
                appUtil.insertIntoQueue('start1_4_3_Migration', '', '', '', 'Migrating to v1.4', 'This process is migrating v1.3 to v1.4.');
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.runScriptIncludeCode. Error:- " + e);
        }
    },

    updateCalmVersion: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.updateCalmVersion.");
            var previous_calm_vesrsion = parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version'));
            var new_calm_version;
            var logger = new Nutanix_Calm_Logger();
            var utils = new Nutanix_Calm_Utils();

            var authResp = utils.makeCalmApiCall("post", "/projects/list", '{"kind" : "project"}');
            var statusCode = authResp.getStatusCode();

            if (authResp.getStatusCode() == '200' || authResp.getStatusCode() == '201') {

                var verResp = utils.makeCalmApiVersionCall("get", "/apps/version", '');
                if (verResp.getStatusCode() == '200' || verResp.getStatusCode() == '201') {
                    var response = verResp.getBody();
                    new_calm_version = parseFloat(response.split('.')[0] + '.' + response.split('.')[1]);
                    if ((parseFloat(new_calm_version) == parseFloat("3.2")) &amp;&amp; (parseFloat(new_calm_version) &gt; parseFloat(previous_calm_vesrsion))) {
                        gs.setProperty('x_nuta2_nutanix_ca.1_4_4', '0');
                    }
                    var grConfig = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
                    if (grConfig.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id') + "")) {
                        grConfig.query();
                        if (grConfig.next()) {
                            grConfig.calm_version = response.split('.')[0] + '.' + response.split('.')[1];
                            gs.setProperty('x_nuta2_nutanix_ca.calm_version', '');
                            gs.setProperty('x_nuta2_nutanix_ca.calm_version', grConfig.calm_version);
                            grConfig.update();
                            logger.info('Sync Now Calm Version updated-&gt;' + grConfig.calm_version);
                        }
                    }

                } else {
                    var grConfig = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
                    if (grConfig.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id') + "")) {
                        grConfig.query();
                        if (grConfig.next()) {
                            grConfig.calm_version = '';
                            grConfig.update();
                        }
                    }
                    gs.addErrorMessage('Nutanix Calm Version cannot be detected.Please check the logs and retry saving properties.');
                    logger.error('Calm Version cannot be detected. Error-&gt;' + verResp.getBody());
                }
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.updateCalmVersion. Error:- " + e);
        }
    },

    InventorySync: function() {
        var logger = new Nutanix_Calm_Logger();
        var appUtil = new Nutanix_Calm_Utils();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.InventorySync.");

            var inventory_type = this.getParameter('sysparm_value');
            var inventory_check = this.getParameter('sysparm_check');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.InventorySync." + inventory_type + inventory_check);
            if (inventory_type == 'all') {
                if (inventory_check == '0') {
                    this.runScriptIncludeCode();
                }
                appUtil.insertIntoQueue('startInventorySync', '', '', '', 'Start inventory sync', 'This process is invoking the import of all the inventories.');
            } else if (inventory_type == 'project') {
                appUtil.insertIntoQueue('startProjectSync', '', '', '', 'Start project sync', 'This process is invoking the import of all the projects.');
            } else if (inventory_type == 'blueprint') {
                appUtil.insertIntoQueue('startBlueprintSync', '', '', '', 'Start blueprint sync', 'This process is invoking the import of all the blueprints.');
            } else if (inventory_type == 'runbook') {
                appUtil.insertIntoQueue('startRunbookSync', '', '', '', 'Start runbook sync', 'This process is invoking the import of all the runbooks.');
            } else if (inventory_type == 'marketplaceItem') {
                appUtil.insertIntoQueue('startMPISync', '', '', '', 'Start marketplace item sync', 'This process is invoking the import of all the marketplace items.');
            } else if (inventory_type == 'application') {
                appUtil.insertIntoQueue('startApplicationSync', '', '', '', 'Start application sync', 'This process is invoking the import of all the applications.');
            }

            return true;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.InventorySync. Error:- " + e);
        }
    },

    fetchSnapshotPolicy: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchSnapshotPolicy.");
            var configScript = new Nutanix_FetchConfigureSettingDropdown();
            var profile = this.getParameter('sysparm_profile') + "";
            var envUUID = this.getParameter('sysparm_envSysId') + "";
            var catSysID = this.getParameter('sysparm_catsysid') + "";
            return configScript.fetchSnapshotPolicy(profile, envUUID, catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchSnapshotPolicy. Error:- " + e);
        }
    },

    fetchLaunchVars: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchLaunchVars.");
            var catSysID = this.getParameter('sysparm_catsysid') + "";
            var profile = this.getParameter('sysparm_profile') + "";
            var configScript = new Nutanix_FetchConfigureSettingDropdown();

            return configScript.fetchLaunchVars(catSysID, profile);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchLaunchVars. Error:- " + e);
        }
    },

    variableArrayParser: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.variableArrayParser");
            var type = this.getParameter('sysparm_type');
            var parent_uuid = this.getParameter('sysparm_parentUuid');
            var var_array = this.getParameter('sysparm_varJson');
            var profile_name = this.getParameter('sysparm_profile_sysid');
            var envuuid = this.getParameter('sysparm_envsysid');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.variableArrayParser(type, parent_uuid, var_array, this.getParameter("sysparm_field"), profile_name, envuuid);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variableArrayParser. Error:- " + e);
        }
    },

    ValidateCustomLogo: function() {
        try {
            var st = '';
            var gsa = new GlideSysAttachment();
            var table_sys_id = this.getParameter("sysparm_sysid");
            var logo = new GlideRecord('sys_attachment');
            logo.addQuery('table_sys_id', table_sys_id);
            logo.query();
            if (logo.next()) {
                if (logo.content_type + '' != 'image/png' &amp;&amp; logo.content_type + '' != 'image/svg+xml' &amp;&amp; logo.content_type + '' != 'image/jpeg' &amp;&amp; logo.content_type + '' != 'image/jpg') {
                    st = 'Formats accepted is limited to .png, .jpeg, .jpg, .svg';
                    gsa.deleteAttachment(logo.sys_id);
                }
                if (logo.size_bytes &gt; 200000) {
                    st = 'Maximum allowed file size is 200 K';
                    gsa.deleteAttachment(logo.sys_id);
                }
                if (logo.image_height &gt; 150 || logo.image_width &gt; 150) {
                    st = 'Icon should be less than 150px X 150px';
                    gsa.deleteAttachment(logo.sys_id);
                }
            }
            return st;
        } catch (e) {
            gs.info("Exception caught inside Nutanix_ClientServerScriptBridge.ValidateCustomLogo. Error : " + e);
        }
    },

    //new environment func

    gettingValidatedProfiles: function() {
        try {

            var logger = new Nutanix_Calm_Logger();
            var pro_sys_ID_arr = [];
            var environmentsArr = this.getParameter("sysparm_Env");

            environmentsArr = environmentsArr.split(",");
            var environments = environmentsArr[(environmentsArr.length - 1)];
            var profile_pairs = [];
            var grPro = new GlideRecord("x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation");
            grPro.addQuery("catalog_item", this.getParameter("sysparm_bpsysID"));
            grPro.query();
            while (grPro.next()) {
                profile_pairs.push({
                    "name": grPro.application_profile.name + "",
                    "sys_id": grPro.application_profile.sys_id
                });
            }
            var blueprintType = this.getParameter("sysparm_bpType");

            var env_uuid;
            var pro_name;
            var pro_uuid;
            var pro_sys_ID;
            var envName;
            var grEnv = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
            if (grEnv.get(environments)) {
                env_uuid = grEnv.uuid + "";
                envName = grEnv.name;
                pro_sys_ID = (grEnv.project);
                pro_name = (grEnv.project).getDisplayValue();
                pro_uuid = grEnv.project.uuid + "";
            }

            var body = new Object();
            var profile = [];
            body["api_version"] = "3.0";
            var metadata = {};
            var api_info;
            var tableBP;
            if (blueprintType == "published") {
                metadata.kind = "marketplace_item";
                api_info = "calm_marketplace_items";
                tableBP = "x_nuta2_nutanix_ca_nutanix_marketplaceitems";
            } else {
                metadata.kind = "blueprint";
                api_info = "blueprints";
                tableBP = "x_nuta2_nutanix_ca_nutanix_blueprint";
            }
            metadata["categories"] = {};
            //sysparm_blueprint
            var project_reference = {};
            project_reference["kind"] = "project";
            project_reference["name"] = pro_name;
            project_reference["uuid"] = pro_uuid;
            metadata["project_reference"] = project_reference;

            body["metadata"] = metadata;
            var specs = {};
            var environment_profile_pairs = [];
            var environment = {};
            environment["uuid"] = env_uuid;
            var profile_obj = {};
            var arr = [];
            //profile_pairs = JSON.parse(profile_pairs);
            for (var p in profile_pairs) {
                profile_obj = {};
                profile_obj.app_profile = {
                    "name": profile_pairs[p].name //"name": profile_pairs[p].name
                };
                profile_obj.environment = environment;
                environment_profile_pairs.push(profile_obj);
                //arr.push(grBP.application_profile.name);
            }
            gs.info('environment_profile_pairs: ' + environment_profile_pairs);
            specs["environment_profile_pairs"] = environment_profile_pairs;
            var final_profile = [];
            body["spec"] = specs;
            this.appUtil = new Nutanix_Calm_Utils();
            var valid_profs = [];

            var uuidBP;
            var bpref = new GlideRecord(tableBP);
            if (bpref.get(this.getParameter("sysparm_bpsysID"))) {
                uuidBP = bpref.uuid + "";
            }

            logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment Body:" + JSON.stringify(body));
            var response = this.appUtil.makeCalmApiCall('POST', '/' + api_info + '/' + uuidBP + "/patch_with_environment/validate", JSON.stringify(body));
            logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment " + JSON.stringify(response.getBody()) + response.getStatusCode());
            if (response.getStatusCode() + '' == "200" || response.getStatusCode() + '' == "201") {
                response = JSON.parse(response.getBody());
                var environment_profile_pair = response.status.environment_profile_pairs;
                for (var j = 0; j &lt; environment_profile_pair.length; j++) {
                    var name = environment_profile_pair[j].app_profile.name + "";
                    var state = environment_profile_pair[j].state;
                    //   if (profile.indexOf(name) != -1) {

                    if (state == "valid") {
                        if (valid_profs.indexOf(name) == -1)
                            valid_profs.push(name);
                    }

                }
            } else {
                logger.info("error in Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment" + response.getStatusCode());
            }
            return JSON.stringify(valid_profs);

        } catch (e) {
            gs.info("Error :::   " + e);
        }
    },

    hideAccessLocalGroupOption: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.hideAccessLocalGroupOption.");
            var localGroupOption = new Nutanix_FetchConfigureSettingDropdown();
            return localGroupOption.hideAccessLocalGroupOption(); //returns the value that is present on the form
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.hideAccessLocalGroupOption. Error:- " + e);
        }
    },

    supportStatusMPI: function() {
        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.supportStatusMPI.");
            var bpSysID = this.getParameter('sysparm_blueprint') + "";
            var supportStatus = new Nutanix_FetchConfigureSettingDropdown();
            return supportStatus.supportStatusMPI(bpSysID); //returns the value.
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.supportStatusMPI. Error:- " + e);
        }
    },

    advanceVariableDynamicOptions: function() {

        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getHttpValues.");

            var catSysId = this.getParameter('sysparm_catSysID');
            // 			var fieldValueMap = this.getParameter('sysparm_fieldValueMap');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.advanceVariableDynamicOptions(catSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getHttpValues. Error:- " + e);
        }

    },

    getHttpValues: function() {

        var utils = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getHttpValues.");

            var type = this.getParameter('sysparm_type');
            var parent_uuid = this.getParameter('sysparm_parentUuid');
            var pre_map = this.getParameter('sysparm_preMap');
            var str = this.getParameter("sysparm_str");
            var profile_sysid = this.getParameter('sysparm_profile');
            var env_profile = this.getParameter('sysparm_env_profile');
            var env_sysid = this.getParameter('sysparm_env_sysid');
            //var bp_sysid = this.getParameter('sysparm_bp_sysid');
            if (str &amp;&amp; str.length != 0)
                str = str.split(",");
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getHttpValues(type, parent_uuid, pre_map, str, profile_sysid, env_profile, env_sysid);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getHttpValues. Error:- " + e);
        }
    },


    mpiPatching: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.mpiPatching.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.mpiPatching(project, blueprint);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.mpiPatching. Error:- " + e);
        }
    },

    getSubnet: function() {

        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("***Inside Nutanix_ClientServerScriptBridge.getSubnet. catalog sys_id" + this.getParameter('sysparm_catSysID') + " projectUuid " + projectUuid);
            var catalog = this.getParameter('sysparm_catSysID');
            var projectUuid = this.getParameter('sysparm_ProjectUuid');
            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getProjectSubnet(catalog, projectUuid);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getSubnet. Error:- " + e);
        }

    },

    checkQueue: function() {
        var logger = new Nutanix_Calm_Logger();
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_process_queue');
        //gr.addEncodedQuery('state!=complete^topic!=startInventoryDelete^topic!=processImportedApp^topic!=importApplications');
        gr.addEncodedQuery('state!=complete^state!=error^topic!=startInventoryDelete^topic!=processImportedApp^topic!=importRecoveryPoints^topic!=processRecoveryPoints');
        gr.query();
        if (gr.next()) {
            //gs.addErrorMessage('Inventory is currently being synced. Please wait for this operation to finish.');
            //logger.error("Inside Nutanix_ClientServerScriptBridge.checkQueue: Inventory is being synced.");
            return false;
        } else if (gs.getProperty('x_nuta2_nutanix_ca.Delete_Flag') == '1') {
            //gs.addErrorMessage('Inventory is currently being deleted. Please wait for this operation to finish.');
            //logger.error("Inside Nutanix_ClientServerScriptBridge.checkQueue: Inventory is being deleted.");
            return false;
        } else
            return true;
    },

    deleteFlagState: function() {
        if (gs.getProperty('x_nuta2_nutanix_ca.Delete_Flag') == 1) {
            return 'deleting';
        } else {
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_process_queue');
            gr.addEncodedQuery('state!=complete^state!=error^topic!=startInventoryDelete^topic!=processImportedApp^topic!=importRecoveryPoints^topic!=processRecoveryPoints');
            gr.query();
            if (gr.next()) {
                return 'syncing';
            }
        }
    },


    getUsers: function() {
        var query = 'sys_idIN';
        var count = 0;
        var gr = new GlideAggregate('sys_user_has_role');
        gr.addQuery('role.name', 'catalog');
        gr.groupBy('user');
        gr.query();
        while (gr.next()) {
            count = 0;
            var user_id = gr.user.sys_id;
            var gsr = new GlideRecord('sys_user_has_role');
            gsr.addQuery('user.sys_id', user_id);
            gsr.query();
            while (gsr.next()) {
                if (gsr.role.name == 'x_nuta2_nutanix_ca.user') {
                    count++;
                    if (count &gt;= 1) {
                        query += gsr.user.sys_id + ',';
                    }
                }
            }
        }
        return query;
    },
    getGroups: function() {
        var query = 'sys_idIN';
        var count = 0;
        var gr = new GlideAggregate('sys_group_has_role');
        gr.addQuery('role.name', 'catalog');
        gr.groupBy('group');
        gr.query();
        while (gr.next()) {
            count = 0;
            var group_id = gr.group.sys_id;
            var gsr = new GlideRecord('sys_group_has_role');
            gsr.addQuery('group.sys_id', group_id);
            gsr.query();
            while (gsr.next()) {
                if (gsr.role.name == 'x_nuta2_nutanix_ca.user') {
                    count++;
                    if (count &gt;= 1) {
                        query += gsr.group.sys_id + ',';
                    }
                }
            }
        }
        return query;
    },

    appFlag: function() {
        var utils = new Nutanix_Calm_Utils();
        var grAction = new GlideRecord(utils.configuration.table.NutanixCalmAction);
        if (grAction.get(this.getParameter('sysparm_actId'))) {
            var appUUID = grAction.parent_uuid;
            var gr = new GlideRecord(utils.configuration.table.NutanixCalmApplication);
            gr.addQuery('uuid', appUUID);
            gr.query();
            gr.next();

            if (gr.action_flag == '1') {
                return '1';
            } else
                return '0';
        }
    },

    getVariablesProperty: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var varProp = gs.getProperty('x_nuta2_nutanix_ca.aws_display_vars');
            return varProp;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getVariablesProperty. Error:- " + e);
        }
    },

    cleanInstance: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_process_queue');
            gr.addEncodedQuery('state!=complete^topic!=startInventoryDelete');
            gr.query();
            logger.debug("Inside Nutanix_ClientServerScriptBridge.cleanInstance.");
            if (gr.next() || gs.getProperty('x_nuta2_nutanix_ca.Delete_Flag') == '1') {
                logger.error('A sync or a delete process is currently in progress. Please wait for them to finish');
            } else {
                gs.setProperty('x_nuta2_nutanix_ca.Delete_Flag', '1');
                var grDel = new Nutanix_Calm_Utils();
                grDel.insertIntoQueue('startInventoryDelete', '', '', '', 'Starts Inventory deletion', 'This process deletes the calm snow data.');
                logger.info('Inventory cleanup has started.');
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.cleanInstance. Error:- " + e);
        }
    },

    fetchBlueprints: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchBlueprints.");
            var project = this.getParameter('sysparm_project');
            var blueprintType = this.getParameter('sysparm_blueprintType');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchBlueprints(project, blueprintType);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchBlueprints. Error:- " + e);
        }
    },

    fetchApplicationProfiles: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var blueprint = this.getParameter('sysparm_blueprint');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchApplicationProfiles. Blueprint :" + blueprint);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchApplicationProfiles(blueprint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchApplicationProfiles. Error:- " + e);
        }
    },

    fetchProviderIcons: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchProviderIcons.");
            var catSysId = this.getParameter('sysparm_catId');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchProviderIcons(catSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchProviderIcons. Error:- " + e);
        }
    },

    fetchActionVariables: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchActionVariables.");
            var JSONstr = '';
            var actSysId = this.getParameter('sysparm_actSysId');
            var grAction = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_action');
            if (grAction.get(actSysId)) {
                var actName = grAction.action_name + '';
                var trueName = grAction.name + '';
                var actionType = grAction.type + '';
                var varStr = grAction.action_variables + '';
            }
            if (varStr != '') {
                JSONstr = {
                    "name": actName,
                    "true_name": trueName,
                    "type": actionType,
                    "vars": varStr
                };
            } else
                JSONstr = {
                    "name": actName,
                    "true_name": trueName,
                    "type": actionType
                };
            return JSON.stringify(JSONstr);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchActionVariables. Error:- " + e);
        }
    },

    getProfileVariableDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.getProfileVariableDetails(project, blueprint, application_profile);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails. Error:- " + e);
        }
    },
    getMultipleProfileVariableDetails: function() { //multi-profile- project function
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getMultipleProfileVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');
            var cat_item = this.getParameter('sysparm_cat_item');
            var delta_profile = this.getParameter('sysparm_delta_profiles');
            var type = this.getParameter('sysparm_type');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.getMultipleProfileVariableDetails(project, blueprint, application_profile, cat_item, delta_profile, type);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getMultipleProfileVariableDetails. Error:- " + e);
        }
    },

    getServiceVariableDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getServiceVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');
            var type = this.getParameter('sysparm_type');
            var bpType = this.getParameter('sysparm_bpType');
            var cat_item = this.getParameter('sysparm_cat_item');
            var delta_profiles = this.getParameter('sysparm_delta_profiles');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getMultipleServiceVariableDetails(project, blueprint, application_profile, type, bpType, cat_item, delta_profiles);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails. Error:- " + e);
        }
    },

    getCrendentialsDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getCrendentialsDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.getCrendentialsDetails(project, blueprint, application_profile);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getCrendentialsDetails. Error:- " + e);
        }
    },

    mappedCredentials: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.mappedCredentials.");
            var environment = this.getParameter('sysparm_environment');
            var projects = this.getParameter('sysparm_project');
            var bpType = this.getParameter('sysparam_bpType');

            logger.debug("Inside Nutanix_ClientServerScriptBridge.mappedCredentials.\n projects " + projects + "\n bpType" + bpType + "\n environment" + environment);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.mappedCredentials(projects, bpType, environment);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.mappedCredentials. Error:- " + e);
        }
    },

    fetchEnvironmentCredentials: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchEnvironmentCredentials.");
            var credSysId = this.getParameter('sysparm_credentialSydID');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchEnvironmentCredentials(credSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchEnvironmentCredentials. Error:- " + e);
        }
    },

    getCatalogInfo: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getCatalogInfo.");
            var catalogItemSysID = this.getParameter('sysparm_catalogItemSysID');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getCatalogInfo(catalogItemSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getCatalogInfo. Error:- " + e);
        }
    },

    getRealtedCatalogItems: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getRealtedCatalogItems.");
            var blueprint = this.getParameter('sysparm_blueprint');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getRealtedCatalogItems(blueprint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getRealtedCatalogItems. Error:- " + e);
        }
    },

    getBlueprintInfo: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getBlueprintInfo.");
            var blueprint = this.getParameter('sysparm_blueprint');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getBlueprintInfo(blueprint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getBlueprintInfo. Error:- " + e);
        }
    },

    fetchRuntimeVariablesValue: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchRuntimeVariablesValue.");
            var sysId = this.getParameter('sysparm_sysId');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchRuntimeVariablesValue(sysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchRuntimeVariablesValue. Error:- " + e);
        }
    },

    fetchProjectAndProfileList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchProjectAndProfileList.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchMultipleProjectAndProfileList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchProjectAndProfileList. Error:- " + e);
        }
    },
    fetchMultipleProjectAndEndpointList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMultipleProjectAndEndpointList.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchMultipleProjectAndEndpointList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMultipleProjectAndEndpointList. Error:- " + e);
        }
    },

    fetchOrderFormData: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchOrderFormData.");
            var profile = this.getParameter('sysparm_profile');
            var catSysID = this.getParameter('sysparm_catSysID');
            var envsysid = this.getParameter('sysparm_envsysid');
            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchOrderFormData(profile, catSysID,envsysid);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchOrderFormData. Error:- " + e);
        }
    },

    fetchCredentialsList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchCredentialsList.");
            var catSysID = this.getParameter('sysparm_catSysID');
            var projectUUID = this.getParameter('sysparm_project');
            var envUUID = this.getParameter('sysparm_env');
            var configureScript = new Nutanix_ImportCredentials();
            return configureScript.fetchCredentialsList(catSysID, projectUUID, envUUID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchCredentialsList. Error:- " + e);
        }
    },

    fetchMappedCredentialsDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMappedCredentialsDetails.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_ImportCredentials();
            return configureScript.fetchMappedCredentialsDetails(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMappedCredentialsDetails. Error:- " + e);
        }
    },

    checkDuplicate: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.checkDuplicate.");
            var catName = this.getParameter('sysparm_catName');
            var catSysId = this.getParameter('sysparm_catSysId');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.checkDuplicate(catName, catSysId);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkDuplicate. Error:- " + e);
        }
    },

    /*checkCatalogValidity: function() {
    	var logger = new Nutanix_Calm_Logger();
    	try {
    		logger.debug("Inside Nutanix_ClientServerScriptBridge.checkCatalogValidity.");
    		var blueprintData=[];
    		var blueprintType = this.getParameter('blueprintType');
    		var blueprintUUID = this.getParameter('blueprintUUID');
    		var projectSysId = this.getParameter('projectUUID');
    		blueprintData.push("projectSysId",projectSysId);
    		var profileSysID = '';
    		if(blueprintType == 'x_nuta2_nutanix_ca_nutanix_blueprint') {
    			var profileSysIds = this.getParameter('profileSysId').split(',');
    			var profileName = this.getParameter('profileName');
    			var envUUID = this.getParameter('envUUID');
    			for (var i = 0; i &lt; profileSysIds.length; i++) {
    				var profile = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
    				profile.get(profileSysIds[i]);
    				logger.debug("***True/false: profile_name : " + profile.name + ' profileName : ' + profileName + '');
    				if (profile.name + '' == profileName + '') {
    					profileSysID = profileSysIds[i] + '';
    					break;
    				} else {
    					continue;
    				}
    			}
    			blueprintData.push("envUUID",envUUID);
    			blueprintData.push("profileSysID",profileSysID);
    		}
    		if(blueprintType == 'x_nuta2_nutanix_ca_runbooks') {
    			var endpoint = this.getParamter('endpoint');
    			blueprintData.push("endpoint",endpoint);
    		}
    		this.logger.info(profileSysIds+"profileSysId"+profileSysID);
    		var configureScript = new Nutanix_CheckCatalogItemValidity();
    		return configureScript.checkCatalogValidity2(blueprintType, blueprintUUID, blueprintData);
    	} catch (e) {
    		logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkCatalogValidity. Error:- " + e);
    	}
    },*/
    checkCatalogValidity: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.checkCatalogValidity.");
            var ans = {};
            var onChangeType = this.getParameter('onChangeType');
            var projectSysId = '';
            var blueprintType = '';
            var blueprintUUID = '';
            var profileSysIds = '';
            var profileName = '';
            var envUUID = '';

            if (onChangeType == 'project') {
                projectSysId = this.getParameter('sysparm_projectUUID');
            } else if (onChangeType == 'profile') {
                blueprintType = this.getParameter('sysparm_blueprintType');
                blueprintUUID = this.getParameter('sysparm_blueprintUUID');
                profileSysIds = this.getParameter('sysparm_profileSysId').split(',');
                profileName = this.getParameter('sysparm_profileName');
                envUUID = this.getParameter('sysparm_envUUID');
            }
            var configureScript = new Nutanix_CheckCatalogItemValidity();
            if (projectSysId != '') {
                var state = configureScript.checkCatalogValidity('', '', projectSysId, 'Project');
                ans[projectSysId] = {
                    "state": state,
                    "name": "Project"
                };
            }

            if (envUUID != '') {
                var state = configureScript.checkCatalogValidity(blueprintType, blueprintUUID, envUUID, 'Environment');
                ans[envUUID] = {
                    "state": state,
                    "name": "Environment"
                };
            }
            var profileSysId = '';

            for (var i = 0; i &lt; profileSysIds.length; i++) {
                var profile = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                if (profile.get(profileSysIds[i])) {
                    if (profile.name + '' == profileName + '') {
                        profileSysId = profileSysIds[i] + '';
                        break;
                    } else {
                        continue;
                    }
                } else {
                    logger.info("error in Nutanix_ClientServerScriptBridge.checkCatalogValidity - couldnt find a record using getmethod()");
                }
            }
            if (profileSysId != '') {
                var state = configureScript.checkCatalogValidity(blueprintType, blueprintUUID, profileSysId, 'BlueprintProfile');
                ans[profileName] = {
                    "state": state,
                    "name": "Blueprint/Profile"
                };
            }

            return JSON.stringify(ans);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkCatalogValidity. Error:- " + e);
        }
    },

    getUserEmail: function() {
        var gr = new GlideRecord('sys_user');

        if (gr.get(gs.getUserID())) {
            return gr.email + '';
        }
    },
    fetchMultipleBlueprints: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var blueprintType = this.getParameter('sysparm_blueprintType');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMultipleBlueprints. blueprintType " + blueprintType);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchMultipleBlueprints(blueprintType);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMultipleBlueprints. Error:- " + e);
        }
    },
    fetchMultipleProjects: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var blueprint = this.getParameter('sysparm_blueprint');
            var blueprintType = this.getParameter('sysparm_blueprintType');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchMultipleProjects. Blueprint " + blueprint + " BlueprintType " + blueprintType);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.fetchMultipleProjects(blueprint, blueprintType);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchMultipleProjects. Error:- " + e);
        }
    },
    getMultipleServiceVariableDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getMultipleServiceVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');;
            var type = this.getParameter('sysparm_type');
            var bpType = this.getParameter('sysparm_bpType');
            var project1 = project.split(',');
            var profile1 = application_profile.split(',');
            var answer = [];
            for (var i in profile1) {
                var configureScript = new Nutanix_FetchConfigureSettingDropdown();
                var response = JSON.parse(configureScript.getServiceVariableDetails(project1[0], blueprint, profile1[i], type, bpType));
                var res = {
                    "profile": profile1[i],
                    "response": response.service_configuration
                };
                answer.push(res);
            }
            logger.debug("End Nutanix_ClientServerScriptBridge.getMultipleServiceVariableDetails." + JSON.stringify(answer));
            return JSON.stringify(answer);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.toyota1_getServiceVariableDetails. Error:- " + e);
        }
    },

    getProject: function(blueprint, blueprintType) {
        var logger = new Nutanix_Calm_Logger();
        logger.debug("Inside Nutanix_ClientServerScriptBridge.getProject.");
        try {
            logger.debug("Inside global Business Rule.getProject.blueprint : " + blueprint + 'blueprintType : ' + blueprintType);

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
            gr.addQuery('catalog_item', blueprint);
            if (blueprintType == 'unpublished') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            }
            if (blueprintType == 'runbook') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_runbook_sysId'));
            }
            if (blueprintType == 'published_runbook') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_published_runbook_sysId'));
            }
            if (blueprintType == 'published') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));
            }
            gr.orderBy('catalog_item.name');
            gr.query();
            var query = 'state=COMPLETE^sys_idIN';
            var pro = [];
            while (gr.next()) {
                if ((gr.catalog_item.state + '').toUpperCase() == 'ACTIVE' || (gr.catalog_item.state + '').toUpperCase() == 'PUBLISHED') {
                    query += gr.projects + ',';
                }
            }
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProject. Query return " + query);

            return query;
        } catch (e) {
            logger.debug("Exception Nutanix_ClientServerScriptBridge.getProject. Error:- " + e);
        }
    },
    getProfile: function(blueprintSysId, selectedProfiles) {
        var logger = new Nutanix_Calm_Logger();
        logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfile.");
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfile." + blueprintSysId + " " + selectedProfiles);

            selectedProfiles = selectedProfiles.split(",");

            var gr = new GlideRecord('x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation');
            gr.addQuery('catalog_item', blueprintSysId);
            gr.addQuery('state', 'active');
            gr.orderBy('application_profile.name');
            gr.query();

            var query = 'sys_idIN';

            while (gr.next()) {
                logger.debug("gr.application_profile.name :" + gr.application_profile.name);
                if (selectedProfiles.indexOf(gr.application_profile.name + "") != -1) {
                    query += gr.application_profile + ',';
                }
            }
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getProfile. Query return " + query);
            return query;
        } catch (e) {
            logger.debug("Exception Nutanix_ClientServerScriptBridge.getProfile. Error:- " + e);
        }
    },
    noProfileVariableDetails: function() { //multi-profile- project function
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.noProfileVariableDetails.");
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            var application_profile = this.getParameter('sysparm_application_profile');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            var response = configureScript.noProfileVariableDetails(project, blueprint, application_profile);

            return response;
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.noProfileVariableDetails. Error:- " + e);
        }
    },


    getSubnetDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getServiceVariableDetails.");
            var project = this.getParameter('sysparm_project');
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getSubnetDetails. Project : " + project);

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.getNutanixSubnetList(project);

        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getProfileVariableDetails. Error:- " + e);
        }
    },

    getDeltaProject: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getDeltaProject.");
            var project_sysId = this.getParameter('sysparm_project').split(',');
            var catalog_sysId = this.getParameter('sysparm_catItem');
            var deltaProject = [];

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addEncodedQuery('item_name.sys_id=' + catalog_sysId);
            gr.query();

            while (gr.next()) {
                var projects = gr.getValue('multiple_projects') + '';
                for (var i in project_sysId) {
                    if (projects.includes(project_sysId[i]))
                        continue;
                    else
                        deltaProject.push(project_sysId[i]);
                }
            }

            return JSON.stringify(deltaProject);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getDeltaProject. Error:- " + e);
        }
    },

    getDeltaProfile: function() {
        var logger = new Nutanix_Calm_Logger();
        var utils = new Nutanix_Calm_Utils();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getDeltaProject.");
            var profile_sysId = this.getParameter('sysparm_profile').split(',');
            var catalog_sysId = this.getParameter('sysparm_catItem');
            var deltaProfile = [];


            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addEncodedQuery('item_name.sys_id=' + catalog_sysId);
            gr.query();

            while (gr.next()) {
                var profile = gr.getValue('multiple_application_profile') + '';
                for (var i in profile_sysId) {
                    if (profile.includes(profile_sysId[i])) {
                        continue;
                    } else {
                        var gr1 = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                        gr1.addQuery('application_profile', profile_sysId[i]);
                        gr1.addQuery('catalog_item', catalog_sysId);
                        //			gr1.addQuery('isprofilevariable', false);
                        gr1.query();
                        if (gr1.next()) {
                            continue;
                        } else {
                            deltaProfile.push(profile_sysId[i]);
                        }
                    }
                }
            }

            return JSON.stringify(deltaProfile);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.getDeltaProject. Error:- " + e);
        }
    },
    fetchBlueprintName: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchBlueprintName.");
            var BlueprintsysId = this.getParameter('sysparm_BlueprintsysId');

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
            gr.addQuery('catalog_item', BlueprintsysId);
            gr.query();
            if (gr.next())
                return gr.catalog_item.name + '' + " " + gr.version + '';
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchBlueprintName. Error:- " + e);
        }
    },
    getProjectCount: function() {
        var blueprint = this.getParameter('sysparm_blueprint');
        var gr = new GlideAggregate('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
        gr.addQuery('catalog_item', blueprint);
        gr.addAggregate('COUNT');
        gr.query();
        var count = 0;
        if (gr.next()) {
            count = gr.getAggregate('COUNT');
        }
        return count;
    },
    getProfileCount: function() {
        var blueprint = this.getParameter('sysparm_blueprint');
        var profile = new GlideAggregate('x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation');
        profile.addQuery('catalog_item', blueprint);
        profile.addQuery('state', 'active');
        profile.addAggregate('COUNT');
        profile.query();
        var count = 0;
        if (profile.next()) {
            count = profile.getAggregate('COUNT');
        }
        return count;
    },
    getProfilesysIdNameJSON: function() {
        var profile = this.getParameter('sysparm_profile');
        var array_profile = profile.split(',');
        var profile_JSON = {};
        for (var n = 0; n &lt; array_profile.length; n++) {
            var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
            if (profile_gr.get(array_profile[n])) {
                profile_JSON[profile_gr.sys_id] = {
                    "name": profile_gr.name + ''
                };
            } else {
                logger.info("error in Nutanix_ClientServerScriptBridge.getProfilesysIdNameJSON - couldnt find a record using getmethod()");
            }
        }
        return JSON.stringify(profile_JSON);
    },
    getSecretVaraiable: function() {
        var profile = this.getParameter('sysparm_profile');
        var array_profile = profile.split(',');
        var blueprint = this.getParameter('sysparm_blueprint');
        var answer = [];
        for (var n = 0; n &lt; array_profile.length; n++) {
            var gr_variable = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            gr_variable.addEncodedQuery('isprofilevariable=true^data_type=SECRET^catalog_item=' + blueprint + '^application_profile=' + array_profile[n]);
            gr_variable.query();
            while (gr_variable.next()) {
                answer.push(gr_variable.variable.name);
            }
        }
        return answer.toString();
    },
    /*	migration_1_4 : function(){
    		var answer = '';
    		if(gs.getProperty('x_nuta2_nutanix_ca.Version1_4_3_migration_needed') == '0')
    		{
    			var utils = new Nutanix_Calm_Utils();

    			var blueprint = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
    			blueprint.addQuery('state', 'ACTIVE');
    			blueprint.query();
    			while(blueprint.next()){
    				var final_var_list = [];
    				var response = utils.makeCalmApiCall("get", '/blueprints/'+blueprint.uuid, "");
    				if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){
    				   var app_profile_list = JSON.parse(response.getBody()).spec.resources.app_profile_list;
    					if(app_profile_list.length &lt;1)
    						   continue;

    				   for(var i  in app_profile_list){

    					   var variable_list =  app_profile_list[i].variable_list;
    						 if(variable_list.length &lt;1)
    								 continue;
    						  for(var j in variable_list){						  
    	// 						var var_index = final_var_list.indexOf(variable_list[j].name);
    	// 				        var_index === -1 ? final_var_list.push(variable_list[j].name) :( answer.inludes(blueprint.name)? '' : answer += " "+blueprint.name);
    							var variable_prop = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
    							variable_prop.addQuery('uuid', variable_list[j].uuid);
    							variable_prop.query();
    							if(variable_prop.next()){
    								continue;
    							}
    							else{ 
    							  answer += " "+blueprint.name;	
    							}
    					   }
    				   }
    				}
    			}
    		}
    		if(blueprint.getRowCount() == 0 || answer == ''){
    			gs.setProperty('x_nuta2_nutanix_ca.Version1_4_3_migration_needed', '1');
    		}

    		return answer+"";
    	},*/
    credentialList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchOrderFormData.");
            var catSysID = this.getParameter('sysparm_catSysID');

            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.credentialList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchOrderFormData. Error:- " + e);
        }
    },

    fetchProfilesBasisOnEnvironment: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var project_name;
            var type;
            var profile1;
            var blueprint;
            var project_def = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
            project_def.addQuery('uuid', this.getParameter('sysparm_proValue'));
            project_def.query();
            if (project_def.next())
                project_name = project_def.name + '';

            var ga = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            ga.addQuery('item_name', this.getParameter('sysparm_sysID'));
            ga.query();
            if (ga.next()) {
                profile1 = ga.multiple_application_profile + "";
                blueprint = (ga.blueprint).uuid + "";
                type = ((ga.item_name.category).getDisplayValue());
            }

            var body = new Object();
            var profile = [];
            body["api_version"] = "3.0";
            var metadata = {};
            var api_info;
            if (type == 'Marketplace Blueprint') {
                metadata.kind = "marketplace_item";
                api_info = "calm_marketplace_items";
            } else {
                metadata.kind = "blueprint";
                api_info = "blueprints";
            }
            metadata["categories"] = {};

            var project_reference = {};
            project_reference["kind"] = "project";
            project_reference["name"] = project_name + '';
            project_reference["uuid"] = this.getParameter("sysparm_proValue") + "";

            metadata["project_reference"] = project_reference;

            body["metadata"] = metadata;

            var specs = {};
            var environment_profile_pairs = [];
            var environment = {};
            environment["uuid"] = this.getParameter("sysparm_env") + "";

            var app_profile = profile1;
            app_profile = app_profile.split(",");
            for (var i = 0; i &lt; app_profile.length; i++) {
                var profile_obj = {};
                var gr = new GlideRecord("x_nuta2_nutanix_ca_application_profile");
                if (gr.get(app_profile[i])) {
                    profile_obj.app_profile = {
                        "name": gr.name + ""
                    };
                    profile.push(gr.name + "");
                }
                profile_obj.environment = environment;
                environment_profile_pairs.push(profile_obj);
            }
            specs["environment_profile_pairs"] = environment_profile_pairs;
            var final_profile = [];
            body["spec"] = specs;
            this.appUtil = new Nutanix_Calm_Utils();
            logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment Request Body:" + JSON.stringify(body));

            var response = this.appUtil.makeCalmApiCall('POST', '/' + api_info + '/' + blueprint + "/patch_with_environment/validate", JSON.stringify(body));

            logger.info("Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment Response Body:" + JSON.stringify(response.getBody()) + response.getStatusCode());

            if (response.getStatusCode() + '' == "200" || response.getStatusCode() + '' == "201") {
                response = JSON.parse(response.getBody());
                var environment_profile_pair = response.status.environment_profile_pairs;
                for (var i = 0; i &lt; environment_profile_pair.length; i++) {
                    var name = environment_profile_pair[i].app_profile.name + "";
                    var state = environment_profile_pair[i].state;
                    if (profile.indexOf(name) != -1) {
                        if (state == "valid") {
                            final_profile.push(name);
                        }
                    }
                }
            } else {
                logger.info("error in Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment");
            }
            return JSON.stringify(final_profile);


        } catch (e) {
            logger.error("error in Nutanix_ClientServerScriptBridge.fetchProfilesBasisOnEnvironment" + e);
        }

    },
    fetchEnvironments: function() {
        var cat_sys_id = this.getParameter("sysparm_cat_sys_id");
        var project_id = this.getParameter("sysparm_project_id");
        var project_sys_id = "";
        var get_project_sys_id = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
        get_project_sys_id.addQuery('uuid', project_id);
        get_project_sys_id.query();
        if (get_project_sys_id.next()) {
            project_sys_id = get_project_sys_id.sys_id;
        }
        var env = "";
        var runtime_config = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        runtime_config.addQuery('item_name', cat_sys_id);
        runtime_config.query();
        if (runtime_config.next()) {
            env = runtime_config.environments;
        }
        var arr = [];
        if (env != "") {
            env = env.split(',');
            for (var i in env) {
                var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
                gr.addQuery("sys_id", env[i]);
                gr.addQuery("project", project_sys_id);
                gr.query();
                while (gr.next()) {
                    var obj = {};
                    obj["Name"] = (gr.name + "");
                    obj["UUID"] = (gr.uuid + "");
                    arr.push(obj);
                }
            }
            return (JSON.stringify(arr));
        } else {
            var env_associated_to_project = [];
            var project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
            project.addQuery("sys_id", project_sys_id);
            project.query();
            if (project.next()) {
                env_associated_to_project = project.environment_uuid + '';
            }
            env_associated_to_project = env_associated_to_project.split(',');
            for (var i in env_associated_to_project) {
                var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
                gr.addQuery("uuid", env_associated_to_project[i]);
                gr.addQuery("project", project_sys_id);
                gr.query();
                while (gr.next()) {
                    var obj = {};
                    obj["Name"] = (gr.name + "");
                    obj["UUID"] = (gr.uuid + "");
                    arr.push(obj);
                }
            }
            return (JSON.stringify(arr));
        }
    },
    copyMpiPatching: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            var project = this.getParameter('sysparm_project');
            var blueprint = this.getParameter('sysparm_blueprint');
            if ((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2"))) {
                logger.debug("Inside Nutanix_ClientServerScriptBridge.mpiPatching.");


                var profile = (this.getParameter('sysparm_profile'));
                // 			var profile_name ='';
                // 			var profileGr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                // 			if(profileGr.get(profile[0])){
                // 				 profile_name = profileGr.name+'';
                // 			}
                var configureScript = new Nutanix_FetchConfigureSettingDropdown();
                return configureScript.copyMpiPatching(project, blueprint, profile, this.getParameter("sysparm_env_prof_pairs"));
            } else {
                var configureScript = new Nutanix_FetchConfigureSettingDropdown();
                return configureScript.mpiPatching(project, blueprint);
            }


        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.mpiPatching. Error:- " + e);
        }
    },
    variableArrayParser_client_script: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.variableArrayParser");

            var type = this.getParameter('sysparm_type');
            var parent_uuid = this.getParameter('sysparm_parentUuid');
            var var_array = this.getParameter('sysparm_varJson');

            var configureScript = new Nutanix_FetchConfigureSettingDropdown();
            return configureScript.variableArrayParser_client_script(type, parent_uuid, var_array);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variableArrayParser. Error:- " + e);
        }
    },
    getPortalCompatibility: function() {

        var select_portal = gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') + '';
        gs.info('select_portal::' + select_portal);
        return select_portal;
    },

    // Service Portal script 
    getFieldDetails: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getFieldDetails.");
            var fieldNames = this.getParameter('fieldNameArray');
            var cat_item_sys_id = this.getParameter('cat_item_sys_id');
            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.getFieldDetails(fieldNames, cat_item_sys_id);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.checkDuplicate. Error:- " + e);
        }

    },
    variable_info: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getFieldDetails.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');
            var fieldNames = this.getParameter('sysparm_fieldNames');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            if (gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') == 'true')
                return portalScript.extraFields(fieldNames, cat_item_sys_id);
            else
                return portalScript.extraFields(fieldNames, cat_item_sys_id, profile);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variable_info. Error:- " + e);
        }
    },
    extraFields: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.getFieldDetails.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');
            var fieldNames = this.getParameter('sysparm_fieldNames');
            var profile = this.getParameter('sysparm_profile');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.extraFields(fieldNames, cat_item_sys_id, profile);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.variable_info. Error:- " + e);
        }
    },
    privateField: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.privateField.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');
            var fieldNames = this.getParameter('sysparm_fieldNames');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.privateField(cat_item_sys_id);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.privateField. Error:- " + e);
        }
    },
    showRuntimeVariable: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.privateField.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.showRuntimeVariable(cat_item_sys_id);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.privateField. Error:- " + e);
        }
    },
    secretVariables: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.secretVariables.");
            var cat_item_sys_id = this.getParameter('sysparm_catSysID');

            var portalScript = new Nutanix_ServicePortalConfiguration();
            return portalScript.secretVariables(cat_item_sys_id);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.secretVariables. Error:- " + e);
        }
    },
    setSubnet: function() {
        try {
            var catalog = this.getParameter('sysparm_catSysID');
            var catNic = JSON.parse(this.getParameter('sysparm_catNicJson'));
            var variable_name = catNic.nic;
            var nic_list = catNic.nicList;
            var ans = '';
            for (var i in variable_name) {
                var variable = new GlideRecord('item_option_new');
                variable.addQuery('cat_item', catalog + '');
                variable.addQuery('name', variable_name[i]);
                variable.query();
                var query = '';
                while (variable.next()) {
                    var column_fields = {};
                    for (var i in nic_list) {
                        for (var key in nic_list[i]) {
                            if (query == '')
                                query = 'uuid=' + key;
                            else
                                query += '^ORuuid=' + key;
                        }
                    }
                    column_fields.reference_qual = query;
                    column_fields.default_value = '';
                    ans = column_fields.reference_qual + '';
                    // var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(variable.sys_id, column_fields, 'update');
                }
            }
            return JSON.stringify(ans);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.setSubnet. Error:- " + e);
        }
    },
    setProfileOnChangeOfEnv: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.setProfileOnChangeOfEnv.");
            var blueprint = this.getParameter('sysparm_blueprint');
            var profileName = this.getParameter('sysparm_profileName');
            return this.getProfile(blueprint, profileName);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.setProfileOnChangeOfEnv. Error:- " + e);
        }
    },
    // 	returnBPType : function() {
    // 		gs.info('bp_uuid:');
    // 		var logger = new Nutanix_Calm_Logger();
    // 		try {
    // 			var BP_uuid = this.getParameter('sysparm_uuid')+'';
    // 			gs.info('bp_uuid: '+BP_uuid);
    // 			var mpi_gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
    // 			mpi_gr.addQuery('uuid' , BP_uuid+'');
    // 			mpi_gr.query();
    // 			if(mpi_gr.next()) {
    // 				gs.info('bp_uuid: '+mpi_gr.getValue('bp_type')+'');
    // 				return mpi_gr.getValue('bp_type')+'';
    // 			}
    // 		} catch (e) {
    // 			logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.returnBPType. Error:- " + e);
    // 		}

    // 	},
    fetchBlueprintType: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchBlueprintType");
            var item_sys_id = this.getParameter('sysparm_item_sys_id');
            var glideTable = new GlideRecord('sc_cat_item_category');
            glideTable.addQuery('sc_cat_item', item_sys_id + '');
            glideTable.query();
            if (glideTable.next()) {
                var category = glideTable.getDisplayValue("sc_category");
                //gs.info("Parth blueprint :" + category);
                return category;
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchBlueprintType. Error:- " + e);
        }
    },
    fetchSelectedEndpointList: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchSelectedEndpointList.");
            var catSysID = this.getParameter('sysparm_catSysID');
            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchSelectedEndpointList(catSysID);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchSelectedEndpointList. Error:- " + e);
        }
    },
    fetchEndpointAssociatedToProject: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchEndpointAssociatedToProject.");
            var projectID = this.getParameter('sysparm_projectID');
            var selected_endpoint = this.getParameter('sysparm_selected_endpoint');
            var configureScript = new Nutanix_CatalogFormScripts();
            return configureScript.fetchEndpointAssociatedToProject(projectID, selected_endpoint);
        } catch (e) {
            logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchEndpointAssociatedToProject. Error:- " + e);
        }
    },
    type: 'Nutanix_ClientServerScriptBridge'
});]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 19:13:04&lt;/sys_created_on&gt;&lt;sys_id&gt;d018c57f37112300fdfc097973990e26&lt;/sys_id&gt;&lt;sys_mod_count&gt;461&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ClientServerScriptBridge&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_d018c57f37112300fdfc097973990e26&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;subuhee.fathima&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-05-15 12:34:48&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1458929934</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>1aab0533c3d4569064971612b4013151</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c311a0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Nutanix_ClientServerScriptBridge</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>06f7d1f31dce8e1057fd0e259f5bcd27</update_guid>
<update_guid_history>06f7d1f31dce8e1057fd0e259f5bcd27:-1458929934,714305f7d44e8e107c2cf5edfd3b55a1:-546216093,6aa1b87b82ca8e104c064fafdfda21db:-96006920,8e10ebd5638d4210cf99dac9c4d62d75:264333025,6a00a719d88d42103e61b7bf6e388c73:1055467146,9322d315434d421026a3a2a696dfe821:264333025,45e7185b52e4b910071fd19916dde48a:1692847885,614de995d9e4b110a6dba69231e8ecd2:440929773,89a98f42caabe5506a3c51a8ed0b8109:-414525748,80990b82c7abe5503e620be8627813c6:1148142189,40f54b35296ba550abfc9bea2534280f:-414525748,5843c10c8c08fd5029de2b926b429988:-2098877072,ba0fbd7fe9672d102179757cc8343a1d:-2054520664,77b550f9e7d36510fb86b2c00c0415e5:-110721720,540358b5a1d365105ad67718a3fcb2dc:-2147141532,b4f0943126d365109914b80977279550:-208043419,39d9f3d6956f6d102e49bbc32e1f743c:2142627308,4386e1d7109be9108ab494606bd98fe9:1148142189,064e700d2a601110798ab57932773dd8:2142627308,ecf4beb473b133002bcf5c564434c862:-79630822,179476b4fdb133000d731b614db85fbf:-1192774096,6ad1f6b4b2b13300d7c8c0ee6ea63cbe:485210149,ba0a6e27928933000a4e2fe32d914015:-2137698367,68e9e227a889330092302a8490680237:146338070,8b0045825aeda11089496977d688121a:2058577144,064e700d2a601110798ab57932773dd8:2142627308,0889a227788933000c5cabc625e76f08:-956749601,8b39e2273f89330032cd047a57299611:-930249815,8aa8eae3a58933003eae4bb76ee97178:-368883869,2b89f221876d61107111009cb658bb2e:2058577144,064e700d2a601110798ab57932773dd8:2142627308,50882ee361893300181f09206ae7b196:224801338,4592d9c087e9e910b05fa3c599c0a08e:2058577144,064e700d2a601110798ab57932773dd8:2142627308,10ab46e2c81011102f21126ff00604d1:-1459214530,00ccf2de73cf811004e4aa7f1a2dec13:-1976575782,c951fa56efcf81102a0c6f265ff013e8:1996568973,b43a2e9ebe8f81102b8d300b57bea332:-238309563,b498bfcd7b160110c79fc656963268ea:-1833374509,ca977fcd13160110c01a9d17a70bc3cf:-1585186037,3ac6f3cd601601109c89e9c69f5630c0:-2007323317,e076ff8da2160110890208bf0a2fe494:2068417259,8d05f3c9a91601101f4c0160e049b0bf:-1585186037,a0f4778560160110b9b82229fb836487:370729665,3ae9ef8575d20110539b84c8c035943f:-695681542,30bf530909520110dce43c672f9c59f9:751004543,fa4695f011394110af905af95f388ab1:434024560,60ae286cebf5011063be727e1b96df68:-838020367,593aac2875f501106099c52663812aec:315244123,8e9328a01af50110e942d2fd2f893fda:1416827363,1b3bc26378d50110904d844911b5400e:1315499074,1967c22f0395011043a4ffcb83348c51:580989486,59e142e16b8101105d1ed8d2623dd1ac:578788455,df7efdedb7410110f7845fdd7ef720fc:-179891258,f6aa6b30100d01109dcc18c6be9c25d4:1607031992,641a2bfc0ec90110c30b57d8b9ee6039:-2128734142,267bb6b857850110892d9d76075d6755:-1749354030,c72bb678a7850110045c23316900a56f:-1262382640,e9ea72b840850110589a5d2a392ac7b2:-2054653949,3cf53e74508501101c5190fcb792c86b:237200441,3248a2b8ff450110a5c72360979eebac:-1219130827,1d554c4d559001103f1c23acb5219b74:375354957,152284f778cc8110bfb3bf135c5eed8d:-1292510419,4a1b3fab164c81100a22133c5a5c138f:-639987239,3f4ce99fcbc80110cc9dc17313345dcc:-498889385,d8e011b076c8011093674097f5470e18:756947894,db809570f0c8011035420abfbd959459:-1493058898,a4109570f8c8011051a5338ff240b953:1397111471,6ea2c5f4a38801104749742b4848f05a:1319318900,64a46534812b7010ee633b5a58a490c9:898571728,37cc0684bee770100c73917781b427fd:-828136452,9bee82f3eddb301078599fdbced01f60:1516659666,8712423b1d9b30104e19243688d26325:-1407643599,62cba1f36f5b30104ca18b3f29e2b326:420324625,3b956573a71b3010ac4a68b05cbd927b:1463361823,27ad463264dbb010306c2c3b6884829a:-1072832412,49ccc2be669bb01059dba5b15dbfd719:1888670229,10abc2fa699bb010e9b107710ea40330:-604389841,0b6ef5720c9bb010a782052451a7356c:1676061330,5dcd3d72559bb010eeb2f3aa2a928e12:-1898586613,b65db572019bb0101c295c4191b96000:-1070155390,1a002522b59b7010270d79672f80c36a:-308621017,32fdf38640973010062ec9a4f40158ab:223362859,176cf2c609533010b2b92247cc67a054:1536491080,95783ac2395330100b46cdc4abebcaff:945986308,37da9bb095212300ab2488cb274b5788:-2142886880,169918b8a9e5230049b34608d4c84d0d:-171081800,bf79aa6c17a12300e8beee32ee6951a0:1145764236,28856ea42ea12300fb5dd7ec6dd873ae:770636087,4f42ee20e4a1230065cb815a5893f72d:-1333210511,84326e604aa12300e7dcf34ddd869739:657952991,6188951cf1e5630036e3aaa71aace676:-1860823237,10159d18a2e563005a96007e408f0c64:688998715,a064911875e56300c9c0f6c4cb20b8bf:231740739,cb231d9490e5630026b0ca34e99b3458:1274530003,6af7ed33a391230086d4e63524af7e22:187149776,1e1e4dffdc1123000c2b58f6673277bc:-755183496,0db19c4d867323003222b8dabdf8421a:13923263,1bb094c166b32300e4a8ed73ca2a4c98:155818461,e288444d0b732300c57f408658f19512:1859269087,d6d70c0d7e7323001ab168acc7c4f448:-2019175556,a897044dcb732300ac1330623d2f15f2:-1430529820,b0d6c00dfb732300eb0f27a6bd27aba2:-878062264,da164809c97323002a55c6be5e53192d:1947595948,0854844902732300a9b82b3b23c9fc64:-6698668,2dd0eb20b9336300d308a45b4821b241:599934240,ba2b4b20d4ff23006f43234222ba0e17:241717613,601f3ee466bf2300083546a7519fa9ff:599934240,0cde3e2872bf2300e78fc6ddbbd69f9b:-784709088,7b2d322814bf2300e23ae2342d7cef38:-2060232275,c91306282d1330101afc3fef7bb7d81a:1819306214,7cb24ee4e713301088a96e39b4715bb4:152308510,56d9346c4713301022ff2614971ea93e:-795440386,cf69f06ce4133010955cee1f8eaf221b:168586718,ef88382c6a133010b866e7036a06a477:1492310678,b7a77ce80a13301062d49897d87db87d:1752310036,61d6b8a8031330109fd3d98c1fc0669b:-1524322616,82b6f4a828133010103b0fa5030118ca:-111154423,efc57828051330105c330753b9d148f7:-21456700,584230e4371330106ca96055ce964d4f:-903538587,6f234cdc96d3b010f52b7146cfa0ac5f:-1699145338,59e248dcb6d3b010a3da9804b3e785c8:-1257374104,5982489c83d3b010c07dd0ccd773c92f:1574920774,0894c9f67cc4bc100c567c80812c550b:2001098178,c36830ba1984bc10a2e89675cdd685cd:625685149,bdcc207e3944bc1055b912004ca727c2:1515882983,dea9e8faf944bc102fcd3b1e682ee004:1956979772,9d19e0ba5044bc10f0eb46660fe47b93:44367547,3c10e8b24744bc104400af6037f3bfdc:-1683341727,db7dd432b844bc10c256b67aa91cf523:159223957,ba7c1cfedb04bc109b18fd915ea367b9:-1404471217,064c5cbd16487810fea4a5d0d1041a08:-2114543901,dc303e217ec8f410afe416bc96f7b8d6:-1236778302,ffa0b46d0180f410ec2379171006ae71:-975717981,8662f65d9844b4108fded3b991fdefdf:-1597550291,9e90bed57a44b4109e6823219f6f726b:1764619231,2ec06d118200b410452175fb89dc741c:777528748,09d92bd01cc4f010c858d6fa0dfb8538:-1597550291,76692bd01ac4f010f29568d608ae035e:1123052255,da19e7d0d5c4f0108b1e2af6a63dbda8:1748350576,dc38679096c4f010de5d33002885e038:-2067220712,b23053907e84f010ba3e475cfe3916c6:1742030629,e12336d074c0f010e28317d64725e4db:404209682,9fc28b008c48b010b5f44da85302373f:2093836496,809abdc4aec0b0109314c438c9445c72:1828814501,b426890f16ed24104eb06bd3707f620d:978129698,1f2012869529a010c9ac335fc0212fa2:1863126050,a195fd71462d601042a70b3ed7505b0c:-1094513268,02d145bd1ee56010187d897cc069d50c:-2049120407,aa95abf573716010a7e6596e0aa51eb8:-1119275197,7133335b1bfc60108b68bcd029c486cd:-1248349667,ad066d6a8b40e01070b9868faf802310:414613121,ce9d7546fe0c60103bb117bb05cd58e8:-900399123,583bcc31cb482010cb51f10585932351:-253188850,d8bbfa5857a81410885fe2702decad69:-222451069,6d3836586fa81410b64135110f07845a:1426417438,7f4ea61008a814105bb0623112681f34:-1697781262,c3f8640287c3301078418d037ea8f162:-1092755655,54f8640243c33010527b9019dc67afe5:-1829005818,89c660cefc833010e1efdf4f630b86ca:-1092755655,2003108202833010a13f0736f9b93abc:1135659335,e0b6b7b1a44330101cd6ea4a1685a6b2:-1440492486,7c9092d1a507301057f5dd4febc0eda4:-529136509,a83bc2ddb5c33010e14f7eb6cbc8c7c0:1439796642,5df98ed908c33010b7b6888e8db06f11:683019751,8a3dd11db70330109778b7e8296d57da:2041827043,1c6abb49833ef0104a69e875420b0ea1:-128360622,6a0fc6f0b17ab010ef629262282e9eec:-2031035664,ab78f1f898f6b010aa9ed1e1cd4c5033:417706137,2b47fd38b4f6b01034dc3b6cb689ac04:-1697339900,f3556df09236b0104490e62052796700:1108865416,42a1457c5b72b0103db71e88c8c34ee5:1978458313,ea190c6c0db270106c61fb69bbb7535e:2100506055,df17cc2cacb27010eb0ca685685febc3:1646021288,e5d6406c9cb270109db49da6afec21a0:1942332308,6c144ce4a0b27010ef404d5972f6b648:2122852277,d235bf14f6727010974d5bf124542fbc:-1481649901,9d57acd0f33a30109f5694310b3b2aac:-735139069,bcb6ec502a3a3010b4963bf16fddbbf4:-469637787,96d2785c50fa3010f8483df041c01852:609175144,bc21ec5ca0ba30105acec1d1eeb28b80:2078112843,155f141c6cba301022a4b93f0928aade:257341964,279d1c98deba30105c91dd6285c70c2a:-540670285,c9aa5c184fba301093cb5a24f9e6d9ee:-741020604,e5be0cd82f7a3010ba9030d60bbf9b0e:609175144,af9e0cd8b07a30107c152560617d9607:1204665161,fcfac0dc473a3010c871b8ffd6f9c6a5:609175144,b467bb88f13a301092764e50d53fe404:-999583335,3047fb48123a3010a32607330908995a:1810696679,868077043d3a3010d95b72a42515e59c:1571743639,ea0fe304523a301029fb235fe50b4283:1386541866,8f67ea6e5b667010caa0eff34a3bb90a:-337004886,6e3bb09a9566301010e431a958401cc0:-1432732839,4bca7c5a1266301040e158f4a4c6aeb5:-1693472824,6f3f2812f866301081c4f4e04cbffac7:-1961699686,986b951ef162f010afedd87295f3d9e2:-1657651647,1ce08056efa6701055317a038cb1bb1c:-753912480,ae60081681a6701076035be5ba58bc64:879956044,71abbfce9b667010b329925ad4fa5492:-753912480,6a30848e67e6301023d7bad6fccd21e6:1357902510,7fbf77753ae63010b05c2f4443b39d90:-106127666,73f68fb1f4a23010f17a74b39347d71b:-1192838577,e9ed98b06aeab010f2d376a5e7eb26fc:-1741289099,5c9494b8caaab010ae336c27ef2bd174:-1428858726,28f3d4f8f1aab0102d5e3a0124905961:1597372647,289294f4d6aab0104831b045a34de61a:-1885965673,96f800b066aab010120ba4edbefbb3fc:-1306340945,0696ccfc6f6ab010a2a60ac42dce78e4:909551955,86e440bc5e6ab010289c2d05bb2cb257:1831386267,4544047c096ab01010cf810c2053fe49:1955700795,c8b000b8ed6ab010efede6eab0700130:196342581,779cbf64fd6ab010a74daaf66847ffa8:-909264573,3b642fa02d2ab0108ae5ed00143eb5b8:831465539,2a616320702ab0108f9e0c1bfd1c4cb8:908832395,902f17ac8be6b0100a1f98d3e5cb96fd:2103617842,038e9b2c46e6b01068f6f77a305d048d:820341603,f6ed1f2cc2e6b01084ea258c460b73b8:-1053660763,7e5d932c5ae6b010787b6c4aa041d448:1503083912,26ec97e897e6b01042e89a51b778e5d4:-1680039937,bd3cd3e8c7e6b010e80acaec246282e2:1479628443,82cbdfa84ce6b010f30194b0c5a6e234:140831669,503b13683fe6b0105021760502891cd5:1218422012,e59a936807e6b010b83a28e09539d521:-1970176606,cde95fa440e6b0100164bc0822dfc39b:291405238,746857a4a1e6b0101e86b44fe9ce8c21:-1096180481,74465be01be6b01073ac123499fccfa7:-1149117798,bff8e6a010a2b010897dd03102d5be3e:1760433912,dd18ea9438a67010a00df00b35d28726:-1113892285,ca47a65400a67010e0b51002a31c211e:-1731812242,aa15a2d0b6a670100f9491b5a511b512:-1113892285,20e32690eda67010a913129c55013a25:-259256387,34c2aa500da67010b7fcf88369f0697e:-1088867964,1e8dda1c3e667010164612216b065794:182193132,22d06448c4a23010c9de5c082b10b1dd:1629177159,41ffecb9efd67010d36d08dafaea7124:-189964459,85c17e9d42123010a702912556fbb28a:-515308416,6f11b29df9123010bd55eb13a540cbd6:943193310,04df6a1d91123010f31c210dcbe1d0c4:1347981817,280fead99e12301051874ee9acfb8f52:1846283563,c54c2a59da12301003d6ec47002900e1:697707316,d52aee19c4123010fa7f37cd8abe7df7:744489361,e6dd0af77ec630109b3e8b7ccdc1f655:1972066715,51cda01f3d023010d0f6f7975544d30a:755052498,e9ec549fca86301030fc8d6bc62fefcb:-1601505590,fc6e51c02e4eb01081816303f4f5b35f:-485817654,484b1980704eb010025502f0b4f24a3f:-637446528,13a99d00214eb010727d05313d0a6bee:-926565806,aee89d00f14eb0104df7b563da17512d:1199763336,692795cc6f0eb01076603aea12530d16:-722640811,1116194ca50eb010760323cb1768b046:1445202241,9ec49588580eb0104515280f28bc3396:-676278436,c6f3d50c5f0eb010d46475a5d0bdd237:-428046086,5e8351c8320eb0109b98e8c14a767545:-676278436,fabd81c4280eb0107eb88f8bcca6abc1:92481272,a21d4184420eb010312b3f25f564ca0d:1641588777,740ef813c071301040b9d5a19c2a5778:965154148,8919385b02313010e6617960568b74b0:-656242568,043cb8bcf33530101795902dd431130e:-37125417,6a41a83c20f13010d4390b25d4362f45:1882565586,04d66a826b8970d037a50e2af53e4f63:-263418346,287f4daf52fc38904c0ce58bd8d6db31:-1972492267,fd8f55df60ec3450be9e0670b17dea6f:-1089784280,cb657d4f83203450a39ecbbebfb6545d:1855889029,39ffa50fbe2034500183a69cfc9f3d38:675865780,eb4fad4bdc203450d32ab066b8f414d6:-145320,ca9e40cbb0e8b050a91c6bb870133aa1:-1564505109,819880cb4fe8b0506a36ab3d03a45012:-980227924,0808cc8bbfe8b05058f8be3935c6e21e:-107280755,b354c4c793e8b050261674f2e7436b06:-1280030095,82d7fb7e03a8b05061b7a8d7ddcccb1e:971006014,75bb2c768160b050337d0be2e0336346:-416246454,663be8769a60b0509265658265e2d29f:-631126268,21a4043667ec7050ec9cbcd0614357ac:971006014,70b24cb203ec7050273cb5d21912cfaf:2087361470,7e7e23a6cf2c7050289d86599b32489b:-58143771,63ebabe22f2c70504e57051d3f220424:1926235155,4dce176a3ce8705049ec9e5f440516f6:117118160,0a8c5be6d0e87050b2a476fc1b889060:764453364,8f8bd7a205e8705077e16fc1506a1922:246420286,d32b97e28ee87050f693c441d90267c8:1553923556,9267f21246ac305003d78f2f77450677:1926235155,a6fe72525d15301094c70dc3494bd55c:-464631680,dbdcbe5e87d130106000776b7b230013:-1226051487,ae5cf69ebfd13010b8b1d1be23880752:-1992266383,2a79beda97d13010c7ff92236c222007:-873113727,8948be1a4ed1301041eafa1536ac041d:-103414810,2fa9391eff11301033caf61da0da799e:-894058496,95a839dae51130108764f203389908b6:2054890175,737335967f1130108971cafcb57e2b44:-894058496,56c23d56ce113010d502ac04adfe74e1:1633662140,5c72b5160c113010084336b761ce4756:643345150,d068c28aa8d530101db948af7ba8239a:-23925033,4b6ac60887d53010d667ab54e1e40a96:1496936310,692e38a7cd09b410a4c27ea2d40c3de0:758876471,6316b3934345b4105b52e021b3d1ef2d:1145551830,e1acf69f4b41b4103bc2faadeb69c5aa:-1218594379,cb44f10ee08d70101e6b9bc11086b740:1937060360,5bb179862c8d7010de1f28345a1ad954:886223797,0b653af957857010e1340cd33a0c7f07:139813638,5504e7fc67cfe410908e53ec7671373b:1052121482,faf3a7fc0fcfe410fb68e9375f530646:-1572742019,424d66fcbf0fe410461804059ea9b613:1275560152,93d990b4a087e410333a6301e0fce64b:-1053060227,8e89d8740487e410e75a976860acdd1a:1352115786,53c79834a087e4104562b63e9d3b54d1:75220655,c4c61cb0a187e4100e282756ec930771:-532925700,28773f2862c3e410db7742d5f68b0d27:-38544222,a6ecc7641d43e4100c4cfea8b606a5b0:-704917293,522b4720d543e4107bf2ad9dbf5f18e3:1761178894,7df44ad05543a410d97f9cf28b7ce1c4:-671711741,8d8f7910ed43a410371c600297fdd3ef:640932867,542e319c7003a4106e1ecd7d2e2ce8b6:413881848,9c21b114bf03a410066f73f0e0348cb1:-1975784582,f18da98cc4cbe010a2aeaba055114e2e:-1182076052,c3d79dcc8d4be010f518a27f02b38c22:286628835,c65ef52b6f7e6010569c1d2595e62017:1574671229,671284c95395649021e9bf86ae95c6a2:-1798525142,96f7c04f2dc1ec50fc3a3363b63e67ed:-924820790,ee5b0e9271492c500f2ff7042b3798eb:-1072175383,43f7cad242492c507a50cf363869e76b:158209914,544e3b869c812c5049e311e5e78771c5:880644709,ea3b3b06c1812c50c17446a439ecee80:543152726,16b3fb8a0b412c50c6b9c8333d70289c:799518062,23c768c2df41e850105d13d6636dad71:1273575756,6644e80e3201e850241dda3c6626b030:1893419777,a872a40ed901e8505bccf5e575fdc2fe:124208414,fec95846ae01e8506bbc7be81e34d8f4:-1259745400,0ba8900adbcda850a5421575ae395dca:-1411773714,479550863ccda850b4ba436bacf50854:495795212,3bd048c69a8da850bd3c51cf2e80fae9:2127393807,51cb3f71348da850d38e606e29c29d8e:960917161,553ab771618da85013a673b586cf1aaf:1691952765,5c79f731fa8da850c751e360ac5a457a:546903797,7b8877fd144da850dfd5b76b8bba1be5:-1475075701,40567b3dba4da8508faa9532d8f93fea:-2070185505,ffc3bbf9ec4da850bab7e2a06d0d2655:-1186210127,5a723779524da850115e530226b84a21:-1534487010,1a61ff79744da8506413aee9b8c413fe:-776330007,76e866b98189a85052c60df4e09d3703:225862160,0528a2f9fc89a850a011d6d6d973b642:-1653642524,48a923a5a901a8507278819238f09d0a:1107152166,f0e8afa5dc01a85004861d9d2c8ded25:170806457,2b08ef65b501a850815b8a8b099bcdb4:-2007732508,a396e365b301a85076fb5bb21cc1eac4:604286959,321caeed7c4d68502fbe7bc62e60278a:-986715070,ef2baaad944d68500dec54f3cf04dfdd:300070527,bf6a2aad274d6850db439ad45fb558c2:-1303157774,5b79ee2d694d6850acf2b515f99ed9dc:1717411726,a9d8ee2d4b4d685061c0c372939474d4:2042682380,6a57eae9dd4d68500d029c5e05a5aca3:-420916568,b9a66ea9784d6850cae34be1efaa806b:469150966,1c5266e5614d6850aefcdf0a369685d2:-420916568,0f9f1665194d685079511da596dcbadc:-780693086,b4be1a250e4d6850d3e2d17bbfd77e7d:1684617682,324a9a21fe4d6850677892f422253bb1:1004709379,b83cfdfb77bce05069bbbedd0b84aeb6:1202956061,949b3d7f4dbce0501b373fd86ca609bc:-80064605,5d89bdfb65bce0508d30bce0fb6569d2:1329650593,8248f5fb6ebce050555ffefb335dafec:-1404821254,5067f1bbe3bce0506f71c34994c98f2d:-136706052,33467d7bb6bce05014169e39e8b2f93e:1244217713,d83075f3a47ce0500c2cbd975db5e8f2:-136706052,8cbf2dffc63ce05026ac1f6e8803adaf:1949032831,7cb99fb947d4a01025ded59556122db0:1956392330,71786959f29c20100afbad5cf0519894:1749880423,600fdbf54c1ca41014a39381a5569db5:1825285262,0dae74919650641046abe9cc1d934b0a:818346226,e5b9fc9996106410750f9824d39c42cf:-1802695986,01e1f8991c106410f4661de937907bcf:818346226,6b44581520dc241099f5845d41bc253d:-1802695986,04f05c11ffdc2410155ecb261246f57c:818346226,4e390c99999c241036cc8fd5181b9b00:1197657154,4c4740593e9c241005c36088d9c5140e:-652669506,45658c95fb9c24108da15da51d93fcec:1456791420,ce13f455471c20109b52d77a08b63023:1931544952,ce3b738d53582010f38417e9c37e8b45:-343746566,0ed377491958201096074dee92bfd72c:-1889014731,289ea745d45820105735f8d878931067:-752772320,f2bda345b6582010afc35260f6bd0a9b:1931544952,815f5b8589182010f85c7f11e67d4633:896029596,a2959b8d9ed42010547d1078923946e3:1974254498,c3d117c194d42010316e7d239621d3f8:1718431264,1a9b4bc5dc9420108160c0ba16ce1d42:1154873632,158efa4d22542010d706447b6d25f06e:1931544952,1ceac6b0d9dce0106130705a3526bb47:818346226,261e0c011e44a010329ea89750c70bb6:-297495146,f88e8c3ee6279010defe4cb88347daff:-2114596452,d40a40fa0f279010937fd846e9ae02aa:-1072684777,67f7c47ad5279010c1f6061079839670:-1508815645,3a1688f6f12790104a87999160c3551e:-506495686,44917eae4e239010ace87b3881e4b52e:-453292565,9c74216a3c6f50100017cbecab6756ec:1704120742,79b1c59619a3541081ce707d6a8078b9:-757777704,3ef6f7c652af1410037984966db2582b:-1353144863,cc45b3861eaf14105b1407d8790a934e:1691174747,93d0b3c2fcaf14107b0747ec2d9b7728:1994049734,0ccb2b8ecf6f141090370f558d2d9e32:1319516589,80ccf4548fef901004909406734c9e9b:-1419446835,c544a8c89ee3901010c73694e96bd814:-1611725051,2f1b0423b15f945026adc75892cffbcd:-973350525,540bc0ef9d1f9450698d530f74f020d0:1768524489,052dea1e0fdf5410dd3eb285b864e31a:2082993841,80cc7b4aeed754100ae7fba1da99c958:133374141,118cf43988571410f0d775410cbad636:-311151564,647183957f97d010de0799a0c9c09353:-1464483874,59fd7e914197d010b9c80246b5381591:505985574,9ef53e1d3457d010745e68050a3a361b:-1835021188,7e9234787c135c10a29ac76dd12c0c1b:-886866650,443a54a449d31c1026a8889019665367:-972003283,a8f72cf408db5010ce85dd14aed34300:-265393012,94942434e5db501098287674fd1b11ea:390189069,305a0f101b1f10103e76b55d36432238:-803966239,cd37e2273a4b14d00e00c8ea4fc368c8:2083481506,0e49426f4ec714d0599183b88f710c67:-1853716016,0e5206e731c714d0033d11b6f766506f:-1191682670,43b77d2f078714d0c38db37eef69b93b:-1458451042,176e992f934714d07919ef26a5f6c826:-1835565315,ca4959a7b04714d0c7ea4d866703c363:-21776464,373da82b0fc314d056ec0fb088fdef10:-1189115584,2701ee95bc0b9c90334b8a3e82595306:-21776464,a9406e954a0b9c90ee9d9fa6b60c8f99:-487855012,c03f52950e0b9c90cbc28f1913741e43:-2002468985,8bfd9255e80b9c90c66269795ae07b98:-1781373952,51fc1e91a40b9c90cc46074347625f9d:940757277,65ba1e91410b9c9001c6b95a8858465f:430781602,bbff0299b1c79c90c52f4ca2949e3496:1930685275,c7cd136c287a5c5004fbbb5347b2893e:-978672403,1b68ca087bfad85095d4b515071460f9:1412890268,d8020cd7f32a18501542e492c89227b4:-1784815411,5c4ef3c70e2a18505023d691b958d135:1084107214,ad3b7347f92a18509aa3e286a0786cf2:-111277951,509eca4fede21850189cfd7f365949c3:664959234,ee95067ea3e6d450ebddf0996486c44a:1899846916,705ce53eb6a6d450467e419c8b937ace:-752552378,5e5ba9fa7da6d45061474e110d462b9d:-213033077,dff7e57ab8a6d45002fc5c5e962988c4:1416951758,49f68e62fe6e9450993595f852f20a4d:1318241134,db9f851db0229050d0538ad782511dd2:706123116,d888f899a0ee50508293a6650ba4fef6:327350398,93283c9965ee50507449f5431874b406:-1821556684,54c51cd9456e505023eea5b728f8dece:-1966536315,fdf1e964776edc1089104a23e244ead9:1459432044,276fb820f42edc10227a58f6a959e1db:-1629811561,96df1868f4aadc1086ce8de40a40874d:-975929926,c8acd8a43daadc102b0bd772c46503ff:1937685308,6ae654a0aaaadc1029e9c7faea41cdbf:-1094669477,d6bba1d053e2dc10e1ecb17018d740a6:2008385925,397b29d005e2dc10168eac126eaab390:-2100419,2f63615cfca2dc102eb25a7daaaf2a0a:1669130703,a2d22d1cefa2dc1096c21bfeaeb5171e:-840613039,15c1e1d897a2dc107c779fe741c246e8:1386909292,08ceb32dc61e54109ed8c3c85726f0c0:808682612,0332022d149254105dde4f93ab966bf8:1653264036,7e551fdd56da141085e9207e2a9b87ae:1324719197,ea73df1da0da1410b7ebe4e1a9c401bc:544689539,4d6ecfd928da1410d51c2dcc4756c67b:-522283268,67dd4b19bbda14100118806d4251dc56:-668770748,ef0887dd8c9a1410654461fc906f4215:-1490220843,82e8ba154e5a1410f589a1f824fc6aef:423898695,f2ce4ed1da5a1410190b0c8e8e660b4b:-1383971186,1f914e994f1a14104bae255f59bbc4ca:-1770010683,6327b055a956141053d2d8565f66a72c:1653264036,34558405751ad01003b3dfdee4d0df15:-1589461900,788f6f3401d6d0100852af66f704f761:918778182,181eda98761e5010b2c337b2ae57cb3b:1857624514,f0d92e003fde1010c6abde10f5f07e43:1996722411,82a5e984dd1e10107d82d965b18f1eae:-1143426329,223431d89db19010a4222adb0e2b9e67:-786280282,cdde615474b1901046e194a50f5c2c58:-1381902805,665fcd103cbd501055880a66e20c36e5:-20109215,64810b42ef5814109ea4d7cc4b94bfb8:634624677,2414b7413fd340100ab96503ad3b9043:1243306487,f90b4665057e0010f82f440f315e14d6:895557797,7e9a8a25ac7e0010108dbe64c495c61c:-240350596,091b78b66e2a08101d6d7b394bcc3c23:962085174,7ace8a2566f944108f2fbe7b6b4a8f47:-619924775,488d02e110f944100e0c10f37707451d:1436885151,25e698323c26c4102bee78fcb4ad32ef:-489282716,b6d69832c626c410e399918034141070:1489889436,e8fa48f6fde2c4100fdcd326b7c50319:-188913381,f4a7cb39f2da4c90535f3e4b459355d7:1489889436,8027cb3dadda4c90f05ddab210c7dbff:1400837256,d55c4ff0c6de8890dd45017934b5a404:98391846,845817a6df86c0904d3fc8f65e7e68b2:-1490974487,dd3e0bd12ececc506edc475b09c5a304:234685501,0d6d0391a7cecc505d9ec6630f0b9bbf:-187821833,e99b275b75d10010d9ac45e21dde275f:-773442937,737e74ee38dd4c100a3e164153202439:-773442937,4d8cc49d4d3b3300642ae47270967437:-196710761,66d1b049bf673300a2a00b6ac7858c8f:-606098479,f8ff1ef87ea33300a621c627b365b32a:-23074358,29cf8630f5a333004ebcedf484ef7da7:160107851,226745c109df3300058004ef4329662a:1287672369,4f1bceb73f723300fa88fd5f6fb3009b:1350944049,394b9eb2b5323300623f55faa66c4c4b:164513330,71995e32ea323300f11b8f37500d71f6:2003884812,a285315819b23300cc8d214fbbea6a85:1057742611,04a9a1506bb23300d1b4f99cd9f9aebc:-341199199,cf7e3d219ed2330016dbf489fd36512a:364011551,26daf3d0115b3300d7df0a1b6b499550:2100539652,c4b62a8e45833300c16c80827a0bddb5:-2106673940</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_subnet_vpc_reference_uuid</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="vpc_reference_uuid" table="x_nuta2_nutanix_ca_subnet"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;VPC Reference UUID&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;vpc_reference_uuid&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;formula/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value="String"&gt;string&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;250&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_subnet&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;users.midserver&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-05-03 06:53:58&lt;/sys_created_on&gt;&lt;sys_id&gt;fab6d637933d4a5090acfa497bba105e&lt;/sys_id&gt;&lt;sys_name&gt;VPC Reference UUID&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_subnet_vpc_reference_uuid&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-05-03 06:53:58&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;virtual_type&gt;script&lt;/virtual_type&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>1013656067</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>1aab4133c3d4569064971612b4013122</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30e70000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_subnet</table>
<target_name>Subnet.VPC Reference UUID</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>d0e69a37da3d4a5010da9ce2908afa86</update_guid>
<update_guid_history>d0e69a37da3d4a5010da9ce2908afa86:1013656067</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_properties_759ca3b74f03230039f0aa95d310c741</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>Describes the version of the plugin</description><ignore_cache>true</ignore_cache><is_private>false</is_private><name>x_nuta2_nutanix_ca.plugin_version</name><read_roles>x_nuta2_nutanix_ca.calm_admin</read_roles><suffix>plugin_version</suffix><sys_class_name>sys_properties</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2019-01-24 06:37:30</sys_created_on><sys_id>759ca3b74f03230039f0aa95d310c741</sys_id><sys_mod_count>13</sys_mod_count><sys_name>x_nuta2_nutanix_ca.plugin_version</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_properties_759ca3b74f03230039f0aa95d310c741</sys_update_name><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-07-23 11:09:58</sys_updated_on><type>string</type><value>v1.7.0</value><write_roles>x_nuta2_nutanix_ca.calm_admin</write_roles></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=759ca3b74f03230039f0aa95d310c741"/></record_update>]]></payload>
<payload_hash>624131741</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>1eab0533c3d4569064971612b401314d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c31cf0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.plugin_version</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>f33a1c8e472fc254c01d4c4d02e97b9a</update_guid>
<update_guid_history>f33a1c8e472fc254c01d4c4d02e97b9a:624131741,f33a1c8e472fc254c01d4c4d02e97b9a:624131741,ff641d5a78120e5011fb62286c64e85b:1601947103,11e8165460d23510f4671039df77532e:869665373,47612789115201106da4868e7f28cab1:-1322615194,fadf744261eda1100b228df2a333dcad:1296507610,47612789115201106da4868e7f28cab1:-1322615194,c779faed5c2d6110f42575e28625712f:1296507610,47612789115201106da4868e7f28cab1:-1322615194,b23251407ee9e91074f4ae15bf73c727:1296507610,47612789115201106da4868e7f28cab1:-1322615194,5d47a807443001102bec031a872cfd9b:-1679292093,be229cec70680110ea06694bc010c41e:-726090460,acb366bd33423010b85d71e9009d51a9:-369413561,2292dd62a5c530105ede436dfd519f3c:1309389577,409bdefeea10301097d43a9bdcf91be3:-1800367625,dd3caf7e6311b0102ec2f7d507e84365:-173415120,8857012430ee20106190325d7baa5df8:-688935569,a96f6cb28c8d6c502728c4ae920935ae:-1204456018,c149d464e6421010e280973d501c483f:-888257623,9bc615bf8ac7c4109e5a37d3324a9104:-1919298521,649406bb57f63300873c652de645531e:1860148326,bb2875073ad13300871a245858095eca:1344627877,241d63b79e0323009f84301037d2ec15:1860148326</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_a2e91eb5db81230084249235ca9619eb</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ImportProjects&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ImportProjects&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ImportProjects = Class.create();
Nutanix_ImportProjects.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.subnetpageBreaker = 100;
        this.pageBreaker = 20;
        this.activeProject = [];
    },
    //new Nutanix_ImportProjects().startImportProjects()
    _deactivateDeletedProject: function() {
        try {
            this.logger.debug("Inside Nutanix_Importproject._deactivateDeletedProject");

            //var activeProjectQuery = 'state=COMPLETE';
            var activeProjectQuery = "";

            for (var i in this.activeProject) {
                activeProjectQuery += '^uuid!=' + this.activeProject[i];
            }
            var inactiveProjectSysID = [];

            var project = new GlideRecord(this.appUtil.configuration.table.Project + "");
            project.addEncodedQuery(activeProjectQuery);
            project.query();

            while (project.next()) {
                project.state = 'INACTIVE';
                inactiveProjectSysID.push(project.update());
                this._markEnviornmentsAsInactiveByProjectSysId(project.sys_id);
            }
            this.logger.debug("Nutanix_Importproject._deactivateDeletedProject Deactivated: " + inactiveProjectSysID.length + " " + JSON.stringify(inactiveProjectSysID) + " Projects.");
            // 			inactiveProjectSysID.forEach(this._markEnviornmentsAsInactiveByProjectSysId);
            var inactiveCatItems = [];

            //             var catGr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            //             catGr.addEncodedQuery('state!=inactive^state!=deleted^multiple_projectsIN' + inactiveProjectSysID.toString());
            //             catGr.query();

            //             while (catGr.next()) {

            //                 inactiveCatItems.push(catGr.item_name.name);

            //                 catGr.state = 'inactive';
            //                 catGr.update();
            // 				this.logger.debug("Nutanix_Importproject._deactivateDeletedProject Deactivated catalog item "+catGr.item_name.name+" Logic, associated project mark as inactive.");
            //             }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ImportBlueprints._deactivateDeletedBPandcatalogs. Error :- " + JSON.stringify(e));
        }
    },

    _markEnviornmentsAsInactiveByProjectSysId: function(projectSysId) {
        try {
            if (!projectSysId) {
                this.logger.error('Nutanix_ImportProject._markEnviornmentsAsInactiveByProjectSysId Received an empty projectSysId: ' + projectSysId);
                return;
            }
            var envRecords = new GlideRecord(this.appUtil.configuration.table.environment);
            envRecords.addQuery('state', 'ACTIVE');
            envRecords.addQuery('project', projectSysId);

            envRecords.setValue('state', 'INACTIVE');
            var updatedRecords = envRecords.updateMultiple();
            this.logger.debug('Nutanix_ImportProject._markEnviornmentsAsInactiveByProjectSysId Marking these enviornments as inactive : ' + updatedRecords.join(','));
            return updatedRecords;

        } catch (error) {
            this.logger.error('Exception caught inside Nutanix_ImportBlueprints.markEnviornmentsByProject');
        }
    },

    _multiPCSubnet: function(accounts) {
        try {
            this.logger.debug("Inside Nutanix_ImportProjects._multiPCSubnet");
            for (var account in accounts) {
                var body = {
                    "entity_type": "virtual_network",
                    "group_member_attributes": [{
                            "attribute": "name"
                        },
                        {
                            "attribute": "cluster_uuid"
                        },
                        {
                            "attribute": "cluster_name"
                        },
                        {
                            "attribute": "vlan_id"
                        }
                    ],
                    "filter_criteria": "account_uuid==" + accounts[account],
                    "group_member_offset": 0,
                    "group_member_count": 1 // only to retrive the total entity count
                };
                // To fetch total page count
                var response = this.appUtil.makeCalmApiCall("POST", "/nutanix/v1/groups/list", this.appUtil.stringify(body));
                var parsed = this.appUtil.parse(response.getBody());
                var records = parsed.total_entity_count;
                var pages = parseInt(records / this.subnetpageBreaker);
                this.logger.debug("Number of Subnets JSON pages " + (pages + 1));
                // iterate through each page
                for (var i = 0; i &lt;= pages; i++) {
                    var body = {
                        "entity_type": "virtual_network",
                        "group_member_attributes": [{
                                "attribute": "name"
                            },
                            {
                                "attribute": "cluster_uuid"
                            },
                            {
                                "attribute": "cluster_name"
                            },
                            {
                                "attribute": "vlan_id"
                            }
                        ],
                        "filter_criteria": "account_uuid==" + accounts[account],
                        "group_member_offset": i * this.subnetpageBreaker, // increment by multiples of subnetpagebreaker
                        "group_member_count": this.subnetpageBreaker
                    };

                    var response = this.appUtil.makeCalmApiCall("POST", "/nutanix/v1/groups/list", this.appUtil.stringify(body));
                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                        var parsedJSON = this.appUtil.parse(response.getBody());
                        var total_entity = parsedJSON.group_results[0].entity_results.length;
                        for (var s = 0; s &lt; total_entity; s++) {
                            var data = parsedJSON.group_results[0].entity_results[s].data;
                            var cluster_uuid = '';
                            var cluster_name = '';
                            var subnetName = '';
                            var subnetUUID = parsedJSON.group_results[0].entity_results[s].entity_id;
                            for (var j in data) {
                                if (data[j].name == 'cluster_uuid') {
                                    // FEAT-15844 - VPC subnets does not have cluster_uuid and cluster_name 
                                    // so the values will be an empty array
                                    if (data[j].values &amp;&amp; data[j].values.length &gt; 0) {
                                        cluster_uuid = data[j].values[0].values[0];
                                    }
                                } else if (data[j].name == 'cluster_name') {
                                    // FEAT-15844 - VPC subnets does not have cluster_uuid and cluster_name 
                                    // so the values will be an empty array
                                    if (data[j].values &amp;&amp; data[j].values.length &gt; 0) {
                                        cluster_name = data[j].values[0].values[0];
                                    }
                                } else if (data[j].name == 'name') {
                                    subnetName = data[j].values[0].values[0];
                                }
                            }
                            this.logger.debug('Nutanix_ImportProjects._multiPCSubnet s++ count ' + s + 'subnetUUID ' + subnetUUID + ' subnetName ' + subnetName + ' cluster_uuid ' + cluster_uuid + ' cluster_name ' + cluster_name);
                            var grSubnet = new GlideRecord(this.appUtil.configuration.table.subnet);
                            grSubnet.addEncodedQuery('uuid=' + subnetUUID);
                            grSubnet.query();
                            if (grSubnet.next()) {
                                grSubnet.name = subnetName;
                                grSubnet.cluster_name = cluster_name;
                                grSubnet.cluster_uuid = cluster_uuid;
                                grSubnet.update();
                            } else {
                                grSubnet.initialize();
                                grSubnet.name = subnetName;
                                grSubnet.uuid = subnetUUID;
                                grSubnet.cluster_name = cluster_name;
                                grSubnet.cluster_uuid = cluster_uuid;
                                grSubnet.insert();
                            }
                        }
                    }
                }


            }
        } catch (e) {
            this.logger.debug("Nutanix_ImportProjects._multiPCSubnet :- Exception caught during retrieval of projects. Error: " + JSON.stringify(e));
        }
    },
    //new Nutanix_ImportProjects().startImportProjects()
    startImportProjects: function() {
        try {
            this.logger.debug("Inside Nutanix_ImportProjects.startImportProjects");
            var body = {
                "kind": "project",
                "offset": 0,
                "length": 1
            };
            var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.getProjectList + "", this.appUtil.stringify(body));
            if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                this.logger.info("Connection established to " + this.appUtil.configuration.api.getProjectList);
                var parsed = this.appUtil.parse(response.getBody());
                var records = parsed.metadata.total_matches;
                var pages = parseInt(records / this.pageBreaker);
                this.logger.debug("Number of Project JSON pages " + (pages + 1));
                for (var i = 0, k = 0; i &lt;= pages; i++, k += 19) {
                    body = {
                        "kind": "project",
                        "offset": i + k,
                        "length": this.pageBreaker
                    };
                    this.logger.debug("Call number to importProjectData:" + (i + 1));
                    //this.appUtil.insertIntoQueue("importProjectData", "POST", this.appUtil.stringify(body), this.appUtil.configuration.api.getProjectList+"", 'Import project data', 'This process invokes the import of project data.');
                    var answer = {
                        "method": "POST",
                        "parameter": this.appUtil.stringify(body),
                        "payload": this.appUtil.configuration.api.getProjectList + ""
                    };
                    this.importProjectData(answer);
                }
                this.logger.info("Completed importing and processing of Projects.");
                this._deactivateDeletedProject();
            } else {
                this.logger.debug("Nutanix_ImportProjects.startImportProjects :- Connection to projects/list not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
            }
        } catch (e) {
            this.logger.debug("Nutanix_ImportProjects.startImportProjects :- Exception caught during retrieval of projects. Error: " + e);
            this.logger.error("Exception caught during retrieval of projects. Error: " + e);
        }
    },

    importProjectData: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ImportProjects.importProjectData");
            var response = this.appUtil.makeCalmApiCall(current.method + '', current.payload + '', current.parameter + '');
            if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                var parsedJSON = this.appUtil.parse(response.getBody());
                var jsonEntity = this.appUtil.calculatePriceForInventory(response.getBody(), "projects");

                if (jsonEntity)
                    jsonEntity = JSON.parse(jsonEntity);

                var entities = parsedJSON.entities;
                this.logger.info("Number of imported Project:" + entities.length);
                for (var i = 0; i &lt; entities.length; i++) {
                    var entity = entities[i];
                    var metadata = entity.metadata;
                    var uuid = metadata.uuid;
                    if (jsonEntity)
                        entity["cost"] = parseInt(jsonEntity[uuid]);
                    else
                        entity["cost"] = "-";
                    this.activeProject.push(uuid + '');
                    this.appUtil.insertIntoQueue("processImportProjectData", "", '', this.appUtil.stringify(entity), 'Process project data', 'This job processes the imported project data.');
                }
            } else {
                this.logger.debug("Nutanix_ImportProjects.importProjectData :- Connection projects/list not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
            }
        } catch (e) {
            this.logger.debug("Nutanix_ImportProjects.importProjectData :- Exception caught during retrieval of projects. Error:- " + e);
            this.logger.error("Exception caught during retrieval of projects. Error :- " + e);
        }
    },

    processImportProjectData: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ImportProjects.processImportProjectData");
            var accounts = [];
            var insertData = new GlideRecord(this.appUtil.configuration.table.stagingProject + "");
            var entity = this.appUtil.parse(current.payload);
            var status = entity.status;
            var resource = entity.status.resources;
            var metadata = entity.metadata;
            var spec_resources = entity.spec.resources;
            insertData.initialize();
            var field;
            //To insert status data
            for (var key in status) {
                field = status[key];
                if (key != 'resources')
                    insertData[key] = (field.constructor === Object || field.constructor === Array) ? JSON.stringify(field) : field + '';
            }
            //To insert resources data
            for (var key in resource) {
                field = resource[key];
                insertData[key] = (field.constructor === Object || field.constructor === Array) ? JSON.stringify(field) : field + '';
                if (key + '' == 'account_reference_list') {
                    for (var i in field) {
                        accounts.push(field[i].uuid);
                    }
                }
            }
            // this._multiPCSubnet(accounts);
            //To insert metadata
            for (var key in metadata) {
                field = metadata[key];
                insertData[key] = (field.constructor === Object || field.constructor === Array) ? JSON.stringify(field) : field + '';
            }
            //To insert external_network_list
            for (var key in spec_resources) {
                if (key + '' == 'external_network_list') {
                    field = spec_resources[key];
                    insertData[key] = (field.constructor === Object || field.constructor === Array) ? JSON.stringify(field) : field + '';
                }
            }
            if (entity.cost + "" != "-")
                insertData.cost = "$" + entity.cost + "";
            else
                insertData.cost = entity.cost + "";
            insertData.insert();
        } catch (e) {
            this.logger.debug("Nutanix_ImportProjects.processImportProjectData :- Exception caught during retrieval of projects. Error :- " + e);
            this.logger.error("Exception caught during retrieval of projects. Error :- " + e);
        }
    },
    MapCatItemToProject: function(current) {
        try {
            var rel = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + "");
            rel.addQuery('catalog_item', (current.parameter + "").split(',')[0]);
            rel.deleteMultiple();

            var gr = new GlideRecord(this.appUtil.configuration.table.Project + "");
            gr.addQuery('state', 'COMPLETE');
            var obj = {};
            gr.query();
            while (gr.next()) {
                obj[gr.uuid + ""] = gr.sys_id + "";
            }
            var projectList = JSON.parse(current.payload + '');

            if (projectList.constructor === Object)
                projectList = JSON.parse('[' + current.payload + ']');

            var activeProjectList = [];

            var relGR = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + "");

            for (var i in projectList) {
                var proj = projectList[i];

                // 				if(obj[proj.uuid + ''] == undefined || !obj[proj.uuid + ''] || obj[proj.uuid + ''] == null || typeof obj[proj.uuid + ''] == undefined ){
                // 					this.appUtil.insertIntoQueue("MapCatItemToProject", '', current.parameter+'', current.payload+'', 'Map catalog items to project', 'This job maps the catalog items to their respective projects.');
                // 							return;
                // 				}else{
                relGR.initialize();
                relGR.catalog_item = (current.parameter + "").split(',')[0];
                relGR.version = (current.parameter + "").split(',')[1];
                relGR.projects = obj[proj.uuid + ''] + "";
                relGR.insert();
                // 				}

                activeProjectList.push(obj[proj.uuid + ''] + '');
            }

            var inactiveCatItems = [];
            var queryString = 'state!=inactive^state!=deleted^state!=draft^blueprintIN' + (current.parameter + "").split(',')[0];


            for (var i in activeProjectList)
                queryString = queryString + '^multiple_projects!*' + activeProjectList[i];

            var catGr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            catGr.addEncodedQuery(queryString);
            catGr.query();
            var i = 0;

            while (catGr.next()) {

                inactiveCatItems.push(catGr.item_name.name);

                catGr.state = 'inactive';
                catGr.update();
                i++
            }
            this.logger.info("Deactivated " + i + " catalog items (" + inactiveCatItems.toString() + ") as there Projects got removed.");

            var reactiveCatItems = [];

            var catGr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            catGr.addEncodedQuery('item_name.category=88bfbad237512300fdfc097973990e06^state=inactive^blueprint=' + (current.parameter + "").split(',')[0] + '^multiple_projectsIN' + activeProjectList.toString());
            catGr.query();
            var i = 0;

            while (catGr.next()) {

                reactiveCatItems.push(catGr.item_name.name);

                catGr.state = 'active';
                catGr.update();
                i++;
            }
            this.logger.info("Re-activated " + i + " catalog items (" + reactiveCatItems.toString() + ") as project got re-attached.");
        } catch (e) {
            this.logger.error("Exception caught while mapping Catalog Item to Project. Error :- " + e);
        }
    },

    type: 'Nutanix_ImportProjects'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-10 09:48:23&lt;/sys_created_on&gt;&lt;sys_id&gt;a2e91eb5db81230084249235ca9619eb&lt;/sys_id&gt;&lt;sys_mod_count&gt;263&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ImportProjects&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_a2e91eb5db81230084249235ca9619eb&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-05-20 09:53:10&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-44012160</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>1eab0533c3d4569064971612b4013150</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c312a0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Nutanix_ImportProjects</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>c7e2a6d15592c650f7a4b55b005856d8</update_guid>
<update_guid_history>c7e2a6d15592c650f7a4b55b005856d8:-44012160,7f30ead51a52c65079bb483c33d3a7ea:-640797196,9efe002f050e0e103dd3116ce5acc659:551240340,69631346e2ce4610f8c2b7f1c6b39cf4:1863847394,b3c2d306e1ce4610d3029356ab4e293f:-1655365025,5ff15239434206105279b7cd40f84022:21038173,65ed0ab5d30206104f77310f8d0f6c4a:-278591168,47d94ebd618ec210241518cc039628f7:21038173,ee594679108ec210e052a4cf70144bdf:-1639459388,eee306716a0ec210f031add971d8f143:-1137858570,97b239b5df8ac2109d4491973f73249c:-298519730,cdfcd9b531c6c2104096b6fb49f20662:-1639459388,aa6c9df5a7c6c210cc445b3d9898c6d6:-353413079,7f1928ad570e4210b2628fc5b25f4dda:866651224,77a8f23fc4fd4a502640e888fa045e7e:326856184,619ca6fbf0bd4a500bc687e3ecb3657c:1644578934,855ae63bf3bd4a50eedd9aaefcb4511a:-1224890378,3002eeb3f27d4a50b28a8c51de31c488:-2031536207,d8b0ae77b87d4a50ec617d326835d0f8:-1577303561,e47f9af39b7d4a5043823ecf1569cdf3:-102849205,701e63e80ab94a10ebd677b1ac8ba839:-1345931624,e17d2ba846b94a10251493c6f921a25c:878609014,a03c63a0f3b94a108e3397cf04fb3b56:2086174044,bd973c9879483190150889db745c5b16:326874086,be3dc2ea320031100f1477130adb0efd:894122669,bd973c9879483190150889db745c5b16:326874086,6f77bcd8a84831904f0160671f04e09a:169388136,22f80100ce48fd50ead0c6e30885755c:894122669,364801805e48fd5089dfd09ae9ceaee2:-2128399267,a4f6c9c8a208fd50e81307e2a8a956eb:-1678654669,75cbe34250afe5506fbbde56ac63e34a:-1894135762,c8cba3ce9f6fe55086787c0e75b2f374:-1187965854,ad1974dc762fed102afeee5daa5ff75f:-1894135762,def7749cc92fed10789ce79666bf4d0a:-661917997,d8d7309cb72fed101e56af6436f44662:-1383977495,3927709ce92fed10e73d439606d57fdf:-344910096,85e5f098352fed105949fda93c9dcff4:905136272,816578d8582fed10c1308e181fd6694e:-992740730,a535b4d8542fed10656e88e20dc9d5ae:-915632723,b434b858e62fed108dd1ade9aded0f90:1682984760,4082f4d4452fed10dd31ff6d71ff06b1:-1502571362,06ceec90ce2fed10c92be14f43153b11:-1279427767,736da8dce3ebed103bbf1163a31ab6af:-1419303474,fd5c2450e62fed107e5d8328fd59515e:-1804547617,30fe0c84796bad1042d21c9d9ce52075:-1938180397,e7f44c88102bad1044877a02e8896b32:530743812,c954c0484a2bad1080c12fc471304e9a:143000966,062ba7375f57ad10f461eb5561883fcf:-417263179,2179afffd317ad10384c9915396b2309:-2128399267,db782377f017ad106f8ac55ff0a6df04:1211314995,42dc17b73f93ad10be130d1037d757be:-457365923,f05e3c4cb1803110b6ca63197f4bf1e3:-2128399267,47e3dd9bba5b6d10841527384f92a896:1804378374,023c984cf0003110cee7a6798d065e57:-2128399267,47e3dd9bba5b6d10841527384f92a896:1804378374,8dd36bd3f34321102f467248ef02f6e0:1135603655,5d55d9140dc53010b772c1f5e8f95253:-2128399267,6dffbc425deda110cc7eb16878dfd5d5:2142632041,5d55d9140dc53010b772c1f5e8f95253:-2128399267,0b89b221c66d61103b4ab25a85e1df34:2142632041,5d55d9140dc53010b772c1f5e8f95253:-2128399267,ef7211c030e9e910f03dcf38d852cfe6:2142632041,5d55d9140dc53010b772c1f5e8f95253:-2128399267,2e660bfa4fb030102d919132ce63e15f:1924967764,64350bfa07b03010fdba37d45ed0602c:-1434550545,d7d483bad0b03010ce028fd3f854754a:743996175,c085363afe7030109c71598a864723ce:-1670597955,cb61b6f662703010c5d8d07a6baef8e3:1665497625,3687518278b47010de2476b90a34ce49:-1084814036,ada6ddcaa9747010212bcc02db633a44:-2038925123,429155c6f1747010c178f751956db5e6:-841533097,1bcb050684747010bc8bb85abbc5817f:1707995204,9b41010a62347010402517af54009038:1631407484,20b00d4ac4347010ef143ee2bd96d03a:-111543986,626ff379d8707010542da4c15ef73784:1631407484,35ecff35a8707010d6df807b0f2b9ef1:-78086361,7f6bb3f12c70701048a12af2880d04c2:1013037834,70baf7b52d307010f22eeb4fd19dc6b0:-734252535,22d9f7b5d43070105e6f1d441f37d263:-172671276,7097bb310e707010ab7ed4f91a6dd3e7:-1187956223,e6357fbde73070107d8fef02bef95ef7:1730928938,abde9f79cbfc301031bf561187ba7f82:2133211873,ceede86a6cae6410db68f1882b00c2cc:1076472397,bf776e6d98eb90104fda8681bd964435:1580182603,7106aa6d21eb9010e524e07ff5d7ec05:-1256408892,a142eaa52cab90109c5742aa03da9c5e:1433892329,e200262d4b2b9010853ee813d6619719:280370039,d64cdae95aa79010bd192a9f2198acf2:1433892329,402c8221fbe3901016d8a212f9a36f4f:280370039,875206254d63901061392ec648ebdc34:-192052988,29b031a559af50101d82ef712d33edd0:-201936935,5beb256151af50109b0a557f78db2362:-153962752,e6e5e965956f50105aea597ec08413c4:147746740,77e365ed16eb5010cfde2d134ec7c66d:-628079553,548fd16d25eb50109ff139855793b928:147746740,e4bb11e5d6eb5010e9cd77c600774f9e:-1202114110,a7c595ad17ab5010561ecc82d0c8549e:-811405260,58392955ce635010d658b4be7949f90d:-1176831637,6573a959806b10108e57d63792e92232:136524747,99dd065cca2b14106fcf95e152c522d8:-443428564,452c0e10e8e71410d22c7017c18905fb:669671811,090c069ca7a71410e647800e891c67f0:136524747,9b370e942e6314109a2c5d283ce6cdbb:-443428564,35070e94446314105cf38004ab8999b4:136524747,3e1df15ce367d010e7a059e7d7028191:-436702682,aae925d019e3d01022a9b3506e9425ef:1145942808,896ac310d21f1010ec8d0326b3e7cb81:-916521575,58daa82be0c314d0d1e6300296c94409:-681521543,c7a54ce0887e1c50249032cb96a87fcb:-1157485917,594191404d7ad85085e86bda8aa70902:1020152088,3619632764a698501de9079b128678d5:1568144957,aa93efdb03a65850cf5441302b0ea999:318840682,fb969fd37aa258505051a3e577a2276b:-1858536382,ff8213db1b62585004ae40c1604ee49d:2091860258,5ab90b9b2c225850def694b5b422cb13:-864702430,54a9075b6662585081b336a18ed4bc3a:-1343755644,9d60dd6ad62a9450b0b0da069b192d3c:-677080825,6d3a09aa26a69450ec6baf6de9d17583:-1484210192,37d60d6692a694505ee430521f2b14d5:-1438044120,2069f8ae10e29450ecbf3b2e63746f78:-627236077,e633b4de41665450ea024a2774d630a7:496247507,7cdf6c9aff6654508fa40c0f20766ea9:-677080825,b815cc5aa8ee1450d4e4cff2276a7906:1951648267,306b9a3ff15e1c108c0487647989af9e:-677080825,e8418363c0d21c10c7d083c7e9d61e39:537709263,ff3416e7cfded8108aeb6d8a6632f351:467998189,d293152b93dad810a20a9efb9d2ad898:-886985189,ec5035d77892d81051c506eeba618b5d:-344419425,c0136413c01e9810a31677986dd8c285:1489333394,74d310171bda9810ae5a8938c6d7946c:-2009668933,a97f4c9514dcd45006fa62ab5b401607:-830609621,5d204feb84ffc410ce70c23e1be043f9:1686173448,e0008f6fefffc410d516654b2c3eaf5e:174605224,7c0029576733c410a714cfe7daad7063:123522526,eb1f1557db33c410c772307e49dd6f70:1650366142,30c15d533afb8410929104ac58feecf1:1686173448,f36ee36aab7b04103e6f6b88cd6ebe30:-653508665,6cfd6fa6657b041044aedb2c9d0d6ce8:-104945505,c07d27e6aa7b0410dea79edcbfc66666:-1729623294,2c856f6a123b041036187d2d813af79d:-759749974,c6f3272a023b041028567d9629c1e160:-1164256382,097227a6a63b0410cc361d64b81865b1:1421136484,edd1a3e6a23b041011a7b3bbad8166e3:905934808,cd6127a6113b0410e8adae1a817b1576:-645338272,ac9b0f62547704103ad81efc18ea1e95:-2065596619,88d8cb269ef7041038166b0d84480d38:-1077731431,23e4b6a225b304104e878360f4ebf5fc:-91888171,6bf23eaee2730410c9d420e125621f81:-536957611,70527aee8f730410ca98cb38c267aac9:-1618689029,958132ee517304106d2c3e59b08ec7e5:-546761657,9ee0726e4073041049e942c141135a5a:-783697127,43ffa26ea2730410a46b6ceda3b3e9d4:1305042406,49df226ebf7304100b0d415d06df21f9:-439390770,5abde2ea34730410e0ef36f8114ece03:1132284689,59dc6e6af87304102d57a721df3461b8:124021297,f09c62e6357304101c05c1f2db0b867c:-336431585,ceebaa2a4d7304102d7eb0dbd833b27c:830951367,df8b62e63a730410b68a60fd40d56e00:940152231,4b4aae6612730410e469a78000b9c685:2036286942,07696e628473041042418d0177ea9b0a:-121634699,04192ee2497304108df89b6d813e4ff3:-111538780,5d98e2222b73041000cc137018331601:-492152070,2dc7262e20330410d71699561ce71727:853055178,7267e222527304104a4e275eeab87a0f:2038065505,3027626e1c3304101cf2f60f11827b85:-392436231,07c6626ebe3304103c02a477b11cd859:2014899058,4196662e2e330410605b1c381f7f6b8d:1435618448,56062aaa593304104a1e8373616241a3:-1645536868,45b5e6aa9233041023a0db4b04f12889:535087941,ecc2a2aae23304104948741e70f38203:1195921425,68526e2a29330410827aa5d48206f891:-147719049,83a1eaa6973304107ba9f70bca8d7b96:1990873767,6761aa2a803304100bcab8904a3fb3e2:-547057187,a4b0a66696330410ac9aef0b81e8964c:-807482839,66afd2666d330410c2e447045af0988a:1938147104,5ec7a0aad2fbc010347fd27f8e84dab6:504451516,7eb664aaf9fbc0103df82bfefac9b7fe:642837361,cb76ece611fbc010cc9294805f63d243:-92577671,6206646a34fbc010a9971f6c5042560e:1735944323,8cb5e0a6c4fbc0104518bf04b15c3f17:-799913196,03f4e0a6c0fbc010e11230d44d71a30f:891968509,2094a8a28efbc01020188148d59648d0:-1036820167,6f73682626fbc010aaa3c564f39150ed:-1704147116,7133a8a268fbc0106251b89a39394d97:1613522754,558168a29bfbc0100e087ba380141eba:1794178698,88e0686221fbc0107b57715df0e1a027:-2144086966,0b10686ee6bbc0109c0ab6279f73ac74:525934980,069f9c6e8ebbc01013126a9f2abab6a6:-1725273328,962fd46e8bbbc010e0a594698eb100be:2019135640,f2ee5cea9bbbc0100c5e19bb212e335e:1217581896,24be5c2ef2bbc010ed64b84c4e8b81dd:-1943453595,587ed0ea7bbbc010e2b0220dcdaaee27:-223338233,450e98aa27bbc01085e471f3326e84e9:1101871827,865dd4aafdbbc010e9dee5587665d50f:-981093758,ac1d1c6ae9bbc010641d75ed66824aaa:2094057616,a1ccd86a9dbbc010b005cd5cc990e889:-1919401167,807c1c665ebbc010708d3e77a3d0ab95:-513685619,ba1c9c26cabbc0106eb3b8022a0f633d:-1851823251,bbfb5026c4bbc0103f943246041c2e2f:-502379699,33d71c66d1bbc0102e62ab167ba6d18d:2001874981,eb67d4ee117bc0103cb0cf1aa47a2789:624763287,8f175026b2bbc01095819021fa54080c:1069334681,23c610e2f7bbc0106bfa94a3f6558dd7:-552487751,c0e5dc2252bbc0106aaca2db428efc52:-577404957,e78414eedd7bc010c5a31c91d85f5d1d:1082594806,53a2506ed87bc010203089e6d6d3e64a:-1323821735,6a22586eb17bc01019da4e04f9e0324d:-1520002951,19d194ea0a7bc010da359b1fb8745a09:-1904918345,b291dcaa5f7bc010b7c72cff68ae8f64:882264811,f34014a6877bc01053a589392cd4c5e6:351778937,41af0caae67bc0105d362e189a8fecaf:577250137,ab6e84e69d7bc010d8ec8f85132bc132:-1480146652,f6680c26cc7bc01007e8e64c725a920d:1464229858,ae38c422b37bc010041e34e470b2039d:979785196,37b740e21a7bc010d7f2bd200b066155:1194381775,78050022e07bc0104f0c852bf2d76961:1480162114,70844022387bc0108cae099cd9c2cf28:-420547934,14548c6ea33bc01094ecc6b456c793a5:1747065713,59918c6ec93bc010e5132e7c55c0b5c6:-588090877,ca41002e553bc010c9afea68a0502789:641380830,d311042e4f3bc010986fc029b38b86ab:-397288623,5d800cea113bc0102fbe011068d33b03:126538918,ad5088ea8b3bc0103e776487e0d81574:1037063697,8d204c6a1a3bc010b268b3b8e50dac8f:-1222507471,c1df775a9e3bc0107b2359e637900767:237971304,643fb71ae73bc01039d2e99d0e72150b:-1506022374,76ee7f5a063bc010557e7a93d8989f87:1700000585,5f9eff96303bc0101d4421ca3e56d8a7:-1288352882,e44effd6983bc0101ba3dae2daaafb31:774222144,4f7d33d6ae3bc010da1110948243289d:-148658947,062dff96d53bc0106357437b369ce0f9:-1402563690,65fcff96a43bc010bfa5f6ec1fbece9e:-411762399,aa1c73966e3bc010176cf9ad1a9d6aeb:-776315945,8febbb56d03bc0102b05976a6dd73cbc:1293729507,51ab7352bd3bc010c15190f54441a6b9:491152416,966b7792d13bc010ddf504cecd853037:149225391,81d67f52fc3bc010769df04895984cef:1247024079,3266fb52063bc010e8c60707e0fce9ae:-838812394,3ff57352043bc01071b1d7d25651a74b:-71590759,492577de94f7c0103fb420169ed6e366:49431472,07747f9ec0f7c01007dafbacf2df47af:1885175874,0f54ff1e6ff7c010b4f9527d60c3bb74:311451035,70089d0a1df7801063686665aaae98dc:114272863,99f41ab5bfff4010b7a3eef9146e29c2:1955282679,a493167577ff40105734ffb7900b2d41:-457766388,a30f4e719aff4010638c4b7194304240:-1415778463,55de4e3136ff4010e4f8f3257f63cdad:-440954225,f6eace7d2a7f40100911e4375e9cbf73:1424691122,ef268af9b47f4010aaf7b4318e1e6839:-551988214,2ab5063d987f401065b8577318661010:1816181805,189582b9a87f4010380ddbaecd0bd8a1:807238413,eba442b9ec7f4010da6dfb346f8ecde0:-2018659778,28344e71353f4010d30e6c576f81995e:1160779998,2babd931eb3f401067c8c833a412b086:-604378376,3bfa9dfd61fb4010e762924152b72386:1481663876,b7d719bd47fb401098c493e1ddaff2fb:1869738138,7d179db938fb40101f3fdf9224d8c7fa:2027424185,4c66d53d24fb4010b423c7fdb9e4e334:-1639428489,dfd4153d1ffb4010bf6aa4b6fa034ed1:1302568515,9b54d53908fb401091a11a2afb3268ec:1388115767,3712d1b95afb40107a7f43c1d3077930:-685290889,bda159f53cfb4010fff719ebba75e4ed:-297975177,e930d5397ffb4010f148bc89483568b0:-1348433049,1b9f05f501fb401085ec82a46307375f:1424691122,7e2e8dfd4ebb401027bc6f795d235021:1454932024,e84c85b117fb4010982f015d0b8d64a7:617695709,af04cdbdf5bb4010db3d171689d9385a:-1647352739,bd759fa2f186c09087b511b32bee8448:1424691122,6b5f6b094506cc507bb6c3ca4f2235fd:-402115373,94367d3d3b358450384f423c5c7d6f2c:1207482582,c5a9bd2534b94450847e455c91735efa:-1220426539,d408b1e56db94450cda2f3b14e6f6610:-728323026,c026f96586b94450843903165c206bc5:-1262987551,f094b5adcd794450c245b2388208418f:-2023856932,a04c6d2da67944509d42212f2ec1d6a6:-860055883,48faed2d1f794450bd7bbc8ced701cf7:-546938045,10a56569ed794450e37c50e1201d1a40:-1254816347,d7e3ade5f6794450c5c2147e7f575553:-1998630847,32b3e9e537794450fab90d9a59242d8f:-1860326105,394f1da160794450fd7f69668528a486:2080304208,038e19e137794450a20145a87df89943:-757111088,c4bd1da16379445037836b5ca50ef79b:2131034404,163bd5e554394450268f4136dde505db:-470638960,dc0f85a51e394450555c2f65d27ee906:-1268834373,d5bec1e5213944504bd5b590bd808ef2:-538611591,806e8da53e394450a293cbeb46e9f9c4:-514808307,a25205ad58f5445066f8d65aa78e0c2c:-754129784,b002cd6590f5445038f0cb45f04d0a60:2134494320,3511016d36f544503f3d1baac4feed69:2056282560,629d7c65cff5445056e6a5a520c253d5:1256984095,e07dbce512f544501bff73a846b4a55c:-1956599920,356c7c6504f54450134e37e3660dca24:-37841259,dc4c30e523f5445055c94968730d7b9d:-567814108,431c30e56cf54450c5d20c6324410cdb:538674161,7efb78e522f544507c1c702979a6fd8a:195354885,6c7bb865bff544502b986262361a80b7:524756752,b419763cef3dc050ff103d32017d80b6:-541026768,5fdc6af0d93dc050e32efa02b36b0ad8:808813358,e383ad1719a5cc10c0360d7db32dfddd:-220258518,7853e557b2a5cc109cb8343135e3df05:878994355,66a2ed17b4a5cc109677a7eaf332ee70:-58626109,de51a993fba5cc10934dbbdc97b0aad4:214596896,9c50eddf2f65cc10713c1887a49cc636:1139546729,199f5d1f1b65cc1079947f6d385a5579:1098988022,308e1d5b7d65cc105ea0645aa9cf5406:-307870733,c1ddd95b7365cc10cdbb70292e0e1bad:752523075,2e2d159bf565cc1085c931215799b70d:651935662,9b0b99d3c465cc1057f3b595aac3d421:1574184003,e7c4d153b965cc105a2b0de1d138e746:1001062553,3663d5dbcb25cc10e59ed40376c73d19:1347840207,ad101557bb25cc10121ac6490bbbf59c:-1882854963,41afc51b5425cc1083ffaa787b283554:-190527909,b7ae851b8c25cc102c43ca9abfa0a692:-1965494464,812c85930425cc1017abfa2c8c90db58:-466143994,08ca05938425cc10c137b2d317d518e5:-1413064573,963a8d9f14e1cc1076b6eb31f4beb3d4:-1197551279,e21381d3b6e1cc10f29d0cd375a711e5:-1287791139,22fff8dbbba1cc102e144a968ac415f0:-732303879,a3cb301b3ba1cc104e3d5089fc774fb3:-519474529,9a0738939ca1cc1045a373ca545be144:692726875,ebc17c9fc061cc10d3176a6cc855dd68:-1615971355,75efe0db4461cc10e302a3a8430c6236:-1552487841,e4e9a31bd3d100104418de65109fa470:1852796856,4df01b0f6f99cc1017e47be09f64f03a:1852796856,ccecbe26933fb3001113a43adf86767b:-1744017807,6455d8113bbb33008534e59f05fa0677:569034589,b682d099e77b3300966d52075e7431e8:485716240,eb32c09996f733000511a01610cb9935:-1644861048,0a80090cf0222300893aae1221b12ca4:-593650114,d79ff4659216e30048cf1a747724f13e:1503902270,2a7f7c659616e3006f63cd557b5e8eef:1749117318,ca0225d5f202ab0030a309e53b5b6cf0:656277032,ee00dc350a31e300df0b6683cbcbfd29:17721777,4dc5dda58b79a300daee8ae98023d783:-2000852270,d0251da50479a3008fc7020d823bc4ad:-1713061833,564151e1c579a300046645ab70e72ed2:691276984,e58a4d6de839a30040879b64850e6f5f:-776775073,e12a496d5539a300667fd3a6b28b0139:1245547804,03d8c92df239a3007838020030f81c91:1549636146,ab76c9a9de39a3004db97501d15f8caa:1065514183,96c48529b539a30076fe8d852b7c8e4f:-521488326,29b2c1299439a3001cc55dc0f6b476aa:-2104537681,a6ccf8e16d39a300e24ff45403dd4670:-2054934167,640cb0e10b39a300e79b26f81f3f7455:1053004619,32ba70a19f39a3009a5e51cdbbe9dac6:1377505683,02b7ce6c0b212300f49cbfe4f3f554d8:1471353261,a4efe15490696300c50b4b99771141c8:-709045009,f91c6190ca696300e586ca14be620e7e:-1968655764,e19a999c12e56300a0f9505524ae0d5c:1036399084,52500d90cca56300f0cce062440a4a4d:2076616855,ea32c58c33a923006f0d688c6e2c2f15:-145457377,96e319720d952300701138d000d82c86:-1852417661,7bb4cdf6a955230052a5092b24125da4:-9405223,d3a4c5f6255523003c021e00722092a7:962254687,6e032f6a2251230053bb90a3475af37b:612217565,5ee2eb6af1512300e77f70c9a86f8a38:-626493517,2f7bf1f4e0d12300b60ab691d8ab42e6:1763340465,2ecf7438351d6300f58a5d97e45e3fed:-47914924,fc4bec3821d96300308d5b07e478b6bd:1397565698,ae1b2c784ed9630081864986941c8e04:-615110723,dfaaec38e2d9630043a436b9140358b8:764991576,fd38e038c7d96300250d128e8c238db1:-822219293,3d186438a9d96300d861986ffa4e667e:-370003102,4d17ec38acd96300e0ac7415fdfac58f:427249196,4769128469912300e7763fbb66c778d5:-844488387,4460f077014d2300b3b855d1e9a04f93:1795068109,23dc15a71a852300c2ad13066951c863:1873091307,78cc55a7c98523001589b2594c32c02f:793233707,944b91678d852300fd504f31058dccaf:1873091307,aaa4d523cd85230064d4159a5a0e3123:668469638,ee244167e5452300470340e61ae013d1:1873091307,b7600da3a1452300511f3ed06bb0c15c:2090782381,68004d63ab452300dc6d435edf224dc2:-1758429907,85d3d8a387c123001961c54c852d3ac1:-1050710141,b18394a36ec1230042174a33c1387379:-535599749,de6394a3bec1230049313c0abdac8072:16589883,4103146303c123009eca89d3246d4bd6:1471505403,6bd21c23a1c123006013fc15593e48dd:-1752619679,c02880df65c56300512751d227adc76b:1046104694,1e1373471ac56300ce774f06b7d25698:-1623561583,96627347bec5630016bc11c2f3722c86:-1895104401,6c4233470dc563009000970983459c27:-329599567,5781ffc383c563000df6ea0d4cf647b4:-1699010199,7e503bc3fcc5630005f046a2d2e41582:907824829,8b7c5f476d85630056e4a537129088f0:-1699010199,2f2b1b87ce85630052d8833b48d87ef4:-713747691,e62a17475c856300ef92329419465f46:1061393147,26299b03f58563002b16177ea65e49a3:603159948,fcc71fc300856300208a176e1d1b6444:-1424586657,24275fc3e585630081a4dd09e8dedffa:993194299,bf0717cf204563002c32244ea65a4009:913255673,f1e65b835085630034bdcd3bd439273b:953224986,014f074f66456300eea0d98351e86e10:1237958807,53032a3de7812300d10e3f547c6d01ed:1753232393,cb30ee7533812300518a26bec2e5e5e0:-600090132</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_ed4f71079369421090acfa497bba1030</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="INSERT_OR_UPDATE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2024-04-18 11:00:33</sys_created_on><sys_id>ed4f71079369421090acfa497bba1030</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.calm_admin</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_security_acl display_value="x_nuta2_nutanix_ca_environment_subnet_mtom">07484cb82f77a1904627de1a2799b643</sys_security_acl><sys_update_name>sys_security_acl_role_ed4f71079369421090acfa497bba1030</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2024-04-18 11:00:33</sys_updated_on><sys_user_role display_value="x_nuta2_nutanix_ca.calm_admin" name="x_nuta2_nutanix_ca.calm_admin">7b91d2024fc1630065e48020a310c7bb</sys_user_role></sys_security_acl_role></record_update>]]></payload>
<payload_hash>-1353221198</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>1eab0533c3d4569064971612b4013153</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c309c0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.calm_admin</target_name>
<type>Access Roles</type>
<update_domain>global</update_domain>
<update_guid>467ff507db6942106b3ec0be85ce6365</update_guid>
<update_guid_history>467ff507db6942106b3ec0be85ce6365:-1353221198</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_nutanix_marketplaceitems_version_mpi</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="version_mpi" table="x_nuta2_nutanix_ca_nutanix_marketplaceitems"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;Version&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;version_mpi&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;formula/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value="String"&gt;string&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;250&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_nutanix_marketplaceitems&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;users.midserver&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-01-18 08:52:20&lt;/sys_created_on&gt;&lt;sys_id&gt;76493c794733fd106fffa3b3416d439d&lt;/sys_id&gt;&lt;sys_name&gt;Version&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_nutanix_marketplaceitems_version_mpi&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-01-18 08:52:20&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;virtual_type&gt;script&lt;/virtual_type&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>1769618041</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>1eab4133c3d4569064971612b4013121</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f940000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_marketplaceitems</table>
<target_name>Marketplace Items.Version</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>2879f07db133fd108c2b336779149bae</update_guid>
<update_guid_history>2879f07db133fd108c2b336779149bae:1769618041</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_index_x_nuta2_nutanix_ca_environment_subnet_mtom_envuuid_subnetuuid</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_index"><sys_index action="INSERT_OR_UPDATE"><col_name_string>envuuid_subnetuuid</col_name_string><index_col_name element="envuuid_subnetuuid" name="x_nuta2_nutanix_ca_environment_subnet_mtom">5be9f0062f77e1104627de1a2799b6f9</index_col_name><logical_table_name>x_nuta2_nutanix_ca_environment_subnet_mtom</logical_table_name><sys_class_name>sys_index</sys_class_name><sys_created_by>system</sys_created_by><sys_created_on>2024-03-20 06:50:15</sys_created_on><sys_id>7410f3a993c1c21090acfa497bba106e</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_index_x_nuta2_nutanix_ca_environment_subnet_mtom_envuuid_subnetuuid</sys_update_name><sys_updated_by>system</sys_updated_by><sys_updated_on>2024-03-20 06:50:15</sys_updated_on><table display_value="Environment Subnet MTOM" name="x_nuta2_nutanix_ca_environment_subnet_mtom">0042c0742f77a1904627de1a2799b659</table><unique_index>true</unique_index></sys_index></record_update>]]></payload>
<payload_hash>-1223787917</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>1eab4133c3d4569064971612b4013124</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c307e0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>0042c0742f77a1904627de1a2799b659</table>
<target_name>Environment Subnet MTOM: EnvUUID-SubnetUUID</target_name>
<type>Indexes</type>
<update_domain>global</update_domain>
<update_guid>3c10f3a9afc1c210768aa798524bfb6f</update_guid>
<update_guid_history>3c10f3a9afc1c210768aa798524bfb6f:-1223787917</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_page_5d121e2e9710111027f8fbc71153af90</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_page"&gt;&lt;sys_ui_page action="INSERT_OR_UPDATE"&gt;&lt;category&gt;general&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[var $j = jQuery.noConflict();

var actSysId = "${JS:sysparm_sysId}";
var action_name = "${JS:sysparm_actionName}";
var appName = "${JS:sysparm_appName}";
var parsedApp = "${JS:sysparm_parsedApp}";
var appType = "${JS:sysparm_appType}";
var enabled_services = "${JS:sysparm_enabled_services}";
var task_call_config = 0;
var ngt_installed = 0;
var variable_list = '';
var recovery_list="${JS:sysparm_recovery_list}";
var restore_count=0;
var snapshot_count=0;
var deployment_list = '';
//var $j = jQuery.noConflict();

//new GlideModal().get("dialog_loading").destroy();
enabled_services = enabled_services.split(',');

if (enabled_services.indexOf('VSS') == -1) {
    $j("#app_const").prop("disabled", true);
    ngt_installed = 0;
} else {
    $j("#app_const").prop("disabled", false);
    ngt_installed = 1;
}

$j('#snapshotSave').mousedown(runAction);
$j('#cancelAct').mousedown(cancelDialog);

function cancelDialog() {
    GlideModal.get().destroy();
}
addLoadEvent(function() {
    var blueprintDetail = JSON.parse(parsedApp);
    var action_list = blueprintDetail.status.resources.action_list;
	deployment_list = blueprintDetail.status.resources.deployment_list;
    for (var i = 0; i &lt; action_list.length; i++) {
        if (action_list[i].type + '' == 'user' &amp;&amp; action_name == action_list[i].name) {
            //console.log("action_list[i].name" + action_list[i].name);
            getSnapshot(action_list[i]);
        }
    }
    //firstCheck();
});

function selectedDropdown (id, text, value, parent) {
	$j("#"+id).text(text);
}

function getSnapshot(action) {
    var task_definition_list = action.runbook.task_definition_list;
    variable_list = action.runbook.variable_list;
	//console.log("variable_list: "+JSON.stringify(variable_list));
    for (var i = 0; i &lt; task_definition_list.length; i++) {
        if (task_definition_list[i].type + '' == 'CALL_CONFIG') {
            //console.log("task_definition_list[i].name" + task_definition_list[i].name);
			var service_uuid = task_definition_list[i].target_any_local_reference.uuid+'';
			for(var j = 0; j &lt; deployment_list.length; j++) {
				if(service_uuid == deployment_list[j].uuid+'') {
					task_definition_list[i].target_any_local_reference.name = deployment_list[j].service_list[0].name+'';
				}
			}
            getTask(task_definition_list[i]);
        }
    }
}

function getTask(task) {
    var name = task.attrs.config_spec_reference.name + '';
    var cal_config_uuid = task.uuid;
    var html_name = '&lt;div class=\"info-message\" style=\"padding: 5px 16px; background-color: #e8f0fa; position: relative; margin: 10px 0px;\"&gt;' + name + '&lt;span style="color: #22a5f7;border: 1px solid #91d2fb;border-radius: 4px;padding: 2px; margin:6px;"&gt;'+task.target_any_local_reference.name+'&lt;/span&gt;&lt;\/div&gt;';
    $j(".SnapshotData").append(html_name);
    for (var j = 0; j &lt; task.attrs.inarg_list.length; j++) {
        //console.log("Task name: " + task.attrs.inarg_list[j].name + '');
        if (task.attrs.inarg_list[j].name + '' == 'snapshot_name') {
            var snapshot_name = task.attrs.inarg_list[j].value + '';
           // console.log("snapshot_name" + snapshot_name);
            var html_snap_name = '&lt;div class=\"form-group\"&gt;&lt;label class=\"modal_label\"&gt;&lt;strong&gt;Snapshot Name&lt;\/strong&gt;&lt;\/label&gt; &lt;input type=\"text\" class=\"form-control\" name=\"' + cal_config_uuid + '\" id=\"snapshot_name' + task_call_config + '\" placeholder=\"Snapshot name\" maxlength=\"64\" value=\"' + snapshot_name + '"\/&gt; &lt;\/div&gt;';
            $j(".SnapshotData").append(html_snap_name);
        } else if (task.attrs.inarg_list[j].name + '' == 'snapshot_type') {
            if (appType == 'MultiVM') {
				if(ngt_installed == 0){
                var html_snap_type = '&lt;div class=\"info-message\" style=\"padding: 5px 16px; background-color: rgb(242, 244, 245); position: relative; margin: 10px 0px;\"&gt;All snapshots are crash consistent&lt;\/div&gt;';
                $j(".SnapshotData").append(html_snap_type);
			}
				else {
					var snapshot_type = task.attrs.inarg_list[j].value + '';
              //  console.log("snapshot_type" + snapshot_type);
                var html_snap_type = '&lt;div class=\"form-group\"&gt; &lt;label class=\"modal_label\"&gt;&lt;strong&gt;Snapshot Type&lt;\/strong&gt;&lt;\/label&gt; &lt;div class=\"form-group\" style=\"padding-top: 8px;\"&gt; &lt;span class=\"input-group-radio\"&gt; &lt;input class=\"radio\" type=\"radio\" name=\"' + cal_config_uuid + '\" id=\"app_const\" value=\"APPLICATION_CONSISTENT\"checked=\"false\"\/&gt; &lt;label for=\"app_const\" class=\"radio-label\"&gt;App consistent&lt;\/label&gt; &lt;\/span&gt; &lt;span class=\"input-group-radio\"&gt; &lt;input class=\"radio\" type=\"radio\" name=\"' + cal_config_uuid + '\" id=\"crash_const\" value=\"CRASH_CONSISTENT\" checked=\"true\"\/&gt; &lt;label for=\"crash_const\" class=\"radio-label\"&gt;Crash consistent&lt;\/label&gt; &lt;\/span&gt; &lt;\/div&gt; &lt;\/div&gt;';
                $j(".SnapshotData").append(html_snap_type);
				}
            } else {
                var snapshot_type = task.attrs.inarg_list[j].value + '';
              //  console.log("snapshot_type" + snapshot_type);
                var html_snap_type = '&lt;div class=\"form-group\"&gt; &lt;label class=\"modal_label\"&gt;&lt;strong&gt;Snapshot Type&lt;\/strong&gt;&lt;\/label&gt; &lt;div class=\"form-group\" style=\"padding-top: 8px;\"&gt; &lt;span class=\"input-group-radio\"&gt; &lt;input class=\"radio\" type=\"radio\" name=\"' + cal_config_uuid + '\" id=\"app_const\" value=\"APPLICATION_CONSISTENT\"checked=\"false\"\/&gt; &lt;label for=\"app_const\" class=\"radio-label\"&gt;App consistent&lt;\/label&gt; &lt;\/span&gt; &lt;span class=\"input-group-radio\"&gt; &lt;input class=\"radio\" type=\"radio\" name=\"' + cal_config_uuid + '\" id=\"crash_const\" value=\"CRASH_CONSISTENT\" checked=\"true\"\/&gt; &lt;label for=\"crash_const\" class=\"radio-label\"&gt;Crash consistent&lt;\/label&gt; &lt;\/span&gt; &lt;\/div&gt; &lt;\/div&gt;';
                $j(".SnapshotData").append(html_snap_type);
                if (ngt_installed == 0) {
                    $j("#app_const").attr("disabled", true);
                    var html_snap_type = '&lt;div class=\"info-message\" style=\"padding: 5px 16px; background-color: rgb(242, 244, 245); position: relative; margin: 10px 0px;\"&gt;Install Volume Snapshot Service (VSS) to take App consistent snapshots&lt;\/div&gt;';
                    $j(".SnapshotData").append(html_snap_type);
                }
            }
        } else if (task.attrs.inarg_list[j].name + '' == 'recovery_point_group_uuid') {
			var dropDownString='';
           // var html_restore = '&lt;div style="margin: 3px;"&gt;Recovery Points&lt;/div&gt; &lt;select name="' + cal_config_uuid + '" id="recovery' + task_call_config + '" style="border-color:#989898; height: 27px; width:400px"&gt;&lt;/select&gt;&lt;/div&gt;';
			var html_restore = '&lt;div style="margin: 3px;"&gt;Recovery Points&lt;/div&gt;';
            $j(".SnapshotData").append(html_restore);
			var parsed_recovery_list=JSON.parse(recovery_list);
			for(var i=0 ;i&lt;parsed_recovery_list.entities.length;i++) {
				/*var option = '&lt;option value=' + parsed_recovery_list.entities[i].status.uuid + '&gt;' + parsed_recovery_list.entities[i].status.recovery_point_info_list[0].name+'|'+ new Date(parsed_recovery_list.entities[i].status.recovery_point_info_list[0].expiration_time)+'&lt;/option&gt;';
            $j("#recovery"+ task_call_config).append(option);*/
				var dropDownStr  = '&lt;div class="dropdown-container" onclick=\'selectedDropdown( "recovery' + task_call_config + '" , '+parsed_recovery_list.entities[i].status.name+', "'+'h'+'", "'+'h'+'");\'&gt;&lt;div class="row"&gt;&lt;div class="col-md-6 credential-dropdown-menu-label"&gt;'+parsed_recovery_list.entities[i].status.name+'&lt;/div&gt;&lt;/div&gt;&lt;div class="row"&gt;&lt;div class="col-md-6"&gt;&lt;div class="credential-dropdown-secondrow"&gt;'+new Date(parsed_recovery_list.entities[i].status.recovery_point_info_list[0].expiration_time)+'&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;';
					dropDownString += dropDownStr;
			}
			var entityRow = '&lt;div class="row" style="margin-top:10px;margin-bottom:10px;"&gt;&lt;div class="col-md-7"&gt;&lt;div class="dropdown"&gt;&lt;button class="btn btn-default dropdown-toggle credential-dropdown" data-toggle="dropdown" &gt;&lt;span class="credential-dropdown-label" id="recovery' + task_call_config + '"&gt;'+'Select Recovery point'+'&lt;/span&gt;&lt;span class="caret credential-caret"&gt;&lt;/span&gt;&lt;/button&gt;&lt;div class="dropdown-menu credential-dropdown-menu" style="padding: 5px;"&gt;'+dropDownString+'&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;';
			$j(".SnapshotData").append(entityRow);
			//restore_count++;
        }
    }
    task_call_config++;
    /*'&lt;div style="display: -webkit-inline-box; margin: 10px;"&gt;&lt;span class="list-options" style="margin: 3px; padding-bottom: 10px; border: 1px solid rgb(242, 244, 245); line-height: 13px; font-size: 12px; display: inline-block; border-radius: 2px; background-color: rgb(242, 244, 245); color: #007eff;"&gt; &lt;/div&gt;&lt;/span&gt;&lt;/div&gt;'*/
}

function runAction() {
    $j('#snapshotSave').prop("disabled", true);
    $j('#cancelAct').prop("disabled", true);

    var modVarString = [];
    for (var i = 0; i &lt; variable_list.length; i++) {
        modVarString.push({
            name: variable_list[i].name + '',
            value: variable_list[i].value
        });
    }
	//console.log("task_call_config"+task_call_config);
    for (var i = 0; i &lt; task_call_config; i++) {
        if($j("#snapshot_name" + i).prop("name")+''!='undefined')
			modVarString.push({
            name: "snapshot_name",
            value: $j("#snapshot_name" + i).val() + '',
            task_uuid: $j("#snapshot_name" + i).prop("name") + ''
        });
		if($j("#recovery" + i).prop("name")+''!='undefined')
			modVarString.push({
            name: "recovery_point_group_uuid",
            value: $j("#recovery" + i).val() + '',
            task_uuid: $j("#recovery" + i).prop("name") + ''
        });
    }
    if ($j("#app_const").prop("checked") + '' == 'true') {
        modVarString.push({
            name: "snapshot_type",
            value: $j("#app_const").val() + '',
            task_uuid: $j("#app_const").prop("name") + ''
        });
    }
   // console.log("modVarString: " + JSON.stringify(modVarString));
    var gajax = new GlideAjax('Run_App_Actions');
    gajax.addParam('sysparm_name', 'runAction');
    gajax.addParam('sysparm_actionsysid', actSysId + '');
    gajax.addParam('sysparm_actionVars', JSON.stringify(modVarString));
    gajax.getXML(getResponse);

    function getResponse(response) {
        var answer = response.responseXML.documentElement.getAttribute("answer");
        g_form.addInfoMessage(answer);
        GlideModal.get().destroy();
    }
}]]&gt;&lt;/client_script&gt;&lt;description/&gt;&lt;direct&gt;false&lt;/direct&gt;&lt;endpoint&gt;x_nuta2_nutanix_ca_User_Snapshot.do&lt;/endpoint&gt;&lt;html&gt;&lt;![CDATA[&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null"&gt;
	&lt;input type="hidden" name="ngt_services" id="ngt_services"/&gt;
	&lt;body&gt;
		&lt;div class="SnapshotData"&gt; &lt;/div&gt;
		&lt;div class="RestoreData"&gt; &lt;/div&gt;
			&lt;div class="modal-footer"&gt;
				&lt;div class="row"&gt;
					&lt;div class="col-sm-9 pull-right" style="width: max-content;"&gt;
						&lt;button class="btn btn-default" id="cancelAct"&gt;Cancel&lt;/button&gt;
						&lt;button class="btn btn-primary" id="snapshotSave"&gt;Run&lt;/button&gt;
					&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
	&lt;/body&gt;
&lt;/j:jelly&gt;]]&gt;&lt;/html&gt;&lt;name&gt;User_Snapshot&lt;/name&gt;&lt;processing_script/&gt;&lt;sys_class_name&gt;sys_ui_page&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2022-06-28 07:13:37&lt;/sys_created_on&gt;&lt;sys_id&gt;5d121e2e9710111027f8fbc71153af90&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;User_Snapshot&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_page_5d121e2e9710111027f8fbc71153af90&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-07-23 11:18:39&lt;/sys_updated_on&gt;&lt;/sys_ui_page&gt;&lt;/record_update&gt;</payload>
<payload_hash>-243530924</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>22ab0533c3d4569064971612b4013156</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c31d80000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>User_Snapshot</target_name>
<type>UI Page</type>
<update_domain>global</update_domain>
<update_guid>cf3c9802206fc254b546f089bb42e1f1</update_guid>
<update_guid_history>cf3c9802206fc254b546f089bb42e1f1:-243530924,cf3c9802206fc254b546f089bb42e1f1:-243530924,b2321e2e8f1011102d19216f4f615fd8:1860093966,15cfbc02b5eda11072bd66d2c41e6f4b:1610572674,b2321e2e8f1011102d19216f4f615fd8:1860093966,c5c976a1c26d611084bc7bc92e79046b:1610572674,b2321e2e8f1011102d19216f4f615fd8:1860093966,8122190036e9e91069f9ac3addd8032b:1610572674,b2321e2e8f1011102d19216f4f615fd8:1860093966</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_f9370bd0db423300cf390d53ca961962</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name&gt;delete_catalog&lt;/action_name&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;true&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;current.state+''!='deleted' &amp;amp;&amp;amp; new Nutanix_ClientServerScriptBridge().checkQueue()&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style&gt;destructive&lt;/form_style&gt;&lt;format_for_configurable_workspace&gt;false&lt;/format_for_configurable_workspace&gt;&lt;hint/&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;messages/&gt;&lt;name&gt;Delete&lt;/name&gt;&lt;onclick&gt;runClientCode()&lt;/onclick&gt;&lt;order&gt;75&lt;/order&gt;&lt;script&gt;&lt;![CDATA[//Client-side 'onclick' function
function runClientCode(){
	if(confirm("Are you sure you wanna delete this catalog item?"))
		gsftSubmit(null, g_form.getFormElement(), 'delete_catalog'); //MUST call the 'Action name' set in this UI Action
}

//Code that runs without 'onclick'
//Ensure call to server-side function with no browser errors
if(typeof window == 'undefined')
   runBusRuleCode();

//Server-side function
function runBusRuleCode(){
	
	var url = 'x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=b2d6d6a54f41230065e48020a310c7b7&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';

	if(current.state+''=='deleted' ){

		gs.addErrorMessage("Can not delete already deleted catalog item.");
		url = 'x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=b2d6d6a54f41230065e48020a310c7b7&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';
	}else{

		current.state = 'deleted';
		current.update();

	if(current.item_name.getRefRecord()){
		var catItem = current.item_name.getRefRecord();
		catItem.active = false;
		catItem.update();

		gs.addErrorMessage("Catalog Item " + current.item_name.name + " Deleted.");
		url = 'x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=b2d6d6a54f41230065e48020a310c7b7&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';
	}
}

	action.setRedirectURL(url);
}
]]&gt;&lt;/script&gt;&lt;show_insert&gt;true&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-06-11 10:06:02&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;f9370bd0db423300cf390d53ca961962&lt;/sys_id&gt;&lt;sys_mod_count&gt;13&lt;/sys_mod_count&gt;&lt;sys_name&gt;Delete&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_f9370bd0db423300cf390d53ca961962&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-12-18 09:43:29&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_nutanix_runtime_configuration&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>890249478</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>26ab0533c3d4569064971612b4013155</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f3c0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_runtime_configuration</table>
<target_name>Delete</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>afdb953f3a4fb910d61e04537f9ead10</update_guid>
<update_guid_history>afdb953f3a4fb910d61e04537f9ead10:890249478,0fc8400f18023300ce2881ef2e8d0f7d:899008054,8310898203eda110d71c0268ca3439e5:664348008,0fc8400f18023300ce2881ef2e8d0f7d:899008054,f9b97e61306d61100cecfc8aed475792:664348008,0fc8400f18023300ce2881ef2e8d0f7d:899008054,2aa2190495e9e910e0a98102f671ce7b:664348008,0fc8400f18023300ce2881ef2e8d0f7d:899008054,0fc8400f18023300ce2881ef2e8d0f7d:899008054,10764ccb87023300257d823a6babb432:-231841677,df2887ae48423300009c3da6719581c3:1963465674,fa0807ae9242330099423281660220d9:2046642160,eb87036e8f4233004e55f3d0d947e86d:844855861,af9603ea104233008f06a9b358ec71db:856201044,17e7cc297786b300fff5e0830427e073:-1076127130,b9b400610c86b3005ff1dfbf7f2521f1:1825031721,35ca3351aa86b300e5a942f82e56c543:-1711407568,2baaffdd2146b3003783515f0980683a:955025779,6e3abb11b786b3009d24f028bf4eb7c2:-976942552,5fb8c714ee423300447d928b82f8ac9d:2044728209,70380fd0954233004be34f47e6c4648d:278127073</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_92e4cf2a4f4233002aca224f9310c76d</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name/&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;false&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;current.state+''=='draft' &amp;amp;&amp;amp; new Nutanix_ClientServerScriptBridge().checkQueue()&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style/&gt;&lt;format_for_configurable_workspace&gt;false&lt;/format_for_configurable_workspace&gt;&lt;hint/&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;messages/&gt;&lt;name&gt;Activate Catalog Item&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;74&lt;/order&gt;&lt;script&gt;&lt;![CDATA[var url = 'x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=b2d6d6a54f41230065e48020a310c7b7&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';

if(current.state+''=='deleted' ){
	
	gs.addErrorMessage("Can not activate a deleted catalog item.");
	url = 'x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=b2d6d6a54f41230065e48020a310c7b7&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';
}else{
	
	current.state = 'active';
	current.update();
if(current.item_name.getRefRecord()){
	var catItem = current.item_name.getRefRecord();
	catItem.active = true;
	catItem.update();
	
	gs.addInfoMessage("Catalog Item " + current.item_name.name + " moved to active state.");
	url = 'x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=b2d6d6a54f41230065e48020a310c7b7&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';
}
}
action.setRedirectURL(url);


]]&gt;&lt;/script&gt;&lt;show_insert&gt;true&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-06-18 09:38:00&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;92e4cf2a4f4233002aca224f9310c76d&lt;/sys_id&gt;&lt;sys_mod_count&gt;10&lt;/sys_mod_count&gt;&lt;sys_name&gt;Activate Catalog Item&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_92e4cf2a4f4233002aca224f9310c76d&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-12-18 07:45:23&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_nutanix_runtime_configuration&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>1877922497</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>2aab0533c3d4569064971612b4013154</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f320000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_runtime_configuration</table>
<target_name>Activate Catalog Item</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>f1d005779ecbb91094a9305e9c853e81</update_guid>
<update_guid_history>f1d005779ecbb91094a9305e9c853e81:1877922497,176ccfaefc423300778138ec23098904:637213470,d0ff7c421beda110a94221c8439a9810:-1506447194,176ccfaefc423300778138ec23098904:637213470,61b93e61176d611055c4aa1a44797a73:-1506447194,176ccfaefc423300778138ec23098904:637213470,ce725d805ee9e91017d74a1b5c5c3cfe:-1506447194,176ccfaefc423300778138ec23098904:637213470,176ccfaefc423300778138ec23098904:637213470,1c4ac7ee1a42330077042319c4ea8f2d:-1062752772,210ac7ee9942330031f9d3479a030c29:1828757586,d4f9c7ee914233001a4212f6c8353425:-707221680,71f7476e504233008dfe80f16137eaeb:631512575,d8c7c36e3d4233001ed157d2474efd15:-1611607788,1277036e0c423300e3b9602b7d89bd42:1328248511,4b964fead44233009738e12a855e3a74:1835968911,481503aa1942330001c3790504c4be68:968392993,5ae4cf2a7c423300fb3228ea0ffb926e:-1180986079</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_48c8a818c33f021064971612b40131e5</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="INSERT_OR_UPDATE"><operation>read</operation><source_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2024-07-30 11:59:39</sys_created_on><sys_id>48c8a818c33f021064971612b40131e5</sys_id><sys_mod_count>0</sys_mod_count><sys_name>sys_properties</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_scope_privilege_48c8a818c33f021064971612b40131e5</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2024-07-30 11:59:39</sys_updated_on><target_name>sys_properties</target_name><target_scope display_value="Global">global</target_scope><target_type>sys_db_object</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>1826959569</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>52ab0533c3d4569064971612b401314f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191bbff52640000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>sys_properties</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>b6e7c5bb9794569029abfd96690eb21d</update_guid>
<update_guid_history>b6e7c5bb9794569029abfd96690eb21d:1826959569,c0c8a818563f021093aa4e5ea6cd72e7:1826959569</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_0f480cb82f77a1904627de1a2799b6f0</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl"><sys_security_acl action="INSERT_OR_UPDATE"><active>true</active><admin_overrides>true</admin_overrides><advanced>false</advanced><condition/><description>Default access control on x_nuta2_nutanix_ca_environment_subnet_mtom</description><name>x_nuta2_nutanix_ca_environment_subnet_mtom</name><operation display_value="create">create</operation><script/><sys_class_name>sys_security_acl</sys_class_name><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 06:32:32</sys_created_on><sys_id>0f480cb82f77a1904627de1a2799b6f0</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_security_acl_0f480cb82f77a1904627de1a2799b6f0</sys_update_name><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 06:32:32</sys_updated_on><type display_value="record">record</type></sys_security_acl></record_update>]]></payload>
<payload_hash>-1039936580</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>52ab0533c3d4569064971612b4013152</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c304b0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>x_nuta2_nutanix_ca_environment_subnet_mtom</target_name>
<type>Access Control</type>
<update_domain>global</update_domain>
<update_guid>50a34d7ce3fba190a6bc6615f132e7f8</update_guid>
<update_guid_history>50a34d7ce3fba190a6bc6615f132e7f8:-1039936580,8b480cb8d877a190b89c1660e9c9e6f3:-1039936580</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sysauto_script_86712ae337c5a300fdfc097973990eec</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sysauto_script"&gt;&lt;sysauto_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;business_calendar/&gt;&lt;condition/&gt;&lt;conditional&gt;false&lt;/conditional&gt;&lt;entered_time/&gt;&lt;max_drift/&gt;&lt;name&gt;Nutanix_Import Inventories Job&lt;/name&gt;&lt;offset/&gt;&lt;offset_type/&gt;&lt;run_as/&gt;&lt;run_as_tz/&gt;&lt;run_dayofmonth&gt;1&lt;/run_dayofmonth&gt;&lt;run_dayofweek&gt;1&lt;/run_dayofweek&gt;&lt;run_period/&gt;&lt;run_start&gt;2018-10-15 20:23:09&lt;/run_start&gt;&lt;run_time&gt;1970-01-01 09:00:00&lt;/run_time&gt;&lt;run_type&gt;daily&lt;/run_type&gt;&lt;script&gt;&lt;![CDATA[var appUtil;
if (current.active + '' == 'false') {
    appUtil = new Nutanix_Calm_Logger();
    appUtil.error(current.name + ' schedule job is in active false state. Please activate it before executing the same.');
} else {
    updateCalmVersion();
    if (new x_nuta2_nutanix_ca.Migration_Script().updatedOneDotSevenMigrationNeeded()) {
        var appUtil = new Nutanix_Calm_Utils();
        appUtil.insertIntoQueue('startMigration_1_7', '', '', '', 'Migrating to v1.7', 'This process is migrating v1.6.1 to v1.7');
        gs.setProperty("x_nuta2_nutanix_ca.sync", "1");
    }
    if (new x_nuta2_nutanix_ca.Migration_Script().updatedOneDotSixDotOneMigrationNeeded()) {
        var appUtil = new Nutanix_Calm_Utils();
        appUtil.insertIntoQueue('startMigration_1_6_1', '', '', '', 'Migrating to v1.6.1', 'This process is migrating v1.6 to v1.6.1');
        gs.setProperty("x_nuta2_nutanix_ca.sync", "1");
    }
    if (new x_nuta2_nutanix_ca.Migration_Script().updatedOneDotFiveDotOneMigrationNeeded()) {
        var appUtil = new Nutanix_Calm_Utils();
        appUtil.insertIntoQueue('startMigration_1_5_1', '', '', '', 'Migrating to v1.5.1', 'This process is migrating v1.4.5 to v1.5.1');
    }
    if (new x_nuta2_nutanix_ca.Migration_Script().checkForTheRuntimeConfigurationsCatalogItems()) {
        var appUtil = new Nutanix_Calm_Utils();
        appUtil.insertIntoQueue('startMigration_1_4_5', '', '', '', 'Migrating to v1.4.5', 'This process is migrating v1.4.4 to v1.4.5');
    }
    if (new x_nuta2_nutanix_ca.Migration_Script().isCatalogItemsAvailable()) {
        appUtil = new Nutanix_Calm_Utils();
        appUtil.insertIntoQueue('startMigration_1_4_4', '', '', '', 'Migrating to v1.4.4', 'This process is migrating v1.4 to v1.4.4');
    }
    if (new x_nuta2_nutanix_ca.Migration_Script().isMigrationNeeded()) {
        appUtil = new Nutanix_Calm_Utils();
        appUtil.insertIntoQueue('startMigration', '', '', '', 'Migrating to v1.4', 'This process is migrating v1.3 to v1.4.');
    }
    if (gs.getProperty('x_nuta2_nutanix_ca.1_4_3') + '' == '0') {
        var appUtil = new Nutanix_Calm_Utils();
        appUtil.migrateV1_4_3();
    } else {
        appUtil = new Nutanix_Calm_Utils();
        appUtil.insertIntoQueue('startInventorySync', '', '', '', 'Start inventory sync', 'This process is invoking the import of all the inventories.');
        //Trigger Schedule job for fix script for one time
        if (gs.getProperty("x_nuta2_nutanix_ca.NCM Trigger Fix Script") != null &amp;&amp; gs.getProperty("x_nuta2_nutanix_ca.NCM Trigger Fix Script") == "true") {
            var auto = new GlideRecord("sysauto_script");
            auto.addEncodedQuery("nameSTARTSWITHNutanix_^name=Nutanix_Default Replica Fix Script Scheduled Job");
            auto.query();
            if (auto.next()) {
                auto.run_type = "on_demand";
                auto.run_period = '';
                //auto.run_start = new GlideDateTime();
                auto.update();
                gs.executeNow(auto);
            }
        }
    }
}
//to update the calm version on the execution of every Scheduled Job.
function updateCalmVersion() {
    var previous_calm_vesrsion = parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version'));
    var new_calm_version;
    var plug_property;
    var prop = gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id');
    if (prop) {
        plug_property = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
        plug_property.get(prop);
    } else {
        var logger1 = new Nutanix_Calm_Logger();
        logger1.info("error in Nutanix_Import Inventories Job - updateCalmVersion - - couldnt find a record using getmethod()");
    }

    var logger = new Nutanix_Calm_Logger();
    var utils = new Nutanix_Calm_Utils();

    var authResp = utils.makeCalmApiCall("post", "/projects/list", '{"kind" : "project"}');
    var statusCode = authResp.getStatusCode();

    if (authResp.getStatusCode() == '200' || authResp.getStatusCode() == '201') {

        var verResp = utils.makeCalmApiVersionCall("get", "/apps/version", '');
        if (verResp.getStatusCode() == '200' || verResp.getStatusCode() == '201') {
            var response = verResp.getBody();

            new_calm_version = parseFloat(response.split('.')[0] + '.' + response.split('.')[1]);
            if ((parseFloat(new_calm_version) == parseFloat("3.2")) &amp;&amp; (parseFloat(new_calm_version) &gt; parseFloat(previous_calm_vesrsion))) {
                gs.setProperty('x_nuta2_nutanix_ca.1_4_4', '0');
            }

            plug_property.calm_version = response.split('.')[0] + '.' + response.split('.')[1];
            gs.setProperty('x_nuta2_nutanix_ca.calm_version', '');
            gs.setProperty('x_nuta2_nutanix_ca.calm_version', plug_property.calm_version);
            plug_property.update();
            logger.info('Schedule Job Calm Version updated-&gt;' + plug_property.calm_version);
        } else {
            plug_property.calm_version = '';
            plug_property.update();

            gs.addErrorMessage('Nutanix Calm Version cannot be detected.Please check the logs and retry saving properties.');
            logger.error('Schedule Job Calm Version cannot be detected. Error-&gt;' + verResp.getBody());
        }
    }
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sysauto_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-15 20:23:44&lt;/sys_created_on&gt;&lt;sys_id&gt;86712ae337c5a300fdfc097973990eec&lt;/sys_id&gt;&lt;sys_mod_count&gt;61&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_Import Inventories Job&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sysauto_script_86712ae337c5a300fdfc097973990eec&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-07-30 12:22:08&lt;/sys_updated_on&gt;&lt;time_zone/&gt;&lt;upgrade_safe&gt;false&lt;/upgrade_safe&gt;&lt;/sysauto_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1709479604</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>52ab4133c3d4569064971612b4013120</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191bbfc28400000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Nutanix_Import Inventories Job</target_name>
<type>Scheduled Script Execution</type>
<update_domain>global</update_domain>
<update_guid>0427c1bb2f9456903dcd8b017a8b7198</update_guid>
<update_guid_history>0427c1bb2f9456903dcd8b017a8b7198:-1709479604,2572d4105bf742103358727589458ac9:-436519085,15083dd24ceb4654541f4d47b66ad82d:-714857107,6ec3feb503e602107b43a2b16c8ece02:308867200,26e7789e57eb421042cdeb059873d564:-2036224957,3a2c609a34ab4210b2ae58fe4aac04c6:308867200,ef586ad345ed46107daa8c1249bcb4b8:1532215765,6537d45ba5e4b910bb27bc32c4252ab4:772648825,a4e0d2e1e1e8f110a5736b3a3a105a39:2094004056,1d118efb76672d10fcad5fde35def734:965262644,59b610b506d3651044fb1cfbd48899d5:-313185950,0f5ffcaf48c5b4101a94a1202548025b:-72932247,0f5ffcaf48c5b4101a94a1202548025b:-72932247,2a4aa4ed8c893010c3d953b609293d0f:-72932247,8bb45fbba76b2010a066cb3ae28dea38:-2076531287,f0f2363b25efa0103ad9e43db1eee781:-672501994,6216db5b2549201066457bc6c8cfc82b:1317566638,26382a0fc0c9ec50d230cfd42e63ffa8:1631041166,70a77fbc5bc0a010d0d99fdc32a2f9ca:-643791617,fd17ec59f0a7101099c4e43c6e99324e:1059249552,a84646688d0a10108600bbff1fe7639e:149388791,adf1d5453b423300efd7591e2fc93e58:1075233700,adf1d5453b423300efd7591e2fc93e58:1075233700,faaf0cf0634e73003339e40aa173204f:-1548821773,a02c70bfe14033004b36e28116fd7049:-1358784723,32de5d76ef5223009c39603892521554:31952376,d2de2dfdfb122300393a95c77f95b312:-573038441,1b7ead1068d6230054f1dc278008ea21:380856702,d44d65dcad962300011786037f9b043b:392291058,e4532a778e8663005c806592b361b513:1644852760,c673e2bda60a630005bb12698cc6c3e8:551727958,64b79a758e0a630076dee1dfb95c6827:-1723359011,947abddc0082e700dc589dabbaaad2b8:324155052,ac42a01c1d4ea700daa9985af01c1cc9:783621195,ffac5ae834612300eb1d3d4f2d95a64f:-242358860,aa378e6cd12123008df41e96cb544720:-1289391876,ff35ccf9dd51230037da5fb64b6afa08:-1690682619,193746fc21d12300b1009d10d6df0b00:1801983291,00897574c7d12300a302387c737e2a69:140282053,bca32e27e0c5a300f140a7e32713acdd:-1947656956</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_documentation_x_nuta2_nutanix_ca_environment_subnet_mtom_subnet_uuid_en</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_documentation element="subnet_uuid" label="Subnet UUID" language="en" table="x_nuta2_nutanix_ca_environment_subnet_mtom"><sys_documentation action="INSERT_OR_UPDATE"><element>subnet_uuid</element><help/><hint/><label>Subnet UUID</label><language>en</language><name>x_nuta2_nutanix_ca_environment_subnet_mtom</name><plural>Subnet UUIDs</plural><sys_class_name>sys_documentation</sys_class_name><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 06:32:32</sys_created_on><sys_id>17484cb82f77a1904627de1a2799b678</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Subnet UUID</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_documentation_x_nuta2_nutanix_ca_environment_subnet_mtom_subnet_uuid_en</sys_update_name><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 06:32:32</sys_updated_on><url/><url_target/></sys_documentation></sys_documentation></record_update>]]></payload>
<payload_hash>1694726163</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>52ab4133c3d4569064971612b4013123</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c303c0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>Environment Subnet MTOM.Subnet UUID</target_name>
<type>Field Label</type>
<update_domain>global</update_domain>
<update_guid>d8a34d7cf2fba1902f82fbbae846cbf4</update_guid>
<update_guid_history>d8a34d7cf2fba1902f82fbbae846cbf4:1694726163,db484cb8c677a1901965095dfbec25c8:1694726163</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_relationship_6da85cb82fb7a1904627de1a2799b637</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_relationship"&gt;&lt;sys_relationship action="INSERT_OR_UPDATE"&gt;&lt;advanced&gt;false&lt;/advanced&gt;&lt;apply_to/&gt;&lt;basic_apply_to&gt;x_nuta2_nutanix_ca_nutanix_environment&lt;/basic_apply_to&gt;&lt;basic_query_from&gt;x_nuta2_nutanix_ca_subnet&lt;/basic_query_from&gt;&lt;insert_callback/&gt;&lt;name&gt;Subnets&lt;/name&gt;&lt;query_from/&gt;&lt;query_with&gt;&lt;![CDATA[(function refineQuery(subnetList, parent) {

	var joinByMtom = subnetList.addJoinQuery('x_nuta2_nutanix_ca_environment_subnet_mtom', 'uuid', 'subnet_uuid');
	joinByMtom.addCondition('environment_uuid', parent.getValue('uuid'));

})(current, parent);]]&gt;&lt;/query_with&gt;&lt;reference_field/&gt;&lt;related_list/&gt;&lt;simple_reference&gt;false&lt;/simple_reference&gt;&lt;sys_class_name&gt;sys_relationship&lt;/sys_class_name&gt;&lt;sys_created_by&gt;ratakondala.arun&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-06-30 09:09:37&lt;/sys_created_on&gt;&lt;sys_id&gt;6da85cb82fb7a1904627de1a2799b637&lt;/sys_id&gt;&lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;&lt;sys_name&gt;Subnets&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_relationship_6da85cb82fb7a1904627de1a2799b637&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-04-24 09:32:04&lt;/sys_updated_on&gt;&lt;/sys_relationship&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=6da85cb82fb7a1904627de1a2799b637"/&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1606043351</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>56ab0533c3d4569064971612b401314e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30d30000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Subnets</target_name>
<type>Relationship</type>
<update_domain>global</update_domain>
<update_guid>9cc42845adf1ca1069030929e06afa90</update_guid>
<update_guid_history>9cc42845adf1ca1069030929e06afa90:-1606043351,fb6cdbad5d3f6110c1190b3ceef36ddb:-1590437327,ac5c9ba5ac7f6110052bc53c7e46126d:-278532143,62c3017c10fba1902d00f8cde09c2f3c:-1590437327,efb389b437fba190b410bba3468a58d8:-718230446,6198bcb8d9bba190ddbea39eaaaa744f:-1590437327,75b7b43818bba190ef925ccb636532be:-202812349,17e674b054bba190cb7a4acadbbecf26:-479916234,3f0d68b8ffb7a190f4e27ccda0ddcddc:-327595581,1c4ce47c5f3ba190fd5455ff5964397d:1032606234</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_cc07c62137412300d27b8cf6c3990e83</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_Calm_Utils&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;DAO util and changes&lt;/description&gt;&lt;name&gt;Nutanix_Calm_Utils&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_Calm_Utils = Class.create();
Nutanix_Calm_Utils.prototype = {
    initialize: function() {
        this.logger = new Nutanix_Calm_Logger();
        /*
		How to use alias in script
		1. Add new alias in either of table,api,property
		2. In respective script includes, instantiate Nutanix_Calm_Utils var apputil
		3. Referance specific value as apputil.configuration.&lt;api/table/property&gt;.&lt;key-name&gt;
 		*/
        this.version = gs.getProperty('x_nuta2_nutanix_ca.calm_version');
        this.configuration = {
            "api": {
                "getProjectList": "/projects/list",
                "getBlueprintList": "/blueprints/list",
                "getBlueprintDetail": "/blueprints/",
                "getAppList": "/apps/list",
                "getAppDetail": "/apps/",
                "getMarketplaceItemDetail": "/calm_marketplace_items/",
                "getCategories": "/categories/AppFamily/list",
                "getIcon": "/static/app_icons/",
                "getEnvironment": "/environments/",
                "getUsersList": "/users/list",
                "getRolesList": "/roles/list",
                "projectInternal": "/projects_internal",
                "directoryServices": "/directory_services/list",
                "getMarketplaceItem": "/calm_marketplace_items/list",
                "getGroupsList": "/user_groups/list",
                "proxyLogin": "/proxy_login",
                "getSubnets": "/subnets/list",
				////FEAT-15844 START- VPC Support in Catalogs in Self-Service SNOW Plugin
				"vpc": "/vpcs/",
				"getSubnet": "/subnets/",
				////FEAT-15844 END- VPC Support in Catalogs in Self-Service SNOW Plugin
                "getRunbooksList": "/runbooks/list",
                "getRunbookDetail": "/runbooks/",
                "getEndpointsList": "/endpoints/list"
            },
            "table": {
                "NutanixStagingApplication": "x_nuta2_nutanix_ca_nutanix_staging_application",
                "NutanixCalmAction": "x_nuta2_nutanix_ca_nutanix_calm_action",
                "NutanixCalmApplication": "x_nuta2_nutanix_ca_nutanix_calm_application",
                "ActionWorkflowStaging": "x_nuta2_nutanix_ca_app_action_workflow_trigger",
                "AppDeployment": "x_nuta2_nutanix_ca_application_deployment",
                "Blueprint": "x_nuta2_nutanix_ca_nutanix_blueprint",
                "Project": "x_nuta2_nutanix_ca_nutanix_project",
                "CalmPluginConfig": "x_nuta2_nutanix_ca_calm_plugin_configuration",
                "stagingProject": "x_nuta2_nutanix_ca_nutanix_staging_project",
                "stagingBlueprints": "x_nuta2_nutanix_ca_nutanix_staging_blueprints",
                "processQueue": "x_nuta2_nutanix_ca_nutanix_process_queue",
                "applicationProfiles": "x_nuta2_nutanix_ca_application_profile",
                "varaiblesTable": "item_option_new",
                "variableSetTable": "io_set_item",
                "stagingMarketplaceItem": "x_nuta2_nutanix_ca_nutanix_staging_marketplace_items",
                "catalog": "sc_catalog",
                "category": "sc_category",
                "sysUiAction": "sys_ui_action",
                "catalogProfileRelation": "x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation",
                "variablesProperties": "x_nuta2_nutanix_ca_catalog_variables_properties",
                "catalogUserCriteria": "sc_cat_item_user_criteria_mtom",
                "userCriteria": "user_criteria",
                "catalogProjectRelation": "x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship",
                "Credentials": "x_nuta2_nutanix_ca_nutanix_calm_credential",
                "appRunlogs": "x_nuta2_nutanix_ca_nutanix_calm_app_runlogs",
                "stagingEnvironment": "x_nuta2_nutanix_ca_nutanix_staging_environment",
				"environment": "x_nuta2_nutanix_ca_nutanix_environment",
                "runtimeConfig": "x_nuta2_nutanix_ca_nutanix_runtime_configuration",
                "catalogClientScript": "catalog_script_client",
                "catalogUIPolicy": "catalog_ui_policy",
                "catItem": "sc_cat_item",
                "awsStorage": "x_nuta2_nutanix_ca_nutanix_storage",
                "awsTag": "x_nuta2_nutanix_ca_nutanix_aws_tag_list",
                "StagingGCP": "x_nuta2_nutanix_ca_staging_gcp",
                "blankDisks": "x_nuta2_nutanix_ca_blank_disks",
                "networking": "x_nuta2_nutanix_ca_networking",
                "disks": "x_nuta2_nutanix_ca_disks",
                "stagingAzure": "x_nuta2_nutanix_ca_staging_azure",
                "security": "x_nuta2_nutanix_ca_secret",
                "nw_profiles": "x_nuta2_nutanix_ca_network_profiles",
                "dataDisk": "x_nuta2_nutanix_ca_data_disk",
                "subnet": "x_nuta2_nutanix_ca_subnet",
                "dropDownTable": "x_nuta2_nutanix_ca_generic_table_for_dropdown",
                "recoveryPoints": "x_nuta2_nutanix_ca_restore_points",
                "marketplaceItem": "x_nuta2_nutanix_ca_nutanix_marketplaceitems",
                "NutanixStagingRunbooks": "x_nuta2_nutanix_ca_nutanix_staging_runbooks",
                "Runbooks": "x_nuta2_nutanix_ca_runbooks",
                "Endpoint": "x_nuta2_nutanix_ca_endpoints",
                "NutanixStagingEndPoints": "x_nuta2_nutanix_ca_nutanix_staging_endpoint"
            },
        };
    },
    // Get credentials

    _getApiToken: function() { //Orchestration api token call
        try {
            var credential_alias = "";
            var calmInstanceURL = "";
            var midApplication = "";
            var retries = 0;

            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            if (grConfig.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id') + "")) {
                grConfig.query();
                if (grConfig.next()) {
                    credential_alias = grConfig.credential + "";
                    calmInstanceURL = grConfig.calm_instance + "";
                    midApplication = grConfig.mid_application + "";
                }
            }

            while (retries &lt; 3) {

                var inputs = {};
                inputs['endpoint'] = calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + '/users/me';
                inputs['midapplication'] = midApplication + "";
                inputs['credentialalias'] = credential_alias + "";

                var outputs = sn_fd.FlowAPI.executeAction('x_nuta2_nutanix_ca.nutanix_refresh_token', inputs, 10000);

                var response = outputs['response'] + "";
                var statuscode = outputs['statuscode'] + "";
                var headers = outputs['headers'];

                if (statuscode == '200' || statuscode == '201') {
                    var parse_headers = JSON.parse(headers);
                    var cookie = parse_headers["Set-Cookie"][0];
                    gs.setProperty("x_nuta2_nutanix_ca.nuta_session_token", cookie + "");
                    this.logger.info("Refreshing Nutanix session.");
                    break;
                    //return "200";
                }

                retries++;
            }
            //return "401";
        } catch (err) {
            this.logger.error("Failed getting token. Error: " + err);
        }
    },

    // Use this method to make Calm API client call to the Nutanix for JSON response
    makeCalmApiCall: function(httpMethod, endpoint, body) { //Original makeCalmApiCall
        try {
            var credential_status = "";
            var cookie = "";

            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
            grConfig.query();
            if (grConfig.next()) {
                //this.Catalog = grConfig.service_catalog;
                this.midServer = (grConfig.mid_server) ? grConfig.mid_server.getDisplayValue() + '' : "";
                this.midApplicationServer = (grConfig.mid_application) ? grConfig.mid_application.default_mid_server.name + "" : "";
                this.calmInstanceURL = grConfig.calm_instance + '';
                this.userName = grConfig.calm_admin_username + "";
                this.password = grConfig.calm_admin_password.getDecryptedValue() + "";
                cookie = gs.getProperty("x_nuta2_nutanix_ca.nuta_session_token") + "";
            }

            var endpointURL = this.calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + endpoint;
            //gs.info("Parth endpointURL :" + endpointURL);

            var request = new sn_ws.RESTMessageV2();
            request.setEccParameter('skip_sensor', true);
            request.setRequestHeader("Accept", "application/json");
            request.setRequestHeader("Content-Type", "application/json");

            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "false") {
                request.setBasicAuth(this.userName, this.password);
                if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false") {
                    request.setMIDServer(this.midServer + '');
                }
            } else {
                request.setMIDServer(this.midApplicationServer + "");

                if (cookie + "" == "") {
                    gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                    request.setRequestHeader("Cookie", cookie);
                } else {
                    var preset_cookie = cookie + "";
                    request.setRequestHeader("Cookie", preset_cookie);
                }
            }

            request.setHttpMethod(httpMethod);
            request.setEndpoint(endpointURL);
            if (body)
                request.setRequestBody(body);

            request.disableForcedVariableSubstitution();

            //if(this.midServer.status =='Up' &amp;&amp; this.midServer.validated == 'true') {
            var response = request.execute();
            // var response = request.executeAsync();

            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "true" &amp;&amp; response.getStatusCode() == "401") {
                this.logger.info("Nutanix session has expired.");
                //credential_status = this._getApiToken();
                gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                //if(credential_status != '401')
                return this.makeCalmApiCall(httpMethod, endpoint, body);
            }
            //this.logger.debug(' MID Server '+this.midServer.getDisplayValue()+''+ ' is Up ');
            this.logger.debug("====makeCalmApiCall \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\nrequest body" + JSON.stringify(body) + "\nresponse StatusCode: " + response.getStatusCode() + "\n response body:" + response.getBody());
            return response;
            //} else {
            //this.logger.error(' MID Server '+this.midServer.getDisplayValue()+''+ ' is Down / Not Validated ');
            //return false;
            //}
        } catch (err) {
            this.logger.error("Make Calm API Call [makeCalmApiCall] Error: " + err);
        }
    },
    makeAsyncCalmApiCall: function(httpMethod, endpoint, body) { //Original makeCalmApiCall
        try {
            var credential_status = "";
            var cookie = "";
            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
            grConfig.query();
            if (grConfig.next()) {
                this.midServer = (grConfig.mid_server) ? grConfig.mid_server.getDisplayValue() + '' : "";
                this.midApplicationServer = (grConfig.mid_application) ? grConfig.mid_application.default_mid_server.name + "" : "";
                this.calmInstanceURL = grConfig.calm_instance + '';
                this.userName = grConfig.calm_admin_username + "";
                this.password = grConfig.calm_admin_password.getDecryptedValue() + "";
                cookie = gs.getProperty("x_nuta2_nutanix_ca.nuta_session_token") + "";
            }
            var endpointURL = this.calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + endpoint;
            var request = new sn_ws.RESTMessageV2();
            request.setEccParameter('skip_sensor', true);
            request.setRequestHeader("Accept", "application/json");
            request.setRequestHeader("Content-Type", "application/json");
            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "false") {
                request.setBasicAuth(this.userName, this.password);
                if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false") {
                    request.setMIDServer(this.midServer + '');
                }
            } else {
                request.setMIDServer(this.midApplicationServer + "");
                if (cookie + "" == "") {
                    gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                    request.setRequestHeader("Cookie", cookie);
                } else {
                    var preset_cookie = cookie + "";
                    request.setRequestHeader("Cookie", preset_cookie);
                }
            }
            request.setHttpMethod(httpMethod);
            request.setEndpoint(endpointURL);
            if (body)
                request.setRequestBody(body);

            request.disableForcedVariableSubstitution();

            var response = request.executeAsync();
            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "true" &amp;&amp; response.getStatusCode() == "401") {
                this.logger.info("Nutanix session has expired.");
                gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                return this.makeCalmApiCall(httpMethod, endpoint, body);
            }
            this.logger.debug("makeCalmApiCall \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\nresponse StatusCode: " + response.getStatusCode() + "\n response body:" + response.getBody());

            return response;
        } catch (err) {
            this.logger.error("Make Calm API Call [makeCalmApiCall] Error: " + err);
        }
    },
    //===========================API call to get CALM version=========================//
    makeCalmApiVersionCall: function(httpMethod, endpoint, body) {
        try {
            var cookie = "";
            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
            grConfig.query();
            if (grConfig.next()) {
                this.userName = grConfig.calm_admin_username + ""; //added authentiction check
                this.password = grConfig.calm_admin_password.getDecryptedValue() + "";
                //this.Catalog = grConfig.service_catalog;
                if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "false")
                    this.midServer = grConfig.mid_server;
                else
                    this.midServer = grConfig.mid_application.default_mid_server;

                this.calmInstanceURL = grConfig.calm_instance + '';
            }

            var endpointURL = this.calmInstanceURL + endpoint;

            var request = new sn_ws.RESTMessageV2();
            request.setEccParameter('skip_sensor', true);
            request.setRequestHeader("Accept", "text/html");
            request.setHttpMethod(httpMethod);
            if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false") {
                request.setMIDServer(this.midServer.getDisplayValue() + '');
            }
            request.setEndpoint(endpointURL);
            // 			request.setBasicAuth(this.userName, this.password); //basic Authentication.



            if (gs.getProperty("x_nuta2_nutanix_ca.use_external_credential_system") + "" == "false") {
                request.setBasicAuth(this.userName, this.password); //basic Authentication.
            } else {
                cookie = gs.getProperty("x_nuta2_nutanix_ca.nuta_session_token") + ""; //cookie status
                request.setMIDServer(this.midApplicationServer + "");
                if (cookie + "" == "") {
                    gs.eventQueue("x_nuta2_nutanix_ca.refresh_token", "", "", "");
                    request.setRequestHeader("Cookie", cookie);
                } else {
                    var preset_cookie = cookie + "";
                    request.setRequestHeader("Cookie", preset_cookie);
                }
            }

            if (body)
                request.setRequestBody(body);

            if ((this.midServer.status == 'Up' &amp;&amp; this.midServer.validated == 'true') &amp;&amp; (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false")) {
                var response = request.execute();
				// var response = request.executeAsync();
                this.logger.debug("makeCalmApiVersionCall \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\nresponse StatusCode: " + response.getStatusCode() + "\n response body:" + response.getBody());
                this.logger.debug(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Up ');
                return response;
            }
            if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "true") {
                var response = request.execute();
				// var response = request.executeAsync();
                this.logger.debug("makeCalmApiVersionCall \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\nresponse StatusCode: " + response.getStatusCode() + "\n response body:" + response.getBody());
                return response;
            } else {
                this.logger.error(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Down / Not Validated ');
                return false;
            }

        } catch (err) {
            this.logger.error("Make Calm API Version Call [makeCalmApiVersionCall] Error: " + err);
        }
    },
    //===========================End of API call to get CALM version==================//

    makeProxyCall: function(httpMethod, endpoint, body, userId) { //API Proxy Call
        try {
            var userGr = new GlideRecord('sys_user');
            if (userGr.get(userId)) {
                var proxyURL = this.configuration.api.proxyLogin + '';
                var calmUserName = userGr.email + '';
                calmUserName = calmUserName.toLowerCase() + '';
                var proxyBody = {
                    "proxy_for_username": calmUserName
                };
                var proxyResponse = this.makeCalmApiCall('POST', proxyURL, this.stringify(proxyBody));
            }
            if (proxyResponse.getStatusCode() == '200' || proxyResponse.getStatusCode() == '201') {
                var parsedProxyResp = this.parse(proxyResponse.getBody());
                var sessionId = parsedProxyResp.ntnx_igw_session + '';
                var idExpiresIn = parsedProxyResp.expires + '';
                var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
                grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
                grConfig.query();
                if (grConfig.next()) {
                    this.midServer = (grConfig.mid_server) ? grConfig.mid_server : grConfig.mid_application.default_mid_server;
                    this.calmInstanceURL = grConfig.calm_instance + '';
                }

                var domain = this.calmInstanceURL.replace('https://', '').replace(':9440', '');
                var cookie = 'NTNX_IGW_SESSION=' + sessionId + '; path=/; domain=' + domain + '; Secure; HttpOnly; Expires=' + this.proxyUTCConverter(idExpiresIn) + ';';
                var endpointURL = this.calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + endpoint;

                var proxyRequest = new sn_ws.RESTMessageV2();
                proxyRequest.setEccParameter('skip_sensor', true);
                proxyRequest.setRequestHeader("Accept", "application/json");
                proxyRequest.setRequestHeader("Content-Type", "application/json");
                proxyRequest.setRequestHeader("Cookie", cookie);
                proxyRequest.setHttpMethod(httpMethod);
                if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false") {
                    proxyRequest.setMIDServer(this.midServer.getDisplayValue() + '');
                }
                proxyRequest.setEndpoint(endpointURL);
                if (body)
                    proxyRequest.setRequestBody(body);

                proxyRequest.disableForcedVariableSubstitution();

                if (this.midServer.status == 'Up' &amp;&amp; this.midServer.validated == 'true') {
                    proxyResponse = proxyRequest.execute();
					// proxyResponse = proxyRequest.executeAsync();

                    this.logger.debug("makeProxyCall \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\proxyResponse StatusCode: " + proxyResponse.getStatusCode() + "\n response body:" + proxyResponse.getBody());
                    this.logger.debug(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Up ');
                    return proxyResponse;
                }
                if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "true") {
                    proxyResponse = proxyRequest.execute();
					// proxyResponse = proxyRequest.executeAsync();
                    this.logger.debug("makeProxyCall \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\proxyResponse StatusCode: " + proxyResponse.getStatusCode() + "\n response body:" + proxyResponse.getBody());
                    return proxyResponse;
                } else {
                    this.logger.error(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Down / Not Validated ');
                    return false;
                }

            }
            if (proxyResponse.getStatusCode() == '403') {
                return this.makeCalmApiCall(httpMethod, endpoint, body);
            } else {
                this.logger.error("Error in makeProxyCall API Call [makeProxyCall] Error: " + proxyResponse.getBody());
            }
        } catch (err) {
            this.logger.error("Make Proxy API Call [makeProxyCall] Error: " + err);
        }
    },

    makeIntermediateApiCall: function(httpMethod, endpoint, body, userId) { //API intermediate Proxy Call

        var local_groups_flag = "";
        var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
        grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
        grConfig.query();
        if (grConfig.next()) {
            local_groups_flag = grConfig.use_local_groups + "";
        }

        if (!this.versionNewCheck() || local_groups_flag == "true") {
            return this.makeCalmApiCall(httpMethod, endpoint, body);
        } else {

            var grUser = new GlideRecord('sys_user_has_role');
            grUser.addEncodedQuery('role.name=x_nuta2_nutanix_ca.calm_admin^ORrole.name=admin^user=' + userId);

            grUser.query();

            if (grUser.next()) //user_name.hasRole("x_nuta2_nutanix_ca.calm_admin")) 
            {
                return this.makeCalmApiCall(httpMethod, endpoint, body);
            } else {
                return this.makeProxyCall(httpMethod, endpoint, body, userId);
            }
        }
    },

    makeCalmApiCallForIcon: function(httpMethod, endpoint, body, sysId) {
        try {
            var grConfig = new GlideRecord(this.configuration.table.CalmPluginConfig);
            grConfig.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
            grConfig.query();
            if (grConfig.next()) {
                //this.Catalog = grConfig.service_catalog;
                this.midServer = grConfig.mid_server;
                this.calmInstanceURL = grConfig.calm_instance + '';
                this.userName = grConfig.calm_admin_username + '';
                this.password = grConfig.calm_admin_password.getDecryptedValue() + '';
            }

            var endpointURL = this.calmInstanceURL + gs.getProperty('x_nuta2_nutanix_ca.API_Prefix') + endpoint;
            var tablename = 'sc_cat_item';
            var recordSysId = sysId;
            var filename = 'picture';
            var request = new sn_ws.RESTMessageV2();
            request.setEccParameter('skip_sensor', true);
            request.setBasicAuth(this.userName, this.password);
            request.setHttpMethod(httpMethod);
            if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "false") {
                request.setMIDServer(this.midServer.getDisplayValue() + '');
            }
            request.setEndpoint(endpointURL);
            request.saveResponseBodyAsAttachment(tablename, recordSysId, filename);
            if (body)
                request.setRequestBody(body);

            request.disableForcedVariableSubstitution();

            if (this.midServer.status == 'Up' &amp;&amp; this.midServer.validated == 'true') {
                var response = request.execute();
				// var response = request.executeAsync();
                this.logger.debug("makeCalmApiCallForIcon \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\nresponse StatusCode: " + response.getStatusCode() + "\n response body:" + response.getBody());
                this.logger.debug(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Up ');
                return response;
            }
            if (gs.getProperty("x_nuta2_nutanix_ca.Calm_SaaS_and_ServiceNow") + "" == "true") {
                var response = request.execute();
				// var response = request.executeAsync();
                this.logger.debug("makeCalmApiCallForIcon \nhttpMethod: " + httpMethod + "\nendpointURL:" + endpointURL + "\nresponse StatusCode: " + response.getStatusCode() + "\n response body:" + response.getBody())
                return response;
            } else {
                this.logger.error(' MID Server ' + this.midServer.getDisplayValue() + '' + ' is Down / Not Validated ');
                return false;
            }
        } catch (err) {
            this.logger.error("Make API Call [makeCalmApiCallForIcon] Error: " + err);
        }
    },

    ///changes

    generateRequestBody: function(name, version, presetOffset, pageBreaker) {

        if (!this.versionNewCheck()) {
            var responseBody = "";
            switch (name) {

                case "startImportMPI":
                    responseBody = {
                        "kind": "marketplace_item",
                        "offset": 0,
                        "length": 1
                    };
                    return responseBody;

                case "importMPIData":
                    responseBody = {
                        "kind": "marketplace_item",
                        "offset": presetOffset,
                        "length": pageBreaker
                    };
                    return responseBody;

                default:
                    this.logger.error("Inside Nutanix_Calm_Utils.generateRequestBody :: " + name + " not found");
            }
        } else {
            var responseBody = "";
            switch (name) {

                case "startImportMPI":
                    responseBody = {
                        "kind": "marketplace_item",
                        "offset": 0,
                        "filter": "app_state==PUBLISHED",
                        "length": 1
                    };
                    return responseBody;

                case "importMPIData":
                    responseBody = {
                        "kind": "marketplace_item",
                        "offset": presetOffset,
                        "filter": "app_state==PUBLISHED",
                        "length": pageBreaker
                    };
                    return responseBody;

                default:
                    this.logger.error("Inside Nutanix_Calm_Utils.generateRequestBody :: " + name + " not found");
            }
        }
    },

    ///
    //Show/Hide 'Sync' ui action on authentication success or failure
    showHideSyncUiAction: function(SyncStatus) {
        try {
            var grAction = new GlideRecord(this.configuration.table.sysUiAction);
            grAction.addQuery('action_name', 'nutanix_sync');
            grAction.query();
            if (grAction.next()) {
                grAction.form_button = SyncStatus;
                grAction.update();
            }
        } catch (e) {
            this.logger.error("Inside Nutanix_Calm_Utils.showHideSyncUiAction Error: " + e);
        }

    },

    //Show/Hide 'Save Properties' ui action on MID Server Down/not validated
    showHideSaveUiAction: function(SaveStatus) {
        try {
            var grAction = new GlideRecord(this.configuration.table.sysUiAction);
            grAction.addQuery('action_name', 'save_properties');
            grAction.query();
            if (grAction.next()) {
                grAction.form_button = SaveStatus;
                grAction.update();
            }
        } catch (e) {
            this.logger.error("Inside Nutanix_Calm_Utils.showHideSaveUiAction Error: " + e);
        }

    },


    updateCatalogName: function(name) {
        var gr = new GlideRecord(this.configuration.table.catalog);
        gr.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId') + '');
        gr.query();
        if (gr.next()) {
            gr.title = name + '';
            gr.update();
        } else {
            gr.initialize();
            gr.title = name;
            //gr.desktop_image = '';   //Image needed to be added.
            gr.insert();
        }
    },

    //('importApplications', 'POST', '/apps/list', 'payload');
    insertIntoQueue: function(topic, method, parameter, payload, process, desc) {
        var gr = new GlideRecord(this.configuration.table.processQueue);
        gr.initialize();
        gr.topic = topic + '';
        gr.method = method + '';
        gr.parameter = parameter + '';
        gr.payload = payload + '';
        gr.process_name = process + '';
        gr.description = desc + '';
        gr.state = "ready";
        gr.insert();
    },

    // Inserts app run logs into App Runlogs table
    insertAppRunlogs: function(parsedJson) {
        try {
            var grRunlogs = new GlideRecord(this.configuration.table.appRunlogs);
            grRunlogs.initialize();

            //grRunlogs.name = parsedJson.status.action_reference.name;
            var action_name_vars = ['action_install_ngt', 'action_manage_ngt', 'action_uninstall_ngt', 'action_update'];
            var action_name = parsedJson.status.action_reference.name + '';
            if (action_name_vars.indexOf(action_name) != -1) {
                var action_name_json = {
                    'action_install_ngt': 'Install NGT',
                    'action_manage_ngt': 'Manage NGT',
                    'action_uninstall_ngt': 'Uninstall NGT',
                    'action_update': 'App Edit'
                };
                action_name = action_name_json[action_name];
            } else {
                var aname = action_name.replace('action_', '').replace('_', ' ');
                aname = aname.split(" ");
                for (var j = 0, x = aname.length; j &lt; x; j++) {
                    aname[j] = aname[j][0].toUpperCase() + aname[j].substr(1);
                }
                action_name = aname.join(" ");
            }
            grRunlogs.name = action_name + '';

            grRunlogs.uuid = parsedJson.metadata.uuid;
            grRunlogs.description = parsedJson.status.description;
            grRunlogs.app_uuid = parsedJson.status.application_reference.uuid;
            grRunlogs.app_name = parsedJson.status.application_reference.name;
            grRunlogs.is_runlog_archived = parsedJson.status.is_runlog_archived;
            grRunlogs.is_critical = parsedJson.status.is_critical;
            grRunlogs.state_reason = (parsedJson.status.reason_list).toString(); //stringify
            gs.addErrorMessage("Prince Arora");
            grRunlogs.state = parsedJson.status.state;
            grRunlogs.type = parsedJson.status.type;
            grRunlogs.kind = parsedJson.metadata.kind;
            grRunlogs.last_update_time = this.calmDateConvertor(parsedJson.metadata.last_update_time);
            grRunlogs.creation_time = this.calmDateConvertor(parsedJson.metadata.creation_time);
            grRunlogs.insert();

        } catch (e) {
            this.logger.error("Error occured while inserting app run logs, Nutanix_Calm_Utils.insertAppRunlogs: " + e);
        }
    },

    // Calm "last_update_time", "creation_time" date convertor specific to SNOW datetime format
    calmDateConvertor: function(getdate) {
        try {
            var date = new Date(getdate / 1000);
            var year = date.getUTCFullYear();
            var month = date.getUTCMonth() + 1; // getMonth() is zero-indexed, so we'll increment to get the correct month number
            var day = date.getUTCDate();
            var hours = date.getUTCHours();
            var minutes = date.getUTCMinutes();
            var seconds = date.getUTCSeconds();
            var lastUpdate = year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;
            return lastUpdate;
        } catch (e) {
            this.logger.error("Error occured inside Nutanix_Calm_Utils.calmDateConvertor: " + e);
        }
    },

    parse: function(str) {
        if (str)
            return JSON.parse(str);

        return '';
    },

    stringify: function(str) {
        if (str)
            return JSON.stringify(str);

        return '';
    },

    proxyUTCConverter: function(timeStamp) {
        var d = new Date(timeStamp * 1000);
        return d.toGMTString();
    },

    markdown_renderer: function(markdown_string) {
        try {

            if (markdown_string == '')
                return '';

            x_nuta2_nutanix_ca.Markdown_lib;
            var converter = new showdown.Converter();
            var html_string = converter.makeHtml(markdown_string);
            var markdown_desc = (html_string + '').replace(/(&lt;h[1-9])/g, '&lt;strong').replace(/(&lt;\/h[1-9]&gt;)/g, '&lt;/strong&gt;').replace(/&lt;ul&gt;/g, '&lt;ul style="list-style-position: inside;"&gt;');

            return markdown_desc;
        } catch (e) {
            this.logger.error(e);
        }
    },

    versionNewCheck: function() {
        var old_version_array = ["2.4", "2.5", "2.6"];

        if (old_version_array.indexOf(this.version + "") == -1)
            return true;
        else
            return false;

    },

    _createMacroArray: function(macro_string) {

        var split_macros = macro_string.split("@@{");
        var macro_array = [];
        for (var i = 0; i &lt; split_macros.length; i++) {
            if (split_macros[i].indexOf("}@@") != -1)
                macro_array.push(split_macros[i].split("}@@")[0] + "");
        }

        return macro_array;
    },

    getMacroDependencies: function(field) {

        try {
            //gs.info("Parth field1 :" + field);
            var field_json = (field) ? JSON.parse(field) : {};
            var dep_json = {};
            var all_dep = [];

            var type = field_json.type + "";
            if (type == "EXEC_LOCAL" || type == "EXEC_SECRET") {
                var attrs = field_json.options.attrs;
                dep_json.script = {
                    "dependencies": this._createMacroArray(attrs.script + ""),
                    "value": attrs.script
                };
                dep_json.all_dep = dep_json.script.dependencies;
            } else if (type == "HTTP_LOCAL" || type == "HTTP_SECRET") {
                var supported_fields = {
                    "content_type": "",
                    "url": "",
                    "request_body": ""
                };
                var attrs = field_json.options.attrs;

                for (var i in supported_fields) {
                    dep_json[i] = {
                        "dependencies": this._createMacroArray(attrs[i] + ""),
                        "value": attrs[i]
                    };
                    all_dep = all_dep.concat(dep_json[i].dependencies);
                }
                dep_json.response_paths = {
                    "dependencies": this._createMacroArray(JSON.stringify(attrs.response_paths)),
                    "value": attrs.response_paths
                };
                dep_json.all_dep = all_dep.concat(dep_json.response_paths.dependencies);
            } else if (field_json.data_type + "" == "LIST_SINGLE" || field_json.data_type + "" == "LIST") {

                var choice_arr = field_json.options.choices.toString();
                dep_json["local"] = {
                    "dependencies": this._createMacroArray(choice_arr + ""),
                    "value": field_json.value + ""
                };
                dep_json.all_dep = dep_json.local.dependencies;

            } else {
                //gs.info("Parth field2 :" + field);
                dep_json["local"] = {
                    "dependencies": this._createMacroArray(field_json.value + ""),
                    "value": field_json.value + ""
                };
                dep_json.all_dep = dep_json.local.dependencies;
            }

            return dep_json;
        } catch (e) {
            gs.info(e);
        }
    },

    createPreMap: function(field, type) {

        try {
            var pre_array = [];

            if (type == "LOCAL" || type == "SECRET" || type == "PREDEFINED")
                return field.local.dependencies;

            if (type == "EXEC_LOCAL" || type == "EXEC_SECRET") {
                return field.script.dependencies;
            }

            if (type == "HTTP_LOCAL" || type == "HTTP_SECRET") {
                var supported_fields = {
                    "content_type": "",
                    "url": "",
                    "request_body": "",
                    "response_paths": ""
                };
                for (var i in supported_fields) {
                    var sup_array = field[i].dependencies;
                    for (var j = 0; j &lt; sup_array.length; j++) {
                        if (pre_array.indexOf(sup_array[j]) == -1)
                            pre_array.push(sup_array[j]);
                    }
                }
                return pre_array;
            }
        } catch (e) {
            gs.error(type);
        }
    },

    createDependencyMap: function(var_array) {
        var arr = JSON.stringify(var_array);
        arr = JSON.parse(arr);
        return this._tsort(arr);
    },

    _tsort: function(map) {

        var error_map = {};

        function tsort(edges) {
            var nodes = {},
                sorted = [],
                visited = {};

            var Node = function Node(id) {
                this.id = id;
                this.afters = [];
            };

            edges.forEach(function(v) {
                var from = v[0],
                    to = v[1];
                if (!nodes[from]) nodes[from] = new Node(from);
                if (!nodes[to]) nodes[to] = new Node(to);
                nodes[from].afters.push(to);
            });
            Object.keys(nodes).forEach(function visit(idstr, ancestors) {
                var node = nodes[idstr],
                    id = node.id;
                if (visited[idstr]) return;
                if (!Array.isArray(ancestors)) ancestors = [];
                ancestors.push(id);
                visited[idstr] = true;
                node.afters.forEach(function(afterID) {
                    if (ancestors.indexOf(afterID) &gt;= 0) error_map[afterID] = id;
                    visit(afterID.toString(), ancestors.map(function(v) {
                        return v;
                    }));
                });
                sorted.unshift(id);
            });
            return sorted;
        }

        var createEdges = function createEdges(dep) {
            var result = [];
            Object.keys(dep).forEach(function(key) {
                dep[key].forEach(function(n) {
                    result.push([n, key]);
                });
            });
            return result;
        };

        var list = createEdges(map);

        var sorted_array = tsort(list);

        for (var i in map) {
            if (!map[i].length &amp;&amp; sorted_array.indexOf(i) == -1)
                sorted_array.unshift(i);
        }

        return {
            "Dep_array": sorted_array,
            "error_map": error_map
        };
    },

    _tsort2: function(map) {
        var error = "";

        function topologicalSortHelper(node, visited, temp, graph, result) {
            temp[node] = true;

            var neighbors = graph[node];

            for (var i = 0; i &lt; neighbors.length; i += 1) {

                var n = neighbors[i];

                if (temp[n]) {
                    error = 'Circular dependency detected for variable: ' + n;
                    this.logger.error(error);
                    return;
                }

                if (!visited[n]) {

                    topologicalSortHelper(n, visited, temp, graph, result);

                }

            }

            temp[node] = false;

            visited[node] = true;

            result.push(node);

        }

        function topsort(graph) {

            var result = [];
            var visited = [];

            var temp = [];

            for (var node in graph) {

                if (!visited[node] &amp;&amp; !temp[node]) {

                    topologicalSortHelper(node, visited, temp, graph, result);

                }

            }

            return result;

        }

        return {
            "Dep_array": topsort(map),
            "error_map": [error]
        };
    },

    checkForShowbackStatus: function() {
        try {
            var getResponse = this.makeCalmApiCall("GET", "/app_showback/status", "");
            if (getResponse.getStatusCode() + "" == "200") {
                var jsonParse = JSON.parse(getResponse.getBody());
                if (jsonParse.current_status + "" == "enabled") {
                    return true;
                } else {
                    return false;
                }
            } else {
                this.logger.error("Inside Nutanix_Calm_Utils.checkForShowbackStatus : Error during retrieval of checkForShowbackStatus Error: " + getResponse.getBody() + " Status code :: " + getResponse.getStatusCode());
            }
        } catch (e) {
            this.logger.error("Exception Inside Nutanix_Calm_Utils.checkForShowbackStatus : Error during retrieval of checkForShowbackStatus Error: " + e);
        }
    },

    calculatePriceForInventory: function(parsedJson, param) { ///app_showback/status
        try {
            if (this.checkForShowbackStatus()) {
                var endPoint;
                if (param == "applications")
                    endPoint = "/apps/consumption_list";
                else
                    endPoint = "/projects/consumption_list";
                parsedJson = JSON.parse(parsedJson).entities;
                var jsonEntity = {};
                var entity_ids = [];
                for (var p = 0; p &lt; parsedJson.length; p++) {
                    entity_ids.push(parsedJson[p].metadata.uuid + "");
                    jsonEntity[parsedJson[p].metadata.uuid + ""] = parseFloat("0");
                }

                var body = new Object();
                body.time_unit = "month";
                var filter = {
                    "entity_ids": entity_ids
                };
                body.filters = filter;
                var getResponse = this.makeCalmApiCall("POST", endPoint, JSON.stringify(body));
                if (getResponse.getStatusCode() == '200' || getResponse.getStatusCode() == '201') {
                    var parsedgetResponse = JSON.parse(getResponse.getBody());

                    for (var j = 0; j &lt; parsedgetResponse.data.items.length; j++) {
                        for (var k = 0; k &lt; parsedgetResponse.data.items[j].data.length; k++) {
                            jsonEntity[parsedgetResponse.data.items[j].data[k].key + ""] = parseFloat(jsonEntity[parsedgetResponse.data.items[j].data[k].key + ""] + parsedgetResponse.data.items[j].data[k].value + "");
                        }
                    }
                } else {
                    this.logger.error("Inside Nutanix_Calm_Utils.calculatePriceForInventory : Error during retrieval of consumtion price Error: " + getResponse.getBody() + " Status code :: " + getResponse.getStatusCode());
                    return false;
                }
                return JSON.stringify(jsonEntity);
            } else {
                this.logger.error("Showback feature is not enabled at configured CALM PC, please enable the showback and try again later..");
                return false;
            }
        } catch (e) {
            this.logger.error("Exception Inside Nutanix_Calm_Utils.calculatePriceForInventory : Error during retrieval of consumtion price Error: " + e);
        }
    },

    migrateV1_4_3: function() {
        try {
            var delete_blueprint = {};
            var str = [];
            var answer = '';

            var blueprint = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
            blueprint.addQuery('state', 'ACTIVE');
            blueprint.query();
            while (blueprint.next()) {
                var final_var_list = [];
                var response = this.makeCalmApiCall("get", '/blueprints/' + blueprint.uuid, "");
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                    var app_profile_list = JSON.parse(response.getBody()).spec.resources.app_profile_list;
                    if (app_profile_list.length &lt; 1)
                        continue;

                    for (var i in app_profile_list) {
                        var variable_list = app_profile_list[i].variable_list;
                        if (variable_list.length &lt; 1)
                            continue;

                        for (var j in variable_list) {
                            var var_index = final_var_list.indexOf(variable_list[j].name);
                            (var_index == -1) ? final_var_list.push(variable_list[j].name): delete_blueprint[blueprint.name] = {
                                "sys_id": blueprint.sys_id + '',
                                "variables": variable_list[j].name + ''
                            };
                        }
                    }
                }
            }
            gs.info("V1_4_3 migration , blueprint to be deleted : " + JSON.stringify(delete_blueprint));


            var delete_mpi = {};
            var mpi = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
            mpi.addQuery('state', 'active');
            mpi.query();
            while (mpi.next()) {
                var final_var_list = [];
                var response = this.makeCalmApiCall("get", '/calm_marketplace_items/' + mpi.uuid, "");
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                    response = JSON.parse(response.getBody());
                    var app_profile = (response.status.resources.app_blueprint_template.status.resources.app_profile_list);
                    if (app_profile.length &lt; 1)
                        continue;
                    for (var i in app_profile) {
                        var variable_list = app_profile[i].variable_list;
                        if (variable_list.length &lt; 1)
                            continue;
                        for (var j in variable_list) {
                            var var_index = final_var_list.indexOf(variable_list[j].name);
                            (var_index == -1) ? final_var_list.push(variable_list[j].name): delete_mpi[mpi.name + " " + mpi.version] = {
                                "sys_id": mpi.sys_id + '',
                                "variables": variable_list[j].name + ''
                            };
                        }
                    }
                }

            }
            gs.info("V1_4_3 migration, MPI to be deleted : : " + JSON.stringify(delete_mpi));

            var str = [];
            for (var z in delete_blueprint) {

                var count = 0;
                var cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
                cat_item.addQuery('blueprint', delete_blueprint[z].sys_id);
                cat_item.query();

                while (cat_item.next()) {
                    count++;
                    cat_item.state = 'deleted';
                    cat_item.update();
                    var catItem = cat_item.item_name.getRefRecord();
                    catItem.active = false;
                    catItem.update();
                    gs.info(" Deactivated catalog " + cat_item.item_name.name + " in V1_4_3 migration ");
                }

                var variable = new GlideRecord('item_option_new');
                variable.addQuery('cat_item', delete_blueprint[z].sys_id + '');
                variable.query();
                while (variable.next()) {
                    var column_fields = {};
                    column_fields.cat_item = "";
                    var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(variable.sys_id, column_fields, 'update');
                }
                var variables_properties = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                variables_properties.addQuery('catalog_item', delete_blueprint[z].sys_id + '');
                variables_properties.query();
                while (variables_properties.next()) {
                    variables_properties.deleteRecord();
                }
                if (count &gt; 0)
                    str.push(z);
                gs.info("Blueprint " + z + " is migrated to V1.4.3");
            }
            for (var k in delete_mpi) {
                var count = 0;
                var cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
                cat_item.addQuery('blueprint', delete_mpi[k].sys_id + '');
                cat_item.query();

                while (cat_item.next()) {
                    count++;
                    cat_item.state = 'deleted';
                    cat_item.update();
					if(cat_item.item_name.getRefRecord()){
                    var catItem = cat_item.item_name.getRefRecord();
                    catItem.active = false;
                    catItem.update();
                    gs.info(" Deactivated catalog " + cat_item.item_name.name + " in V1_4_3 migration ");
                }
				}
                var mpi = new GlideRecord('item_option_new');
                mpi.addQuery('cat_item', delete_mpi[k].sys_id + '');
                mpi.query();
                while (mpi.next()) {
                    var column_fields = {};
                    column_fields.cat_item = "";
                    var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(mpi.sys_id, column_fields, 'update');
                }
                var variables_properties = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                variables_properties.addQuery('catalog_item', delete_mpi[k].sys_id + '');
                variables_properties.query();
                while (variables_properties.next()) {
                    variables_properties.deleteRecord();
                }
                if (count &gt; 0)
                    str.push(k);
                gs.info("MPI " + k + " is migrated to V1.4.3")
            }
            gs.info(str);


            gs.setProperty('x_nuta2_nutanix_ca.1_4_3', "1");
            str.length &gt; 0 ? gs.setProperty('x_nuta2_nutanix_ca.1_4_3_bp', str) : '';

            var var_property = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            var_property.addEncodedQuery('isprofilevariable=true');
            var_property.query();
            while (var_property.next()) {

                var column_fields = {};

                column_fields.description = var_property.uuid;
                var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(var_property.getValue('variable'), column_fields, 'update');
            }
            this.insertIntoQueue('startInventorySync', '', '', '', 'Start inventory sync', 'This process is invoking the import of all the inventories.');
        } catch (err) {
            gs.error("V1_4_3 migration ," + err);
        }
    },

    type: 'Nutanix_Calm_Utils'


};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;mumtaz.ansari&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-09 13:20:11&lt;/sys_created_on&gt;&lt;sys_id&gt;cc07c62137412300d27b8cf6c3990e83&lt;/sys_id&gt;&lt;sys_mod_count&gt;390&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_Calm_Utils&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_cc07c62137412300d27b8cf6c3990e83&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;subuhee.fathima&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-05-21 05:48:05&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>282882117</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>56ab0533c3d4569064971612b4013151</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c31350000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Nutanix_Calm_Utils</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>be647a296c5a0a500a29a88a9d25aa19</update_guid>
<update_guid_history>be647a296c5a0a500a29a88a9d25aa19:282882117,d37d9ca7fc8e0e10c2cc5c99e4a0f2b2:-687418694,2c25d19d550a02109036e5a7004ba721:-1242313645,dab459d57f0a021011d211ecbadb304f:1992506977,28ea1ef4c08e8e500d98dd22160e4260:822321046,0c8a5ef4ac8e8e50ea6bef32dce8f9b1:930739221,ff275638e6ca8e500e228b1f0a78d2bd:867194874,c8c6df62e69ff550f230cdd39871a4a2:-1669312159,9b8160e36db5b1101e9bf60a5683384c:1019527348,1634d497c4cc71104c701629da7f3c8b:1255278913,a980bcedd46b6110f988197e51424a5c:-72162960,abd404b1829365104a7dd5ed83d59e30:2129866337,6e0d9c4c7c003110b08e95db847123b4:-349007523,fd4c1c4c33003110fd594572d80c6a79:1737038986,a980bcedd46b6110f988197e51424a5c:-72162960,a3922b770557ed104b6389f292f16b82:1737038986,65006fbbbf17ed105b3dfcd40de74c0c:-1246400095,5eded77b9317ed10a8b8e8723d39fff7:-1344627939,b6cc5f7b86d3ed1069b00150fcbcde1e:494492135,7e7c9bf37a17ed10d75b5255388544f5:-1100171837,1bc9177bebd3ed106e2843bb70922d05:1907420166,cb395b7725d3ed10a8536c8dbba6702c:-300694791,b4a81f7702d3ed104aa42d4210bcf5f6:581360574,a16653372fd3ed10a9c9dc12c57bea8d:-403663239,f2afbef3d253ed10e9f4410d632f0fa2:581360574,7e6f36774c53ed10d3438a73b68d591d:1750195738,abd404b1829365104a7dd5ed83d59e30:2129866337,a2a30c7d1d536510ee576ea2477640ff:-780660945,1b23c0f9b1536510b4f4616689a2b8b4:-349007523,f0f1c0b5ac53651075a613ad5dc17227:843200360,8ef2372168df251072ac4b4e4334ed79:-1759317189,23bfa76d89df25106998fb4b78e0dff7:-580444337,cead1701da6b2910162224eb305bd2e2:1737038986,ef5599b0f6394110f58e695609287834:-349007523,8be634abcb0523002962446fea483e73:-617809692,2a56b0ab9e0523008e8d4ba31010995c:718925376,7eaba8e3c4052300d238013ffb647002:1003504369,02b23f9ffb412300f840e6c9a2eaae15:1471106428,0092fb9f704123002c128187d875e2e8:1312140642,d100c18292eda110a9bf7d86d51cf156:-855511599,ef5599b0f6394110f58e695609287834:-349007523,78a0bf5fa9412300bbd493677413a326:-383440449,3b7eeb1ff0412300e9a4798c23f70661:-648995161,fa3ea75b8d412300edd20469b7ccbf1b:51835091,1f89b221e16d61104897ab92af1350ff:-855511599,ef5599b0f6394110f58e695609287834:-349007523,6bac635b50412300bdadf0aec5163f6a:1091477255,3b8299c059e9e910fb6e410df9e45021:-855511599,ef5599b0f6394110f58e695609287834:-349007523,853a7350d875011009237e9ddfa47ba6:1484506249,e66b2df78f250110111451c5ba604c0e:1484506249,90f1caa1b4810110011fb09c99c5e399:-134279419,465eb1ed6d4101109b26406209ac70e6:-1590499635,df5b6370e60d011067dcc8fc63200aeb:-1384812348,4ee9affc44c90110d4914bc9e8fccb6b:189988848,f010db7819490110fb140b566497494d:1931237195,544b0738f0490110fb101f4258873b14:-1799820253,d326f2b42a8501103ee9ece263990545:-639920381,12b722b878450110474830c372a620a2:195611727,71ad9614e5f80510c58a895df5800d44:-1991315004,355a9a501af805100dfa6e350f65051d:-1363041168,93673544a87c811012a6b7f623ff5a54:-660863414,4102bd8ce3b8811015d58ccee95d3faa:1667376610,a9c34dc0fc348110ec223a44942f575b:1918418910,56a2543784e80110f4daff106c38d987:2006848122,6322d43babac01108cef4877761abb3c:-1201456184,2a6cfb6f856401107245790bf7154011:471048034,55a3bd7a0ea8c110987876faed86cdff:-695600862,9717213acea8c1104811aa50978bb9b6:-1523731308,c9d2697a2964c11020da3f2bc0fca082:-2144914685,77e02d7ab364c110107f4130c7429d27:768971736,7f7c55b670a0c1109085fcbcda67d42f:369179283,2337dd7a9e2c8110ee1ecd1ceb3c85d8:-1126508926,5c279dfa1ce8811070e114d541332e3f:604603457,1492d9b6f6288110ce11a777c3ab2bdc:1091209402,e2c4484dc3900110db6ed8859e8c7768:-974771789,09423d247b7330109b9bcd0267125034:1811889491,63e3fe10d6a3301083bfe974d96e57fb:-1070643101,91c45b1785b2701031d2b00ba1c39f79:1448160998,ac12bedfdf327010a0ec378d8f9e3842:-989489775,da4abfb7d835701075bedf1c3ee15102:-1380172849,d33c8bbf39313010aec78ea3cdb1c3ac:-1508525215,fa42d353217530100ca9c36636ac0c24:-1380172849,1e3e3c139071301060516879e6eb2697:-1928159377,922a6cfc37f130102cb7d8ec6f34bdcb:-725408461,9778ffda758130109a7c3a28fbe3754b:-789324133,28e63b9a33813010c684bc979e622de0:1640382956,b2e3ff1641813010170c00c8f9482982:-1921663936,1ddc2f16c401301097a5fda0e1a15bb4:-1192223594,c7b49d50dbc530103e7bf965e8ef52f3:-272997184,295f495cfe853010da1549ce73c57e4f:806481855,f618e49b57b07010187a8a4d34e7bcb7:2031540582,10b783fafbb03010e47cc9a2e1248679:-252922017,4cc34b7a42b03010cee41848b84a0315:-671080337,44330b366ab030103a899c26f19b0a82:-993236100,f77a327296b03010204a837a03a7fc44:874157611,a8c9f27ec47030108bea7e3973aa1908:1041355917,45f8bebe10703010d8ff37642b4512be:-1001872326,53883efa3c703010b53c7cfaba2e032e:-116766160,4997ba7a56703010cb6bfb305cf0f861:1743540753,7a04f6f66770301096d50bb367e120a6:400561248,d261b6f66370301071311a060d4c7f9a:248151933,cbd2dd0a42287c107ce5dbfa6d6bfdff:521784103,56c949c280287c1074a498639bfd5f30:1758308741,910a5f9c12a0b410a802140ffbe504f0:-1292568129,2e3d0354c4a0b410fedc42a8c8487282:-894564608,e2d39f0003e47410c16f46ee79f56fe9:-1343060169,6fc9664c53e074109a7938fa2a1a03f2:-864380277,2b1c4fd230213010a081fa88501e42e7:1216488432,0ba88a8aa6d53010b94297b56d813747:-385514916,049b04382f553010473ece7f66028198:-1632598290,f32ec32ca711301063c2fc2864bd9336:1803006346,1dcd0fe8d8113010154ac70ca3564287:-91467592,9de595151ee7a8505347a3f199717e4c:1991498067,23451e0d1fab685032e2366996d61330:-1359795341,07141689e7ab685095ad1318ca4808a4:-1385154366,b0c30a09ce2b685066c2f7d5b1a42a11:-1916675437,f0ef75c1622b685065e3160536d33cb2:-2106372668,224f3981632b6850c02c833327e244e5:-629982135,a43dbd01262b6850bd2218c44f87bbec:-795623122,806b3d4d96e768501368abc37619395f:897437648,38bc3760d6afe450a2d271bfad8dd0f9:-559306764,d94ab4af5ddbe050e26c2dc61e953c66:1065383329,8a8008a38a1be050b61660fbc7c4789b:995871067,059bff9fdbd7e050dba7cc0fbec7bdf1:-1074102222,162bffdb72d7e05091d122298845fbb1:-807041294,f1a60cd1329b6c1038865661009aa206:670733650,57cf3f4df45b6c10350126492e79719d:1748392096,e89cf30d105b6c10387793fb7958c3f0:-1718538466,39c97309285b6c1068d9502b89716476:9683510,ed13449514536450a3a3946e8b492b62:-625154092,32260bc9b75f24105916309bcf972ab1:-1718538466,98fdf6895f5f2410eb012f80f603cb48:1142123488,64a9bc208717a010b2bcff37c99b18d3:1500248117,e7612b50a2cfac1042622df762ae411c:433819442,25ac16c0d44f6c104378d93fa48dd49b:1261537780,3cae7478081fe05040def7fb88c0b674:372130242,19f4c6ac6b17e0504d37b76081a745e6:-760913758,57289782b5032c105c060ff3e73cf32a:1470504511,ff6c692da74f6810d4a0459a4ac89959:9683510,904721e58e4f6810fa7abb18b9ca0c54:-1924842460,a763d7141347a4108c5baad1ce0122ec:-1221580520,b9c1b8d8510764108e60fceab68f1a76:1201879943,5629824f6d2ea410fb8b80c0d7daefa9:-580514552,e4f7028b5b2ea4102f366f2ed3a2f388:-1308439452,40d4028b1e2ea4102c6c6d6df3562682:-419389598,90f3064ba52ea4106ad9c61071e8ce2b:-138399324,a183420b382ea4109be9398356ce9931:-1101507772,cb434ac7502ea4107a7decb3a75e19c1:2118783886,7e92020b742ea410d6eb30a7bc59c0ef:-517713638,47f1c6c7cd2ea410ed4ca53826443c98:-1167147846,c1f904c3fba6a4105a2f971cb9974bca:31064640,922900439aa6a41037809b8f1ea161fb:-2076634797,b948844319a6a410e727e195e4f1cbe6:-1986833347,0589fabe0d22a410eeefdca56dd71236:274081148,b784f63a7422a41025486df3e759438c:1095628317,45d3363a8b22a41096d36d392a50e085:519817271,5460faf24c22a4104320798e1a00c746:1757579613,47ccaa328222a410500dee141c329cc1:-2044115447,0ca2c08f1f2260103ebc7a74de47bfc4:-602151229,69fe76baaa6a201048e556890250f36f:844487474,b71a853e3d82e410ad7b9df8768b2e96:-1308439452,3ca3013ac382e410a67872e29b291587:-184484956,81a1fcba7c42e4103fef008e496072c6:-1859996223,7d9ca4763d42e4109cb9619a27ce7eeb:-700746788,edc15fca180a6410531c73723450582b:-1537827042,37b60b0633c66410ff4a70a3074ebb8b:-844126338,f71d5b78008a28505383ea8e2bfa6967:-1629203490,6e0d5b78308a2850e6b7f1d33d266360:-1303240130,74e8073c6f4a28501db68eea3bd3353c:-1656482562,c57f71fc37822850c5e3323d1b83d7f7:618512356,467a317c9042285086754e058e802eb1:2038663202,dc9b3d1895c62450269f5605485e5ba0:2068391738,8f2eac98e7c22450e2c706a48984e05b:381450646,37d8e45070c2245012de7f6602af0082:1072730093,8b04a81480c224507b89c3f7faa1d6ff:1526717229,3acedc1098c22450e0712ead4fc7fa29:1386446374,7e6e181075c22450aca7fad2f0b7a25c:819833986,572d18dc258224506de2a689fbe8d26f:70328679,e1fbbe9c51396810c701e13243aef399:2068391738,1ad3715825756810c8305f6a20bd9e1c:1299782207,f64637178cc5a010e5d6cce191e1ed7c:794574022,41fe27977641a010cf52bb19ebdf8e49:-1162172460,3a382317390d60100cdd3a22a1e31756:-1720968745,8506ab9ff5c960109dd527d5a27ebac0:-1480299067,87949b5b6749201019d4fd7f75f1feac:2047460462,bc54535b7d492010ece97d36b9cbbed2:197412046,09241b5ba149201083275892119a1674:-2112234879,9ed3135b9c492010534b1dd8d10a593c:-1154098148,b1a01f9745492010e48f2483f6539b94:-2112234879,1f00d7171e49201082c83bc0dd7ebe75:477655778,0f0efe5f14852010490bfd543f0bccc4:2058676548,7c187697ca452010ae72bf3880244b71:554753000,4d37fa57294520108d8eb1cb81f9a60c:-2092582353,c2073e179c452010525c8d6d97d321ff:134978440,1ca56a9bb681a01009dedc90c2f99c17:-84550483,0e65669b5781a0109bed58c6b6518001:508288653,6df4ea1bce81a010079fe8e6008460b4:-1018148627,6fc1ae93e281a010619c04c34b182966:-1219859515,f32c169b6941a0105f30bc98a77d5409:813996737,c2f75ad38f41a010a7af3057ee4eece1:-1837960032,aa6f8edba8cd6010b343d3764bba5c08:-1371065259,b2a78693388d6010ee036641d628daf4:1984564746,49c04617854d60104bd75a79ac2e510e:-929198226,d1deb55bf54d6010313280802ab37219:-1034966017,6266ed972d0d6010b90c5a399c85f090:-2143074387,586f4d1b3b816010e2ced8921e181342:-894455589,2d3a8dd36e8160108caf92b1f96575ba:-1158615153,ec3785dfc1416010665ef0c3a1f27f9a:-238751210,ba1c285b96412090fefffdd307ec57b6:-1778960937,ba1c285b96412090fefffdd307ec57b6:-1778960937,0a7b20179f4120905cf41071b14fbf83:-398606045,0a39e4979b412090e067809b2dcb35cc:77506037,0af7044fcac1ec508a6f5cdaa82decbb:1592236647,730fceb22589ac50cd78e0e9dce6223a:778679874,a70f2c729f8d6c5045ce341e804e640e:212524770,ea9da872df8d6c501d4988219d683538:-1491054638,44eae4fe2b4d6c50798bbdfd4cbc7921:-450531328,9e8d50767e4d6c500a371182a25bbe39:-22926363,a71d1076884d6c508442605ada56a24b:305593674,69d654724a4d6c501a048397cafd45c0:-516026927,d5c07fea70496c508943bc94829a0afd:-1159142025,2c9f936eb2096c505908be516d9da3de:1172023152,a9c9bc625d816c500a77c0a4cbfdc85e:-1465992257,bca8346237816c5049e437d83df2c89c:-856285477,4616e7aad0812c1074a33dc8c5a820f2:2062547225,80c487d228c1e8109ec625f9e780030a:-1003074713,4e996830c445a450eca50157b2880fa6:-280436743,aa6a9ea21e382050005619f32755e906:-475985189,adb524fc45c5201048ff31fb68ac73df:1207511384,ef319d6abe3420508bf04da864f03bed:-1725784686,664e4d66fd342050933f61b8e03dd607:-1246111289,783dc566dc342050ab32ff484b89f4f3:308438742,7fb9c16261342050d8fab77c5209653b:-268475562,9c6889229e342050714d409cfd9c4975:-660742223,aab605ee4ff020504095c545dddbd7f4:308438742,77f5c9ae18f020502a51361cedf8792b:1182541328,9cb44dea6ff02050db45fd691dc71e00:965727796,03a2cdaa6ef02050d40509997d2f69dd:-499249684,6cb1056abaf020508d1890a522c8bd07:2022299203,3d204d2a49f02050c2174a60f04894c9:-1369079489,e6ff7c2a4ff02050d993570ec85a6063:-499249684,e5bd34a2ebf020504432617877b0c9a6:-1388073913,eb5c145af034ec10936c67cd8ee6b8e6:-499249684,695d401e18f0ec100512c82c2592f684:-1179768822,c3d9c41ab5f0ec10e52906a190f206d4:135236869,bef640d68cf0ec10bef1772414387b10:1932028713,ef6227c2af70ec1009f5faaf23a093be:1282268883,840fd7ced830ec108043f8092bd206f5:2024070210,d9dcdf06e930ec108d82502f0a59dff3:1527963938,69190fcea3fcac1067977c0633878efd:1706282203,3b61c7cafdfcac1067865cdf3d2e9342:1527963938,fe3b93f1b8b4ac101c4d9d052b195bad:1706282203,275bc7f58e74ac103a9dc4aa6bbb4e36:1628799004,3c86c731cb74ac10dc4912209726248d:1710239481,b014811227e0241053c316f8c50c840b:-2038794393,8f62c15e1ba02410d9d7db84eb1fb300:1467487879,1feef41e63a024101ec0d813b73dd9f1:29603083,d5f82d56bb64e010d6d9c30cc76a1432:1207511384,1eb6691a6b64e01004ee8fda70dae3e3:-698584641,599425968c64e01011efb56f339e08af:-1546385751,ccb8a84a30a0a010be3e8cabb28f20e2:1157381549,b9bd308260a7141009d1a45f65333aef:1883650057,ae4dfc423ba71410755cb0187edb18b6:-1504345741,84ac7082f5a7141033f36764a0cbfa04:-665294929,42ea740223a714100ee8f7300e1958a4:1011490111,c7f9fc02bca71410f23255dd2fadec75:1076727468,84293402e9a7141023bcea8a8a315394:378531725,922838ce1e6714101b2bc737f1d7cc95:746374128,cc46f48a026714106c4b63154c121488:-2093866599,3be470ca53671410c70373eabda272aa:-62248380,6a343c0e326714106af4676e2abcd309:-157584389,8dd1f0ca8e671410457e5f5bf6a34196:-1951128383,df91b48a7167141041ccae93473b4027:-1442617945,4090f84a8367141075e24a5cc8fc186a:2050462117,019fecc6c067141072f79593cd328328:-1831188795,787facc6e267141095a2fa898eab22f3:-218743293,58eee04a196714102fed89dcddcc4bc5:-1831188795,c39da40a5f671410bf7a7efc07465413:2048920037,39a6dc71c1e7d010d18e0169c755ea52:906781525,01a210fd70a7d01056a5355ec799143f:505886764,e302d4b9cfa7d010d107acb81f0e6d80:-1764571886,8370587d02a7d01037da4132ed10955e:2078562337,850c88b3a7d7d450242a3035b659c654:597391151,e44639ecb4d71c1063aca00e8a2cf4eb:-892405644,5c3c6928d4d71c105171f27959a3e2b4:2040406697,6a2b29e452d71c10c9b6c626159f1adf:404193919,f75a1c2cf2931c103b5419dd938fcab0:-1492400141,7375493dbfaa9050eb4055ce77b52673:1225862913,d03438bd7e6a9050267746c54d050d1b:-8613182,f7687716af14d010bcb3dc3d7f5255a5:1841950767,46efa875b8985010ad2d948d2c50ce80:1917529601,fdfe6cb52b985010fc4c97c57e5f6696:391584771,0aef32028a5814103f20b1da6538f7c6:-1054649825,2d41f51d98c49450008c80112298fa8d:7024653,3a0fe119cb849450bf9a6f99acb82c9d:-2063652868,c9ad2dd567c494503668444ff5f39e39:-1926451537,91ce64110880945028378435b33559b4:-419128519,756e2cdd4d409450eb98f96c1242652a:-726268620,626b6cd5804094502b6fddbca3bbbe78:1350530146,00eaa0115c4094503f974a1e6ed0283c:1097110424,aeaaa4153a4094502a868a18349e1d89:1072866694,ca62a859c700945099506bcc27cf92e6:1105396883,1de9a07f4a3b8c1080924c17a1acccee:-1473050218,8df8683b8e3b8c10235d6d8d92e6a943:-416441710,cf9e33eb90378c1037ac6db56c02befa:-1224839798,bf76f32b08f38c10d10c1fc4af1a8b85:1156754090,11a373a3a8f38c105212ca069ab67dad:-674292436,e1d177ef9ab38c10e01bcb24eb3ca703:478526910,61ecb8edbef3c010e0eba1d4d19aa376:-1705682866,852311e6e2230010745fac29bfba6d75:1018307385,6081fb01ded34010e3fc2b3f1c8d3ac9:681981532,31e0ff4105d34010ccc3f135f620b248:16326279,24ef234193d340106aff90c439e2e0e9:-1988975767,27cfaf012ad340107a0c037c1e1b3f1a:-1528290642,e54fa78d3e934010cf980a60a5a432ff:-1261945501,0b7d2f4daf9340100679e7a4d7f62205:108306278,fadca78d55934010f8f5145b83a714fa:-1722235142,363ceb4dbe934010e3ad284585ebbafe:1730098361,ef4967890a93401099a2d34620d270bc:6821147,3ddfd64d71db0010122d2bf85192c8c1:-185829358,e1de9e0d26db00108957f9579c60326c:-101961738,10bf8e4da39b0010e908e837057801e3:154883992,50a9d4385fd3001045f360f74dc4020a:1372376674,a7d814f491d300104b0899e0e507aaa5:805872783,fbbb3360ed5f0410688e9d2e798e78d5:2063878629,f54cebda5d4fc010b8505077f002b494:-1354894918,e276d419e3c70010a0df446941e8e443:-1214763492,f6e7c88a2c7e4010868929a9593f346d:-37487785,5a1db85ae16000106ebce4d45ef5fe78:-468448675,d564843aadbbf3007a09a34adcf81312:2134306854,2ebc7fee6d3bf300f6047d8b9c4c2949:-463460632,2397eb6948b333001f5e9b426982e8db:-1430333070,9b9b87d1b077330020578a6fe81eceb9:404727060,be52f4c95f2b3300175a1fa3c5cd42a1:-1241190103,28b5c2b00e63330004a1081af9a80ae5:-1014061663,c906858573df330050af5efb86a6464f:1416748225,6dea86f75172330010ef5f8bdfa564bb:195597801,6d1bb84c35b2330004e67592b96aab81:2101651716,4dcafc4c50b23300beed94d3d4e67ae9:-1274462870,789ab44c12b233005466861233c15aa5:-1097618369,5be9344c0db2330091e3f5ff46a55667:-1861443188,4659fc0cf5b23300e198857bcdddf091:1441827055,bbe5879ae3a2330038043fee8bec790c:1967914857,8c85ba1ebe623300f603b202b20e4824:-1245825130,ebe0365e87623300913d753ed7d89702:344087215,e298a6db2acff3004c51d146d6331c19:-352558727,da6a86b3a6723300395edec4c356b718:601796858,e9c463b511b233008dcab6efdd042a05:1396697269,73709df76d7633006d6c9f987ad87b00:240563474,19690d73bc763300c270f630fe3c62a4:1062521728,1f35f887258233000aa19fe78028382b:1388854173,ea253cc71d82330023ba1a8cc933652c:327979110,02e4f44762823300e09356ead0fa5b48:-1811692405,dfb370c736823300e983ef303f01b514:1388854173,54b3b88767823300aba696f0ad315d42:-273468163,67833447c8823300897b2db4f67aaa99:-682300393,eb065d009f0e3300fa77911fa5c1599d:1388854173,7283d104120a33009647acb2516f24f8:-1520857,8f9800097d1f3300bf88a72f79e2bceb:1990703629,74c9e6270c893300fe19e1421a433a34:344087215,2b99eee3c48933000713f06a20c9a609:445303032,5978a6a3fe89330096387f43539eae04:1542210748,adf722a3838933008f241867543b31cd:320182338,b41766a36d893300e3e2fbc39b268382:245319624,17c5a66326893300578b9b715e31256a:2128763330,e86566ef6a4933006f22e2b300d58bae:1141746189,c615e623c889330066507d26488846c2:-888239665,b3f46a23d68933000353fce10a876dca:999585783,93d46a23aa893300ae8c3095c71b0adf:-156386778,495b9e674a4933004ed85a7b14019c65:-1075560250,268ade67f7493300813cf1768cd324ab:1468239795,ba5112af16093300dbecd05e833c5b61:2025756305,3a0f822fac0933004b135db2b3060e04:1525564970,1ced82eb87093300cbc203fcdf827bcc:-1595414578,f30cc26b4a0933004f07d83343fa1a3e:-1841920116,fb954667ab093300d3228e896106645f:139672442,89714263d10933002764995614ee778a:-2047818780,783947d7ccb073009f7b9a289d845243:1664189231,5f2ce15b78bc330019c1251dbce2db99:1344231297,8c8c626e5f7833005f146d29009880b8:2048893628,67cbf8783430b300e0cf6eb80848396e:-183637656,d92aa4bc39fc7300ddf50098b1044c46:756771976,79201cf083bc73006e6188847af07bab:683982105,ab890ce464b0730075b92922ba008d3b:1890913806,e87980e48db0730055d55c279ef362d2:-2055294049,240580ece1707300239bbdc475446560:-1897943010,12c783458438330042985007636a30b3:1890913806,e7da35386ef0f30045d878d6d2467b7e:-1322583702,048c3944163033007ce5954103de6f3a:-1281797981,ede97d00cb30330037db91f69e20a6d2:1554116198,af1695f7f0a03300d9aa26f55bbe36be:1960442693,63a91973e9e033008ca1ca8c349b9fd0:827788452,49296a23085033004c28815ffecaa6b6:-44464157,74c8a62380503300fbf7a8741f16ac35:-837492737,9d70e34bf76c33008cf942a5df7b8de9:1669009267,87d69b83a06c330042b12e79012e8ebf:1983010569,67c657c30a6c3300feba6e17aa99f4f1:-2063810673,52e1e28b4da83300414d69d7b5da69c2:-843339734,5ca42676536033006e1450d3c431cf38:-1379735095,972ef5fed3c033002f04b7fd660f11d6:916214372,2bad4a53c52e6300949200b0b467c7e0:1289926590,67eae517c7aa63008d5f4aabbfb0f8a2:-1564236883,358d0ecb49a26300d3aa690585619951:1065150832,de140e4731a26300acbb850ae0d66447:-504486437,cd0e4c03b0ae23003a38fa08f0800ebd:-2112665817,3c91b07a5ca62300c60ae243592de180:1885335981,b7a077261c2623009110b85c0d7e57f6:240199054,f6b0ebd00ce223002b72eb45598e3833:-587797936,2d4cd39cf8a22300f2f5de9d038ba596:1159552271,84535b90fb2663008e74faa51946d5c0:817947824,75916acc3a66230082d51178c6f97c03:1483891257,99fd6d003fe22300bafbde99866909ef:-484971044,4b3a6d005ce2230035ed8ec2cf47b0c4:-1052171364,18a78d8c262223003ffa7e78914b8197:-484971044,2b9926ff058223002c8bb8125f154ca5:796385693,211b5277db822300a3ee96183503e821:472942619,8f999af3028223003a4046a92220fb02:-503582359,b29ac6776b422300d71ace5fbd006d53:31732372,d0623de3230623002733c8bd4a177f8e:-372205656,c2a1495bd782a30086b29ba9c9cc7c4f:1912644188,e95cb8938082a300ab069bc1400f4dda:1985826361,a3e39c1bed02a300c11af68991e3ae4f:167991996,b2301817a502a3005838bf32b8a758b1:-990520716,637761a1628a2300ff8d0078b953da1c:1688517324,a8e2e0ad1f06230089145ac71a53bed7:-1776621505,d8976159ecc223004ad254ff2c79c981:-1842019564,ed8970d1f8422300321da662a2b968ce:-97848339,29dcfcc967066b009a3858610083f71e:-1042701577,b24f680110066b00185c500e1a19d4de:1951309313,60f5ec494cc26b00556b49d1edbb536d:1891592437,f5309950408e2300740ce55e25eef619:-2060227712,f63ec110f38e2300adafa9339b24e002:810742891,7ead89dc254e230068662e8043188a9c:1136719629,d6da815cfd4e23004ea3f265eddf7a2b:-776447500,c5e349d0924e2300b2f2673f7e59316d:-549523885,f82d0e8c56862300f9d646448cd53a9a:866126304,301d5283e87523003448ccb4b988e599:-666693685,afeb1e434d75230008806ce877096361:253922448,07c3864f1ef123004c8f82c95e4d1b3e:-607216006,b83382cb24f123001a04ed3380b83fa6:1939680493,106ab9c7bef1230009502141c93898a8:-1666048103,3dcee98fcab12300c5aed6fc3061b722:-58668486,937e218f1eb12300e623e9d74ce493a8:-607216006,86bc61cb06b12300a1d6ce1dbf58c88b:-569454194,d0a91e07f0b9a3005b4269817e7e18f9:-1104963394,d0b6e1c362f5a300466dd1b345efe6da:992225794,45f4a1039cf5a300fefa76ecc6920ca0:-1136790922,5bad9dcb82b5a30025783ef4baa2348f:873845548,677a7faec039630023d03a479bc97558:1438022542,3e6a7fae4c3963006bc70b2aeed3b951:1302355598,737f12da12f9230017cfd0f7cf2cec38:1438022542,fd0431f11f75e300819956b957d0c1d8:-1614843276,8f88c57519f1e30032cd16d5f949c3fe:-1708585935,97b749fd57fd2300e0fd7c565308b068:862696279,92974d715c3163001543d85471f42df9:-379608796,2e77cd71b43163002a19ecb73e54efde:854484825,b47ef7edc13d23005468f7f185ed4d9c:-1587995975,e51ef3edea3d230043db7e7fce3b797a:1161824316,a77dff6d2a3d2300a740b15b7e288747:-606199214,7a2c732dd73d2300b24c984b837ff56c:-1025347161,1adffb156ef1230075f7e851ee4ae3c6:1241088169,5fa5bc6dfff5a30086193c6125c8e866:-754602674,6018a8d5836d2300d957e536e5a08c64:1786128469,002f110187652300c3ccf79fd27c3ddc:244504230,bce4a48501e1230012691220b880aa0c:-676849501,e7464ae801212300ae40b489254314bb:-77708988,32406d14722963008c76d6a26c36ad92:-1015307147,117bb543eed12300947a461f60646cb0:-1801119527,4216fd4fd79123007b8c6f028117403f:-1093476056,60a4cdcf62112300552423ab2aecb411:376767278,4de530ba45912300a90b840b65fac61d:381494677,e1424b56a75123000bdde251181f97ef:1741981683,9cd8f054a42d23000bb4ac24e1c1baf7:1731031146,3e98f410242d2300b5cc05fdaac488e1:-1100326519,3952a5fa6e952300560b977d79c58e0b:1727849333,2d3ed03233152300ee301914f1975060:1093139738,69182b5efb9d230049dd02f69eeb675a:820698938,23d72b5e509d2300d8e45d9218844f40:-498397573,3f77eb1ec29d23007dac6230dabe50fb:1746460774,4a342f5ab99d2300789741e24ee9f4fc:1570937844,f15f1f56b19d23000c863cb1d50c1697:1878383819,13447ed6741d230090969f346b3610fb:583572587,f77e3fe61ad12300d526fe1ddd30df69:1783218942,59e4875264152300a67a293efd0bddbe:-85140564,3e6b6612eed123003af199fb13803785:-2052516138,32ac688eb61d2300fa8c57c23fcedd3f:1586355424,c86ca08e4f1d2300c50fdf92f108640d:-1564394133,86abe80e431d2300279dba1e95e70ddd:-1770319341,4a9a600e501d23000540f6502e3c43e9:-641103501,c9e9280ece1d230021e93ead6f92b6e1:-182189005,1e49acca5c1d23009febb302fc45abd6:-1199287213,503920ca7a1d2300f26521753167f4d7:-1384747517,2cb86c4a701d23007ac317fe2d05536b:-1036576009,83956c4ad41d2300a0627e1b1cb1f763:895067125,8705e80a351d230090244b7565da2d22:-1517002870,2d179f2547112300083bdec5aed8d716:619773215,ec868cf97c512300e4a968dbc749d045:339057694,46ddb938c4d12300fa0005d8527a01eb:-530584369,697cfdb453d1230053fe2423b1efbe8f:617939878,cee8f4b0e4dd23009e7d64cf60c3dca0:-754938354</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_1a695350dba223000462fe1b6896197b</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name/&gt;&lt;active&gt;false&lt;/active&gt;&lt;client&gt;false&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;current.active==true &amp;amp;&amp;amp; current.sys_class_name=='x_nuta2_nutanix_ca_nutanix_catalog_items'&amp;amp;&amp;amp;new Nutanix_ClientServerScriptBridge().checkQueue();&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style&gt;primary&lt;/form_style&gt;&lt;format_for_configurable_workspace&gt;false&lt;/format_for_configurable_workspace&gt;&lt;hint&gt;Launch Catalog Item&lt;/hint&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;true&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;true&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style&gt;unstyled&lt;/list_style&gt;&lt;messages/&gt;&lt;name&gt;Launch&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;70&lt;/order&gt;&lt;script&gt;&lt;![CDATA[var cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
cat_item.addQuery('item_name', current.sys_id);
cat_item.query();
cat_item.next();

onActionClick();
function onActionClick() {
	if (gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') == 'true') {

		var plugin_properties = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
		if (!plugin_properties.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'))) {
			
			return;
		
		}
	
	// var plugin_properties = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');	
	// plugin_properties.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));	
	var portal_url_suffix = plugin_properties.select_service_portal.url_suffix + '';	
	var url = '';	
	if (portal_url_suffix == '') {	
		url = '/sp?id=sc_cat_item&amp;sys_id=' + cat_item.item_name + '&amp;sysparm_category=' + cat_item.item_name.category + '&amp;sysparm_id=' + current.sys_id + '&amp;sysparm_link_parent=' + current.category + '&amp;sysparm_catalog=' + gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId') + '&amp;sysparm_catalog_view=catalog_nutanix_calm_catalog&amp;type=' + cat_item.blueprint.sys_class_name + '&amp;uuid=' + cat_item.blueprint.getRefRecord().uuid + '&amp;profileSysId' + cat_item.multiple_application_profile + '&amp;projectUUID=' + cat_item.multiple_projects;	
	} else {	
		url = '/' + portal_url_suffix + '?id=sc_cat_item&amp;sys_id=' + cat_item.item_name + '&amp;sysparm_category=' + cat_item.item_name.category + '&amp;sysparm_id=' + current.sys_id + '&amp;sysparm_link_parent=' + current.category + '&amp;sysparm_catalog=' + gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId') + '&amp;sysparm_catalog_view=catalog_nutanix_calm_catalog&amp;type=' + cat_item.blueprint.sys_class_name + '&amp;uuid=' + cat_item.blueprint.getRefRecord().uuid + '&amp;profileSysId' + cat_item.multiple_application_profile + '&amp;projectUUID=' + cat_item.multiple_projects;	
	}	
} else {
	//Native
	
	url = '/com.glideapp.servicecatalog_cat_item_view.do?v=1&amp;sysparm_id='+current.sys_id+'&amp;sysparm_link_parent='+current.category+'&amp;sysparm_catalog='+gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId')+'&amp;sysparm_catalog_view=catalog_nutanix_calm_catalog&amp;type='+cat_item.blueprint.sys_class_name+'&amp;uuid='+cat_item.blueprint.getRefRecord().uuid+'&amp;profileSysId'+cat_item.multiple_application_profile+'&amp;projectUUID='+cat_item.multiple_projects;
}

if(cat_item.state+''=='deleted' ){

	gs.addErrorMessage("Can not launch deleted catalog item.");
	url = 'x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=b2d6d6a54f41230065e48020a310c7b7&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';
}

action.setRedirectURL(url);
}]]&gt;&lt;/script&gt;&lt;show_insert&gt;true&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-12-19 11:43:35&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;1a695350dba223000462fe1b6896197b&lt;/sys_id&gt;&lt;sys_mod_count&gt;25&lt;/sys_mod_count&gt;&lt;sys_name&gt;Launch&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_1a695350dba223000462fe1b6896197b&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-01-18 07:56:16&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_nutanix_catalog_items&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>1432602962</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>56ab0533c3d4569064971612b4013154</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f510000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_catalog_items</table>
<target_name>Launch</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>139cec39f7ffbd10721f7f043f7bd869</update_guid>
<update_guid_history>139cec39f7ffbd10721f7f043f7bd869:1432602962,8aee7fe5db1365108c69a3d67805a978:1153180729,781f02d3c5b13010a456437860a846d2:218306755,db9ffccecaada110872a9d669f05eca3:1116626615,781f02d3c5b13010a456437860a846d2:218306755,05b9fa61436d611069a07b5414ec49b3:1116626615,781f02d3c5b13010a456437860a846d2:218306755,86f1dd8c91a9e9100f0309c4e6793208:1116626615,781f02d3c5b13010a456437860a846d2:218306755,c6fcb7c9a22e505099eabfc2e5641e7b:-562828697,ab9833c1b92e5050a73c5e7f70e4d568:-195542110,c372f2dbb3cbcc502a032e7dadac4fa8:-687028749,1e71735230c34c5047c07897649c63ac:-962397384,b9bee35e14834c50b104aa7a03ae7bda:-1716358759,9b7ee35e95834c507824c76d90a109d4:-638635806,a99dc7140c4233004055644d3a108ca5:1929736385,a99dc7140c4233004055644d3a108ca5:1929736385,8fb552e7ed903300f6792eadc5728ba6:-1695066870,d6bc5bd0d5a22300f57412fc7a5fd83d:1546069094,222c53d0ada223006bede782235c81c2:-1870942065,0abb53d0f1a22300c2763cac258e334f:-378706464,efab53d05ea22300fc294bb1593fbf4a:2011585502,bc9b9f90a2a22300916a4482834250a2:1059247837,ee8b9f9041a223006c0e26562961e09e:2011585502,f37b1f90d4a2230016366145af3f1a15:-378706464,8f5b5b9065a22300a7de0daf423d3562:-540402995,9f3b1b90aea223005525cb0036147906:1098075635,3f1b579065a22300a5876b6ce5bd04b1:923359051,910b979056a2230023704339eada4e05:1098075635,20ea5f502aa22300c65697200097d15f:-1763608463,46ca93909ea22300914a8642a34d780b:-1774249897,cb0a9fdc0c62230029c5e274fcbef695:123831652,090a53509ea22300c5e1630fd1872e05:-2092582390,99e99fdc166223004d0017b9db70b6bb:1486411806</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_subnet_vpc_name</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="vpc_name" table="x_nuta2_nutanix_ca_subnet"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;VPC Name&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;vpc_name&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;formula/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value="String"&gt;string&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;250&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_subnet&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;users.midserver&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-05-06 09:53:40&lt;/sys_created_on&gt;&lt;sys_id&gt;b0ac9a38938e8e5090acfa497bba1058&lt;/sys_id&gt;&lt;sys_name&gt;VPC Name&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_subnet_vpc_name&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-05-06 09:53:40&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;virtual_type&gt;script&lt;/virtual_type&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1032797157</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>56ab4133c3d4569064971612b4013122</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30f10000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_subnet</table>
<target_name>Subnet.VPC Name</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>8accdaf87d8e8e50f9d966f685df5198</update_guid>
<update_guid_history>8accdaf87d8e8e50f9d966f685df5198:-1032797157</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_properties_759ca3b74f03230039f0aa95d310c741</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>Describes the version of the plugin</description><ignore_cache>true</ignore_cache><is_private>false</is_private><name>x_nuta2_nutanix_ca.plugin_version</name><read_roles>x_nuta2_nutanix_ca.calm_admin</read_roles><suffix>plugin_version</suffix><sys_class_name>sys_properties</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2019-01-24 06:37:30</sys_created_on><sys_id>759ca3b74f03230039f0aa95d310c741</sys_id><sys_mod_count>14</sys_mod_count><sys_name>x_nuta2_nutanix_ca.plugin_version</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_properties_759ca3b74f03230039f0aa95d310c741</sys_update_name><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-08-21 10:06:56</sys_updated_on><type>string</type><value>v1.7.1</value><write_roles>x_nuta2_nutanix_ca.calm_admin</write_roles></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=759ca3b74f03230039f0aa95d310c741"/></record_update>]]></payload>
<payload_hash>-329069892</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>5aab0533c3d4569064971612b401314d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191bbf5b4590000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.plugin_version</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>9be169db94cc9e109fcee7c91bc2f678</update_guid>
<update_guid_history>9be169db94cc9e109fcee7c91bc2f678:-329069892,9be169db94cc9e109fcee7c91bc2f678:-329069892,f33a1c8e472fc254c01d4c4d02e97b9a:624131741,f33a1c8e472fc254c01d4c4d02e97b9a:624131741,ff641d5a78120e5011fb62286c64e85b:1601947103,11e8165460d23510f4671039df77532e:869665373,47612789115201106da4868e7f28cab1:-1322615194,fadf744261eda1100b228df2a333dcad:1296507610,47612789115201106da4868e7f28cab1:-1322615194,c779faed5c2d6110f42575e28625712f:1296507610,47612789115201106da4868e7f28cab1:-1322615194,b23251407ee9e91074f4ae15bf73c727:1296507610,47612789115201106da4868e7f28cab1:-1322615194,5d47a807443001102bec031a872cfd9b:-1679292093,be229cec70680110ea06694bc010c41e:-726090460,acb366bd33423010b85d71e9009d51a9:-369413561,2292dd62a5c530105ede436dfd519f3c:1309389577,409bdefeea10301097d43a9bdcf91be3:-1800367625,dd3caf7e6311b0102ec2f7d507e84365:-173415120,8857012430ee20106190325d7baa5df8:-688935569,a96f6cb28c8d6c502728c4ae920935ae:-1204456018,c149d464e6421010e280973d501c483f:-888257623,9bc615bf8ac7c4109e5a37d3324a9104:-1919298521,649406bb57f63300873c652de645531e:1860148326,bb2875073ad13300871a245858095eca:1344627877,241d63b79e0323009f84301037d2ec15:1860148326</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_99b80fbd37022300d27b8cf6c3990efb</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_RequestUtil&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_RequestUtil&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_RequestUtil = Class.create();
Nutanix_RequestUtil.prototype = {
    initialize: function() {
        this.sub_deploy_rel = {};
        this.deploy_pack_rel = {};
        this.pack_serv_rel = {};
        this.current = '';
        this.exclusionList = gs.getProperty('x_nuta2_nutanix_ca.exclusion.list') + '';
        this.disabledFields = gs.getProperty('x_nuta2_nutanix_ca.disabled.fields') + '';

        this.bpType = '';
        this.logger = new Nutanix_Calm_Logger();
    },

    transformTempBody: function(tmpbody, clonedJSON) {
        //Logs to check the status.	
        // 		gs.error("Tmpbody ::: " + JSON.stringify(tmpbody));
        // 		gs.error("ASD ::: " + JSON.stringify(clonedJSON));

        tmpbody.status.resources.substrate_definition_list = this._transformSubstrate(tmpbody.status.resources.substrate_definition_list, clonedJSON.status.resources.substrate_definition_list);
        tmpbody.spec.resources.substrate_definition_list = this._transformSubstrate(tmpbody.spec.resources.substrate_definition_list, clonedJSON.spec.resources.substrate_definition_list);
        return tmpbody;
    },

    _transformSubstrate: function(tmpSubstrate, clonedSubstrate) {

        for (var i in tmpSubstrate) {
            var matchingSubstrate = this._getMatchingSubstarteIndex(tmpSubstrate[i], clonedSubstrate);
            tmpSubstrate[i] = this._makeNewSubstrate(tmpSubstrate[i], clonedSubstrate[(matchingSubstrate) ? matchingSubstrate : i]);
        }

        return tmpSubstrate;
    },

    _makeNewSubstrate: function(tmpSubstrate, clonedSubstrate) {

        tmpSubstrate.editables = clonedSubstrate.editables;
        //tmpSubstrate.create_spec = clonedSubstrate.create_spec;		

        tmpSubstrate.readiness_probe = clonedSubstrate.readiness_probe;

        for (var i in tmpSubstrate.readiness_probe) {

            if (i + '' == 'login_credential_local_reference')
                continue;

            tmpSubstrate.readiness_probe[i] = clonedSubstrate.readiness_probe[i];
        }

        return tmpSubstrate;
    },

    _getMatchingSubstarteIndex: function(tmpSubstrate, clonedSubstrateArray) {

        for (var i in clonedSubstrateArray)
            if (clonedSubstrateArray[i].name + '' == tmpSubstrate.name + '' &amp;&amp; clonedSubstrateArray[i].type + '' == tmpSubstrate.type + '')
                return i;
    },

    makeResourceBody: function(response, resources, current) {
        try {
            this.current = current;
            var variables = this.current.variables;
            this.logger.debug("Inside Nutanix_RequestUtil.makeResourceBody.");

            this.bpType = (response.metadata.categories &amp;&amp; response.metadata.categories.TemplateType) ? response.metadata.categories.TemplateType + '' : "";
            var makeRel = {
                "substrate_definition_list": resources.substrate_definition_list,
                "app_profile_list": resources.app_profile_list,
                "service_definition_list": resources.service_definition_list,
                "package_definition_list": resources.package_definition_list
            };

            this._makeRelations(makeRel);

            return this._makeRequestBody(response, variables);
        } catch (e) {
            this.logger.error("Nutanix_RequestUtil.makeResourceBody :- Exception while parsing request variables. Error :- " + e);
        }
    },

    _makeRequestBody: function(response, variables) {

        try {
            this.logger.debug("Inside Nutanix_RequestUtil._makeRequestBody.");
            var specRes = response.spec.resources;
            var statsuRes = response.status.resources;

            response.spec.resources.service_definition_list = this._fillServiceValue(statsuRes.service_definition_list, specRes.service_definition_list);
            response.spec.resources.substrate_definition_list = this._fillSubstrateValue(statsuRes.substrate_definition_list, specRes.substrate_definition_list);
            response.spec.resources.app_profile_list = this._fillAppProfileValue(statsuRes.app_profile_list, specRes.app_profile_list);
            response.spec.resources.credential_definition_list = this._fillCredebtialsValue(statsuRes.credential_definition_list, specRes.credential_definition_list);
            response.spec.resources.app_profile_list = this._fillSnapshotValue(response.spec.resources.app_profile_list, variables);
            var replaceNull = JSON.stringify(response.spec.resources);
            replaceNull = replaceNull.replace(/"null"/g, "null");
            replaceNull = JSON.parse(replaceNull);

            return replaceNull;

            //return response.spec.resources;
        } catch (e) {
            this.logger.debug("Nutanix_RequestUtil._makeRequestBody :- Exception caught while making request body for sending request data. Error :- " + e);
            this.logger.error("Exception caught while making request body for sending request data. Error :- " + e);
        }
    },

    _fillCredebtialsValue: function(status, specs) {

        try {
            this.logger.debug("Inside Nutanix_RequestUtil._fillCredebtialsValue.");
            for (var i in status) {
                var credName = status[i].name.toLowerCase().replace(/ /g, '_');

                //specs[i].name = this._getValue(this.current.variables[credName+'_credential_name']+'', typeof specs[i].name);
                specs[i].username = this._getValue(this.current.variables[credName + '_username'] + '', typeof specs[i].username);
                //specs[i].type  = this._getValue(this.current.variables[credName+'_secret_type']+'', typeof specs[i].type);

                if (this.current.variables[credName + '_credential_reference']) {
                    specs[i].editables.clone_from_reference = {
                        "kind": "app_credential",
                        "uuid": this.current.variables[credName + '_credential_reference'] + ''
                    };
                } else {
                    if (this.current.variables[credName + '_ssh_private_key'] || this.current.variables[credName + '_password']) {

                        specs[i].secret.attrs.is_secret_modified = true;
                        specs[i].secret.value = (this.current.variables[credName + '_ssh_private_key']) ? (this.current.variables[credName + '_ssh_private_key'] + '').replace(/\r\n/g, '\n') : this.current.variables[credName + '_password'] + '';
                    }

                    if (this.current.variables[credName + '_passphrase']) {
                        specs[i].passphrase = {
                            "attrs": {
                                "is_secret_modified": true
                            },
                            "value": (this.current.variables[credName + '_passphrase']) ? (this.current.variables[credName + '_passphrase'] + '') : this.current.variables[credName + '_password'] + ''
                        };
                    }
                }

            }

            return specs;
        } catch (e) {
            this.logger.error("Nutanix_RequestUtil._fillCredebtialsValue :- Exception while filling credentials variables values. Error :- " + e);
        }
    },

    _fillAppProfileValue: function(status, specs) {

        try {
            this.logger.debug("Inside Nutanix_RequestUtil._fillAppProfileValue.");
            gs.info("c sys_id " + this.current.cat_item + " | application name : " + this.current.variables.default_profile);
            var catalog_item_sys_id = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            catalog_item_sys_id.addQuery('item_name', this.current.cat_item + '');
            catalog_item_sys_id.query();
            if (catalog_item_sys_id.next()) {
                var catalog_sys_id = catalog_item_sys_id.blueprint;
                gs.info("Nutanix_RequestUtil._fillAppProfileValue catalog_item_sys_id : " + catalog_item_sys_id.blueprint);
            }
            var profile_name = ((this.current.variables.default_profile + '').trim()) + '';
            var blueprint_profile = new GlideRecord('x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation');
            blueprint_profile.addQuery('catalog_item.sys_id=' + catalog_sys_id + '^application_profile.name=' + profile_name);
            blueprint_profile.query();
            if (blueprint_profile.next()) {
                var profile_sys_id = blueprint_profile.application_profile.sys_id;
                gs.info("Nutanix_RequestUtil._fillAppProfileValue blueprint_profile : " + blueprint_profile.application_profile.sys_id);
            }
            //			var profile_sys_id = '824c4e3edb49ac505e1985184b961972';
            gs.info("RV _fillAppProfileValue: " + JSON.stringify(status));
            for (var i in status) {
                var varList = status[i].variable_list;
                for (var j in varList) {
                    gs.info("varList : " + JSON.stringify(varList[j]));
                    if (this.current.variables[varList[j].name]) {
                        if (varList[j].type + '' == 'SECRET' || varList[j].type + '' == 'HTTP_SECRET' || varList[j].type + '' == 'EXEC_SECRET') {
                            specs[i].variable_list[j].attrs.is_secret_modified = true;
                        }
                        if (varList[j].data_type + '' == 'LIST') {

                            specs[i].variable_list[j].value = (this._getValue(this.current.variables[varList[j].name].getDisplayValue().replace(/, /g, ",") + '', typeof specs[i].variable_list[j].value).replace(/\r\n/g, '\n'));

                        } else if (varList[j].type + '' == "LOCAL" &amp;&amp; varList[j].options &amp;&amp; varList[j].options.type + '' == "PREDEFINED" &amp;&amp; (varList[j].options.choices).length &lt;= 0 &amp;&amp; (varList[j].val_type + '' == 'DATE' || varList[j].val_type + '' == 'DATE_TIME')) {

                            var newdtVal = this._formattedDateTimeNutanix(this.current.variables[varList[j].name].getDisplayValue() + '', varList[j].val_type + '');

                            specs[i].variable_list[j].value = this._getValue(newdtVal + '', typeof newdtVal);

                        } else {
                            specs[i].variable_list[j].value = (this._getValue(this.current.variables[varList[j].name] + '', typeof specs[i].variable_list[j].value).replace(/\r\n/g, '\n'));
                        }

                    }
                    if (this.current.variables[varList[j].name + '_' + profile_sys_id]) {
                        if (varList[j].type + '' == 'SECRET' || varList[j].type + '' == 'HTTP_SECRET' || varList[j].type + '' == 'EXEC_SECRET') {
                            specs[i].variable_list[j].attrs.is_secret_modified = true;
                        }
                        if (varList[j].data_type + '' == 'LIST') {

                            specs[i].variable_list[j].value = (this._getValue(this.current.variables[varList[j].name + '_' + profile_sys_id].getDisplayValue().replace(/, /g, ",") + '', typeof specs[i].variable_list[j].value).replace(/\r\n/g, '\n'));

                        } else if (varList[j].type + '' == "LOCAL" &amp;&amp; varList[j].options &amp;&amp; varList[j].options.type + '' == "PREDEFINED" &amp;&amp; (varList[j].options.choices).length &lt;= 0 &amp;&amp; (varList[j].val_type + '' == 'DATE' || varList[j].val_type + '' == 'DATE_TIME')) {

                            var newdtVal = this._formattedDateTimeNutanix(this.current.variables[varList[j].name + '_' + profile_sys_id].getDisplayValue() + '', varList[j].val_type + '');

                            specs[i].variable_list[j].value = this._getValue(newdtVal + '', typeof newdtVal);

                        } else {
                            specs[i].variable_list[j].value = (this._getValue(this.current.variables[varList[j].name + '_' + profile_sys_id] + '', typeof specs[i].variable_list[j].value).replace(/\r\n/g, '\n'));
                        }

                    }
                }

                var deployemntList = status[i].deployment_create_list;
                for (var j in deployemntList) {

                    var serviceName = "";

                    if (this.bpType)
                        serviceName = "Single Vm Configuration";
                    else
                        serviceName = this.pack_serv_rel[this.deploy_pack_rel[deployemntList[j].uuid + ''][0].package_uuid][0].serv_name;

                    serviceName = serviceName.toLowerCase().replace(/ /g, '_');

					specs[i].deployment_create_list[j].default_replicas = this._getValue(this.current.variables[serviceName + '_default_replicas'] + '', typeof specs[i].deployment_create_list[j].default_replicas);
                    specs[i].deployment_create_list[j].min_replicas = this._getValue(this.current.variables[serviceName + '_min_number_of_replicas'] + '', typeof specs[i].deployment_create_list[j].min_replicas);
                    specs[i].deployment_create_list[j].max_replicas = this._getValue(this.current.variables[serviceName + '_max_number_of_replicas'] + '', typeof specs[i].deployment_create_list[j].max_replicas);
                }
            }
			
            var replace_is_modified = JSON.stringify(specs).replace(/"is_secret_modified":true/g, '"is_secret_modified":false');
            var new_spec = JSON.parse(replace_is_modified);

            return new_spec;

        } catch (e) {
            this.logger.error("Nutanix_RequestUtil._fillAppProfileValue :- Exception while filling profiles variables values. Error :- " + e);
        }
    },

    _fillSnapshotValue: function(profileList, variables) {
        for (var i in profileList) {
            var snapshotList = profileList[i].snapshot_config_list;
            for (var j in snapshotList) {
                if(variables[snapshotList[j].name + '_snapshot_policy'] !='') {
						var snap_uuid = variables[snapshotList[j].name + '_snapshot_policy']+'';
					   profileList[i].snapshot_config_list[j].attrs_list[0].app_protection_policy_reference = { "uuid" : snap_uuid};
				}
				if(variables[snapshotList[j].name + '_snapshot_local_rule'] != '') {
					var local_uuid = variables[snapshotList[j].name + '_snapshot_local_rule']+'';
					   profileList[i].snapshot_config_list[j].attrs_list[0].app_protection_rule_reference = { "uuid" : local_uuid};
				}
                }
            }
		return profileList;
    },

    _fillSubstrateValue: function(status, specs) {

        try {
            this.logger.debug("Inside Nutanix_RequestUtil._fillSubstrateValue.");

            for (var i in status) {

                var serviceName = "";

                if (this.bpType)
                    serviceName = "Single Vm Configuration";
                else
                    serviceName = this.pack_serv_rel[this.deploy_pack_rel[this.sub_deploy_rel[status[i].uuid].deployemnt_uuid + ''][0].package_uuid][0].serv_name;

                serviceName = serviceName.toLowerCase().replace(/ /g, '_');

                var varList = status[i].variable_list;
                for (var j in varList) {
                    if (this.current.variables[serviceName + '_' + varList[j].name]) {
                        if (varList[j].type + '' == 'SECRET') {
                            specs[i].variable_list[j].attrs.is_secret_modified = true;
                        }
                        specs[i].variable_list[j].value = this._getValue(this.current.variables[serviceName + '_' + varList[j].name] + '', specs[i].variable_list[j].val_type);
                    }
                }

                var readinessProbe = status[i].readiness_probe;
                for (var j in readinessProbe) {

                    if (j == 'login_credential_local_reference' &amp;&amp; this.current.variables[serviceName + '_credential']) {

                        specs[i].readiness_probe[j].name = this._getValue(this.current.variables[serviceName + '_credential'] + '', typeof specs[i].readiness_probe[j].name);
                    } else {

                        if (j == 'disable_readiness_probe') {

                            if (this.current.variables[serviceName + '_' + j])
                                specs[i].readiness_probe[j] = this._getValue((this.current.variables[serviceName + '_' + j] + '' == 'true') ? false : true, typeof specs[i].readiness_probe[j]);

                        } else {
                            if (this.current.variables[serviceName + '_' + j])
                                specs[i].readiness_probe[j] = this._getValue(this.current.variables[serviceName + '_' + j] + '', typeof specs[i].readiness_probe[j]);
                        }
                    }
                }

                var createSpec = status[i].create_spec;
                if (createSpec.name &amp;&amp; this.current.variables[serviceName + '_name']) {
                    specs[i].create_spec.name = this._getValue(this.current.variables[serviceName + '_name'] + '', typeof specs[i].create_spec.name);
                }





                if (createSpec.resources &amp;&amp; createSpec.resources.name &amp;&amp; this.current.variables[serviceName + '_name']) {
                    specs[i].create_spec.resources.name = this._getValue(this.current.variables[serviceName + '_name'] + '', typeof specs[i].create_spec.name);
                }

                if (createSpec.resources &amp;&amp; createSpec.resources.vm_name &amp;&amp; this.current.variables[serviceName + '_name']) {
                    specs[i].create_spec.resources.vm_name = this._getValue(this.current.variables[serviceName + '_name'] + '', typeof specs[i].create_spec.name);
                }





                if (createSpec.host &amp;&amp; this.current.variables[serviceName + '_host']) {

                    //Disabled for plguin 1.1

                    //specs[i].create_spec.host = this._getValue(this.current.variables[serviceName+'_host']+'', typeof specs[i].create_spec.host);
                }
                if (createSpec.template &amp;&amp; this.current.variables[serviceName + '_template']) {
                    //Disabled for plguin 1.1

                    //specs[i].create_spec.template = this._getValue(this.current.variables[serviceName+'_template']+'', typeof specs[i].create_spec.template);
                }
                if (createSpec.datastore &amp;&amp; this.current.variables[serviceName + '_datastore']) {
                    //Disabled for plguin 1.1

                    //specs[i].create_spec._datastore = this._getValue(this.current.variables[serviceName+'_datastore']+'', typeof specs[i].create_spec.datastore);
                }
                if (createSpec.address &amp;&amp; this.current.variables[serviceName + '_address']) {

                    //Disabled for plguin 1.1

                    //specs[i].create_spec.address = this._getValue(this.current.variables[serviceName+'_address']+'', typeof specs[i].create_spec.address);
                }
                if (createSpec.drs_mode &amp;&amp; this.current.variables[serviceName + '_drs_mode']) {

                    specs[i].create_spec.drs_mode = this._getValue(this.current.variables[serviceName + '_drs_mode'] + '', typeof specs[i].create_spec.drs_mode);
                }








                for (var j in createSpec.resources) {

                    if (j == 'security_group_list' &amp;&amp; this.current.variables[serviceName + '_name']) {

                        //Disabled for plguin 1.1

                        // 						var secGrp = (this.current.variables[serviceName+'_security_group_list']+'').split(',');
                        // 						for(var k in secGrp){
                        // 							specs[i].create_spec.resources[j][k].security_group_id = secGrp[k]+'';
                        // 						}


                    } else if (j == 'block_device_map') {
                        //Disabled for plguin 1.1

                        //
                        // 						if(specs[i].create_spec.resources[j].root_disk){
                        // 							if(this.current.variables[serviceName+'_device_name']+'')
                        // 								specs[i].create_spec.resources[j].root_disk.device_name = this._getValue(this.current.variables[serviceName+'_device_name']+'', typeof specs[i].create_spec.resources[j].root_disk.device_name);

                        // 							if(this.current.variables[serviceName+'_size_gb']+'')
                        // 								specs[i].create_spec.resources[j].root_disk.size_gb = this._getValue(this.current.variables[serviceName+'_size_gb']+'', typeof specs[i].create_spec.resources[j].root_disk.size_gb);

                        // 							if(this.current.variables[serviceName+'_volume_type']+'')
                        // 								specs[i].create_spec.resources[j].root_disk.volume_type = this._getValue(this.current.variables[serviceName+'_volume_type']+'', typeof specs[i].create_spec.resources[j].root_disk.volume_type);

                        // 							specs[i].create_spec.resources[j].root_disk.delete_on_termination = this._getValue(this.current.variables[serviceName+'_delete_on_termination']+'', typeof specs[i].create_spec.resources[j].root_disk.delete_on_termination);
                        // 						}

                        // 						var dataList = specs[i].create_spec.resources[j].data_disk_list;
                        // 						for(var k in dataList){

                        // 							if(this.current.variables[serviceName+'_'+k+'_device_name']+'')
                        // 								specs[i].create_spec.resources[j].data_disk_list[k].device_name = this._getValue(this.current.variables[serviceName+'_'+k+'_device_name']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].device_name);

                        // 							if(this.current.variables[serviceName+'_'+k+'_size_gb']+'')
                        // 								specs[i].create_spec.resources[j].data_disk_list[k].size_gb = this._getValue(this.current.variables[serviceName+'_'+k+'_size_gb']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].size_gb);

                        // 							if(this.current.variables[serviceName+'_'+k+'_volume_type']+'')
                        // 								specs[i].create_spec.resources[j].data_disk_list[k].volume_type = this._getValue(this.current.variables[serviceName+'_'+k+'_volume_type']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].volume_type);

                        // 							specs[i].create_spec.resources[j].data_disk_list[k].delete_on_termination = this._getValue(this.current.variables[serviceName+'_'+k+'_delete_on_termination']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].delete_on_termination);
                        // 						}

                    } else if (j == 'hw_profile') {
                        if (this.current.variables[serviceName + '_' + j])
                            specs[i].create_spec.resources[j].vm_size = this._getValue(this.current.variables[serviceName + '_' + j] + '', typeof specs[i].create_spec.resources[j].vm_size);
                    } else if (j == 'disks') {
                        //Disabled for plguin 1.1

                        //
                        // 						var dataList = specs[i].create_spec.resources[j];
                        // 						for(var k in dataList){

                        // 							if(!specs[i].create_spec.resources[j][k].initializeParams)
                        // 								specs[i].create_spec.resources[j][k].initializeParams = {};


                        // 							if(this.current.variables[serviceName+'_'+k+'_storage_type']+'')
                        // 								specs[i].create_spec.resources[j][k].initializeParams.diskType = this._getValue(this.current.variables[serviceName+'_'+k+'_storage_type']+'', typeof specs[i].create_spec.resources[j][k].initializeParams.diskType);

                        // 							if(this.current.variables[serviceName+'_'+k+'_source_image']+'')
                        // 								specs[i].create_spec.resources[j][k].initializeParams.sourceImage = this._getValue(this.current.variables[serviceName+'_'+k+'_source_image']+'', typeof specs[i].create_spec.resources[j][k].initializeParams.sourceImage);

                        // 							if(this.current.variables[serviceName+'_'+k+'_size_in_gb']+'')
                        // 								specs[i].create_spec.resources[j][k].initializeParams.diskSizeGb = this._getValue(this.current.variables[serviceName+'_'+k+'_size_in_gb']+'', typeof specs[i].create_spec.resources[j][k].initializeParams.diskSizeGb);

                        // 							specs[i].create_spec.resources[j][k].autoDelete = this._getValue(this.current.variables[serviceName+'_'+k+'_delete_when_instance_is_deleted']+'', typeof specs[i].create_spec.resources[j][k].autoDelete);

                        // 							if(this.current.variables[serviceName+'_'+k+'_disk']+'')
                        // 								specs[i].create_spec.resources[j][k].source = this._getValue(this.current.variables[serviceName+'_'+k+'_disk']+'', typeof specs[i].create_spec.resources[j][k].source);
                        // 						}

                    } else if (j == 'blankDisks') {

                        //Disabled for plguin 1.1

                        //var dataList = specs[i].create_spec.resources[j];
                        // 						for(var k in dataList){

                        // 							if(this.current.variables[serviceName+'_'+k+'_disk_type']+'')
                        // 								specs[i].create_spec.resources[j][k].disk_type = this._getValue(this.current.variables[serviceName+'_'+k+'_disk_type']+'', typeof specs[i].create_spec.resources[j][k].disk_type);

                        // 							if(this.current.variables[serviceName+'_'+k+'_disk_name']+'')
                        // 								specs[i].create_spec.resources[j][k].name = this._getValue(this.current.variables[serviceName+'_'+k+'_disk_name']+'', typeof specs[i].create_spec.resources[j][k].name);

                        // 							if(this.current.variables[serviceName+'_'+k+'_size_in_gb']+'')
                        // 								specs[i].create_spec.resources[j][k].sizeGb = this._getValue(this.current.variables[serviceName+'_'+k+'_size_in_gb']+'', typeof specs[i].create_spec.resources[j][k].sizeGb);

                        // 							specs[i].create_spec.resources[j][k].autoDelete = this._getValue(this.current.variables[serviceName+'_'+k+'_delete_when_instance_is_deleted']+'', typeof specs[i].create_spec.resources[j][k].autoDelete);
                        // 						}

                    } else if (j == 'networkInterfaces') {

                        //Disabled for plguin 1.1

                        //var nicList = specs[i].create_spec.resources[j];
                        // 						for(var k in nicList){

                        // 							if(this.current.variables[serviceName+'_'+k+'_associate_public_ip_address']+'')
                        // 								specs[i].create_spec.resources[j][k].associatePublicIP = this._getValue(this.current.variables[serviceName+'_'+k+'_associate_public_ip_address']+'', typeof specs[i].create_spec.resources[j][k].associatePublicIP);

                        // 							if(this.current.variables[serviceName+'_'+k+'_network']+'')
                        // 								specs[i].create_spec.resources[j][k].network = this._getValue(this.current.variables[serviceName+'_'+k+'_network']+'', typeof specs[i].create_spec.resources[j][k].network);

                        // 							if(this.current.variables[serviceName+'_'+k+'_subnetwork']+'')
                        // 								specs[i].create_spec.resources[j][k].subnetwork = this._getValue(this.current.variables[serviceName+'_'+k+'_subnetwork']+'', typeof specs[i].create_spec.resources[j][k].subnetwork);

                        // 							if(!specs[i].create_spec.resources[j][k].accessConfigs)
                        // 								specs[i].create_spec.resources[j][k].accessConfigs = [];


                        // 							if(this.current.variables[serviceName+'_'+k+'_access_configuration_name']+'')
                        // 								specs[i].create_spec.resources[j][k].accessConfigs.push({
                        // 									'name' : this._getValue(this.current.variables[serviceName+'_'+k+'_access_configuration_name']+'', typeof specs[i].create_spec.resources[j][k].accessConfigs[0].name),
                        // 									'config_type' : this._getValue(this.current.variables[serviceName+'_'+k+'_access_configuration_type']+'', typeof specs[i].create_spec.resources[j][k].accessConfigs[0].config_type)
                        // 								});

                        // 						}

                    } else if (j == 'nic_list') {

                        var nicList = specs[i].create_spec.resources[j];
                        for (var k in nicList) {

                            if (this.current.variables[serviceName + '_' + k + '_network']) {

                                // 								//Disabled for plguin 1.1

                                //if(this.current.variables[serviceName+'_'+k+'_adapter_type']+'')
                                // 									specs[i].create_spec.resources[j][k].nic_type = this._getValue(this.current.variables[serviceName+'_'+k+'_adapter_type']+'', typeof specs[i].create_spec.resources[j][k].nic_type);

                                // 								if(this.current.variables[serviceName+'_'+k+'_network_type']+'')
                                // 									specs[i].create_spec.resources[j][k].net_name = this._getValue(this.current.variables[serviceName+'_'+k+'_network_type']+'', typeof specs[i].create_spec.resources[j][k].net_name);
                            } else {
                                var provider_type = status[i].type + '';
                                if (provider_type.includes('AHV')) {
                                    if (!specs[i].create_spec.resources[j][k].subnet_reference)
                                        specs[i].create_spec.resources[j][k].subnet_reference = {};

                                    if (this.current.variables[serviceName + '_' + k + '_nic_' + (parseInt(k) + 1)] + '')
                                        specs[i].create_spec.resources[j][k].subnet_reference.uuid = this._getValue(this.current.variables[serviceName + '_' + k + '_nic_' + (parseInt(k) + 1)] + '', typeof specs[i].create_spec.resources[j][k].subnet_reference.uuid);
                                }
                            }
                        }
                    } else if (j == 'nw_profile') {
                        //Disabled for plguin 1.1

                        // 						var nicList = specs[i].create_spec.resources[j].nic_list;
                        // 						for(var k in nicList){



                        // 							if(this.current.variables[serviceName+'_'+k+'_nic_name']+'')
                        // 								specs[i].create_spec.resources[j].nic_list[k].nic_name = this._getValue(this.current.variables[serviceName+'_'+k+'_nic_name']+'', typeof specs[i].create_spec.resources[j].nic_list[k].nic_name);


                        // 							//Disabled for plguin 1.1
                        // 							//specs[i].create_spec.resources[j].nic_list[k].nsg_name = this._getValue(this.current.variables[serviceName+'_'+k+'_security_group']+'', typeof specs[i].create_spec.resources[j].nic_list[k].nsg_name);
                        // 							//specs[i].create_spec.resources[j].nic_list[k].vnet_name = this._getValue(this.current.variables[serviceName+'_'+k+'_virtual_network']+'', typeof specs[i].create_spec.resources[j].nic_list[k].vnet_name);
                        // 							//specs[i].create_spec.resources[j].nic_list[k].subnet_name = this._getValue(this.current.variables[serviceName+'_'+k+'_subnet']+'', typeof specs[i].create_spec.resources[j].nic_list[k].subnet_name);

                        // 							if(!specs[i].create_spec.resources[j].nic_list[k].public_ip_info)
                        // 								specs[i].create_spec.resources[j].nic_list[k].public_ip_info = {};


                        // 							if(this.current.variables[serviceName+'_'+k+'_public_ip_config_name']+'')
                        // 								specs[i].create_spec.resources[j].nic_list[k].public_ip_info.ip_name = this._getValue(this.current.variables[serviceName+'_'+k+'_public_ip_config_name']+'', typeof specs[i].create_spec.resources[j].nic_list[k].public_ip_info.ip_name);

                        // 							if(this.current.variables[serviceName+'_'+k+'_public_ip_config_adapter_method']+'')
                        // 								specs[i].create_spec.resources[j].nic_list[k].public_ip_info.ip_allocation_method = this._getValue(this.current.variables[serviceName+'_'+k+'_public_ip_config_adapter_method']+'', typeof specs[i].create_spec.resources[j].nic_list[k].public_ip_info.ip_allocation_method);

                        // 							if(this.current.variables[serviceName+'_'+k+'_public_ip_config_dns_label']+'')
                        // 								specs[i].create_spec.resources[j].nic_list[k].public_ip_info.dns_label = this._getValue(this.current.variables[serviceName+'_'+k+'_public_ip_config_dns_label']+'', typeof specs[i].create_spec.resources[j].nic_list[k].public_ip_info.dns_label);

                        // 							if(!specs[i].create_spec.resources[j].nic_list[k].private_ip_info)
                        // 								specs[i].create_spec.resources[j].nic_list[k].private_ip_info = {};


                        // 							if(this.current.variables[serviceName+'_'+k+'_private_ip_config_allocation_method']+'')
                        // 								specs[i].create_spec.resources[j].nic_list[k].private_ip_info.ip_allocation_method = this._getValue(this.current.variables[serviceName+'_'+k+'_private_ip_config_allocation_method']+'', typeof specs[i].create_spec.resources[j].nic_list[k].private_ip_info.ip_allocation_method);

                        // 						}

                    } else if (j == 'guest_customization') {

                        var providerType = specs[i].create_spec.type + '';

                        if (providerType.includes('vmware')) {

                            if (!specs[i].create_spec.resources[j].linux_data)
                                specs[i].create_spec.resources[j].linux_data = {};


                            if (this.current.variables[serviceName + '_hostname'] + '')
                                specs[i].create_spec.resources[j].linux_data.hostname = this._getValue(this.current.variables[serviceName + '_hostname'] + '', typeof specs[i].create_spec.resources[j].linux_data.hostname);

                            if (this.current.variables[serviceName + '_domain'] + '')
                                specs[i].create_spec.resources[j].linux_data.domain = this._getValue(this.current.variables[serviceName + '_domain'] + '', typeof specs[i].create_spec.resources[j].linux_data.domain);

                            if (this.current.variables[serviceName + '_timezone'] + '')
                                specs[i].create_spec.resources[j].linux_data.timezone = this._getValue(this.current.variables[serviceName + '_timezone'] + '', typeof specs[i].create_spec.resources[j].linux_data.timezone);

                            if (this.current.variables[serviceName + '_hardware_clock_utc'] + '')
                                specs[i].create_spec.resources[j].linux_data.hw_utc_clock = this._getValue(this.current.variables[serviceName + '_hardware_clock_utc'] + '', typeof specs[i].create_spec.resources[j].linux_data.hw_utc_clock);

                            if (this.current.variables[serviceName + '_dns_primary'] + '')
                                specs[i].create_spec.resources[j].linux_data.dns_primary = this._getValue(this.current.variables[serviceName + '_dns_primary'] + '', typeof specs[i].create_spec.resources[j].linux_data.dns_primary);

                            if (this.current.variables[serviceName + '_dns_secondary'] + '')
                                specs[i].create_spec.resources[j].linux_data.dns_secondary = this._getValue(this.current.variables[serviceName + '_dns_secondary'] + '', typeof specs[i].create_spec.resources[j].linux_data.dns_secondary);

                            if (this.current.variables[serviceName + '_dns_tertiary'] + '')
                                specs[i].create_spec.resources[j].linux_data.dns_tertiary = this._getValue(this.current.variables[serviceName + '_dns_tertiary'] + '', typeof specs[i].create_spec.resources[j].linux_data.dns_tertiary);

                            if (!specs[i].create_spec.resources[j].linux_data.dns_search_path)
                                specs[i].create_spec.resources[j].linux_data.dns_search_path = [];


                            if (this.current.variables[serviceName + '_dns_search_path'] + '')
                                specs[i].create_spec.resources[j].linux_data.dns_search_path.push(this._getValue(this.current.variables[serviceName + '_dns_search_path'] + '', typeof specs[i].create_spec.resources[j].linux_data.dns_search_path[0]));


                            //Disabled for plguin 1.1

                            //for(var k in specs[i].create_spec.resources[j].linux_data.network_settings)
                            // 								if(this.current.variables[serviceName+'_'+k+'_use_dhcp']+'')
                            // 									specs[i].create_spec.resources[j].linux_data.network_settings[k].is_dhcp = this._getValue(this.current.variables[serviceName+'_'+k+'_use_dhcp']+'', typeof specs[i].create_spec.resources[j].linux_data.network_settings[k].is_dhcp);	

                        } else {

                            if (this.current.variables[serviceName + '_type'] + '' == 'Sysprep') {

                                if (!specs[i].create_spec.resources[j].sysprep)
                                    specs[i].create_spec.resources[j].sysprep = {};

                                specs[i].create_spec.resources[j].cloud_init = null;

                                if (this.current.variables[serviceName + '_install_type'] + '')
                                    specs[i].create_spec.resources[j].sysprep.install_type = this._getValue(this.current.variables[serviceName + '_install_type'] + '', typeof specs[i].create_spec.resources[j].sysprep.install_type);

                                if (this.current.variables[serviceName + '_script'] + '')
                                    specs[i].create_spec.resources[j].sysprep.unattend_xml = this._getValue(this.current.variables[serviceName + '_script'] + '', typeof specs[i].create_spec.resources[j].sysprep.unattend_xml);
                            } else if (this.current.variables[serviceName + '_type'] + '' == 'Cloud-init') {

                                if (!specs[i].create_spec.resources[j])
                                    specs[i].create_spec.resources[j] = {};

                                if (!specs[i].create_spec.resources[j].cloud_init)
                                    specs[i].create_spec.resources[j].cloud_init = {};

                                specs[i].create_spec.resources[j].sysprep = null;

                                if (this.current.variables[serviceName + '_script'] + '')
                                    specs[i].create_spec.resources[j].cloud_init.user_data = this._getValue(this.current.variables[serviceName + '_script'] + '', typeof specs[i].create_spec.resources[j].cloud_init.user_data).replace(/\r\n/g, '\n');
                            }



                        }
                    } else if (j == 'guestCustomization') {


                        if (this.current.variables[serviceName + '_startup_script'] + '')
                            specs[i].create_spec.resources[j].startupScript = this._getValue(this.current.variables[serviceName + '_startup_script'] + '', typeof specs[i].create_spec.resources[j].startupScript);

                        var items = (this.current.variables[serviceName + '_security_groups'] + '').split(',');

                        if (!specs[i].create_spec.resources.tags)
                            specs[i].create_spec.resources.tags = {};

                        if (!specs[i].create_spec.resources.tags.items)
                            specs[i].create_spec.resources.tags.items = [];


                        for (var k in items) {
                            if (this.current.variables[serviceName + '_key_' + k] + '')
                                specs[i].create_spec.resources.tags.items[k] = this._getValue(this.current.variables[serviceName + '_key_' + k] + '', typeof specs[i].create_spec.resources.tags.items[k]);
                        }
                    } else if (j == 'os_profile') {

                        if (!specs[i].create_spec.resources[j].linux_config)
                            specs[i].create_spec.resources[j].linux_config = {};

                        if (this.current.variables[serviceName + '_cloud_init_script'])
                            specs[i].create_spec.resources[j].linux_config.custom_data = this._getValue(this.current.variables[serviceName + '_cloud_init_script'] + '', typeof specs[i].create_spec.resources[j].linux_config.custom_data);


                        var osProfileList = specs[i].create_spec.resources[j].secrets;

                        for (var k in osProfileList) {

                            if (this.current.variables[serviceName + '_' + k + '_valut_id'])
                                specs[i].create_spec.resources[j].secrets[k].source_vault_id = this._getValue(this.current.variables[serviceName + '_' + k + '_valut_id'] + '', typeof specs[i].create_spec.resources[j].secrets[k].source_vault_id);

                            for (var w in osProfileList[k].vault_certificates) {

                                if (this.current.variables[serviceName + '_' + k + '_certificate_config_url_' + w])
                                    specs[i].create_spec.resources[j].secrets[k].vault_certificates[w].certificate_url = this._getValue(this.current.variables[serviceName + '_' + k + '_certificate_config_url_' + w] + '', typeof specs[i].create_spec.resources[j].secrets[k].vault_certificates[w].certificate_url);
                            }

                        }

                    } else if (j == 'storage_profile') {

                        if (!specs[i].create_spec.resources[j].image_details)
                            specs[i].create_spec.resources[j].image_details = {};

                        if (this.current.variables[serviceName + '_use_custom_image'])
                            specs[i].create_spec.resources[j].image_details.use_custom_image = this._getValue(this.current.variables[serviceName + '_use_custom_image'] + '', typeof specs[i].create_spec.resources[j].image_details.use_custom_image);


                        if (this.current.variables[serviceName + '_publisher'])
                            specs[i].create_spec.resources[j].image_details.publisher = this._getValue(this.current.variables[serviceName + '_publisher'] + '', typeof specs[i].create_spec.resources[j].image_details.publisher);

                        if (this.current.variables[serviceName + '_offer'])
                            specs[i].create_spec.resources[j].image_details.offer = this._getValue(this.current.variables[serviceName + '_offer'] + '', typeof specs[i].create_spec.resources[j].image_details.offer);

                        if (this.current.variables[serviceName + '_sku'])
                            specs[i].create_spec.resources[j].image_details.sku = this._getValue(this.current.variables[serviceName + '_sku'] + '', typeof specs[i].create_spec.resources[j].image_details.sku);

                        if (this.current.variables[serviceName + '_version'])
                            specs[i].create_spec.resources[j].image_details.version = this._getValue(this.current.variables[serviceName + '_version'] + '', typeof specs[i].create_spec.resources[j].image_details.version);


                        if (this.current.variables[serviceName + '_use_managed_disks'])
                            specs[i].create_spec.resources[j].is_managed = this._getValue(this.current.variables[serviceName + '_use_managed_disks'] + '', typeof specs[i].create_spec.resources[j].is_managed);


                        if (!specs[i].create_spec.resources[j].os_disk_details)
                            specs[i].create_spec.resources[j].os_disk_details = {};

                        if (this.current.variables[serviceName + '_disk_name'])
                            specs[i].create_spec.resources[j].os_disk_details.name = this._getValue(this.current.variables[serviceName + '_disk_name'] + '', typeof specs[i].create_spec.resources[j].os_disk_details.name);

                        if (this.current.variables[serviceName + '_storage_type'])
                            specs[i].create_spec.resources[j].os_disk_details.storage_type = this._getValue(this.current.variables[serviceName + '_storage_type'] + '', typeof specs[i].create_spec.resources[j].os_disk_details.storage_type);

                        if (this.current.variables[serviceName + '_disk_caching_type'])
                            specs[i].create_spec.resources[j].os_disk_details.caching_type = this._getValue(this.current.variables[serviceName + '_disk_caching_type'] + '', typeof specs[i].create_spec.resources[j].os_disk_details.caching_type);

                        if (this.current.variables[serviceName + '_disk_create_options'])
                            specs[i].create_spec.resources[j].os_disk_details.create_option = this._getValue(this.current.variables[serviceName + '_disk_create_options'] + '', typeof specs[i].create_spec.resources[j].os_disk_details.create_option);


                        //Disabled for plguin 1.1

                        //var dataList = specs[i].create_spec.resources[j].data_disk_list;

                        // 						for(var k in dataList){


                        // 							if(this.current.variables[serviceName+'_'+k+'_disk_name'])
                        // 								specs[i].create_spec.resources[j].data_disk_list[k].name = this._getValue(this.current.variables[serviceName+'_'+k+'_disk_name']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].name);

                        // 							if(this.current.variables[serviceName+'_'+k+'_storage_type'])
                        // 								specs[i].create_spec.resources[j].data_disk_list[k].storage_type = this._getValue(this.current.variables[serviceName+'_'+k+'_storage_type']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].storage_type);

                        // 							if(this.current.variables[serviceName+'_'+k+'_disk_caching_type'])
                        // 								specs[i].create_spec.resources[j].data_disk_list[k].caching_type = this._getValue(this.current.variables[serviceName+'_'+k+'_disk_caching_type']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].caching_type);

                        // 							if(this.current.variables[serviceName+'_'+k+'_size_gb'])
                        // 								specs[i].create_spec.resources[j].data_disk_list[k].size_in_gb = this._getValue(this.current.variables[serviceName+'_'+k+'_size_gb']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].size_in_gb);

                        // 							if(this.current.variables[serviceName+'_'+k+'_disk_lun'])
                        // 								specs[i].create_spec.resources[j].data_disk_list[k].lun = this._getValue(this.current.variables[serviceName+'_'+k+'_disk_lun']+'', typeof specs[i].create_spec.resources[j].data_disk_list[k].lun);
                        // 						}

                    } else if (j == 'serviceAccounts') {

                        if (!specs[i].create_spec.resources[j])
                            specs[i].create_spec.resources[j] = [];

                        if (this.current.variables[serviceName + '_service_account'])
                            specs[i].create_spec.resources[j].email = this._getValue(this.current.variables[serviceName + '_service_account'] + '', typeof specs[i].create_spec.resources[j][0].email);

                    } else if (j == 'sshKeys') {

                        //Disabled for plguin 1.1

                        //var sshList = specs[i].create_spec.resources[j];

                        // 						for(var k in sshList){
                        // 							if(this.current.variables[serviceName+'_key_'+k])
                        // 								specs[i].create_spec.resources[j][k] = this._getValue(this.current.variables[serviceName+'_key_'+k]+'', typeof specs[i].create_spec.resources[j][k]);
                        // 						}
                    } else if (j == 'categories') {

                        continue;
                        //not handled
                    } else if (j == 'disk_list') {

                        //Disabled for plguin 1.1

                        //var dataList = specs[i].create_spec.resources[j];

                        // 						for(var k in dataList){

                        // 							if(dataList[k].adapter_type){

                        // 								if(this.current.variables[serviceName+'_'+k+'_adapter_type'])
                        // 									specs[i].create_spec.resources[j][k].adapter_type = this._getValue(this.current.variables[serviceName+'_'+k+'_adapter_type']+'', typeof specs[i].create_spec.resources[j][k].adapter_type);

                        // 								if(this.current.variables[serviceName+'_'+k+'_device_type'])
                        // 									specs[i].create_spec.resources[j][k].disk_type = this._getValue(this.current.variables[serviceName+'_'+k+'_device_type']+'', typeof specs[i].create_spec.resources[j][k].disk_type);

                        // 								if(this.current.variables[serviceName+'_'+k+'_size'])
                        // 									specs[i].create_spec.resources[j][k].disk_size_mb = this._getValue(this.current.variables[serviceName+'_'+k+'_size']+'', typeof specs[i].create_spec.resources[j][k].disk_size_mb);

                        // 							}else if(dataList[k] &amp;&amp; dataList[k].data_source_reference &amp;&amp; dataList[k].data_source_reference.kind=='image'){

                        // 								if(!specs[i].create_spec.resources[j][k].data_source_reference)
                        // 									specs[i].create_spec.resources[j][k].data_source_reference = {};

                        // 								if(this.current.variables[serviceName+'_'+k+'_image'])
                        // 									specs[i].create_spec.resources[j][k].data_source_reference.name = this._getValue(this.current.variables[serviceName+'_'+k+'_image']+'', typeof specs[i].create_spec.resources[j][k].data_source_reference.name);

                        // 								if(!specs[i].create_spec.resources[j][k].device_properties)
                        // 									specs[i].create_spec.resources[j][k].device_properties = {};

                        // 								if(this.current.variables[serviceName+'_'+k+'_device_type'])
                        // 									specs[i].create_spec.resources[j][k].device_properties.device_type = this._getValue(this.current.variables[serviceName+'_'+k+'_device_type']+'', typeof specs[i].create_spec.resources[j][k].device_properties.device_type);

                        // 								if(!specs[i].create_spec.resources[j][k].device_properties.disk_address)
                        // 									specs[i].create_spec.resources[j][k].device_properties.disk_address = {};

                        // 								if(this.current.variables[serviceName+'_'+k+'_device_bus'])
                        // 									specs[i].create_spec.resources[j][k].device_properties.disk_address.adapter_type = this._getValue(this.current.variables[serviceName+'_'+k+'_device_bus']+'', typeof specs[i].create_spec.resources[j][k].device_properties.disk_address.adapter_type);								


                        // 								if(!specs[i].create_spec.resources.boot_config)
                        // 									specs[i].create_spec.resources.boot_config= {};

                        // 								if(!specs[i].create_spec.resources.boot_config.boot_device)
                        // 									specs[i].create_spec.resources.boot_config.boot_device = {};

                        // 								if(!specs[i].create_spec.resources.boot_config.boot_device.disk_address)
                        // 									specs[i].create_spec.resources.boot_config.boot_device.disk_address = {};

                        // 								specs[i].create_spec.resources.boot_config.boot_device.disk_address.device_index = k;


                        // 							}else{

                        // 								if(!specs[i].create_spec.resources[j][k].device_properties)
                        // 									specs[i].create_spec.resources[j][k].device_properties = {};

                        // 								if(this.current.variables[serviceName+'_'+k+'_device_type'])
                        // 									specs[i].create_spec.resources[j][k].device_properties.device_type = this._getValue(this.current.variables[serviceName+'_'+k+'_device_type']+'', typeof specs[i].create_spec.resources[j][k].device_properties.device_type);

                        // 								if(!specs[i].create_spec.resources[j][k].device_properties.disk_address)
                        // 									specs[i].create_spec.resources[j][k].device_properties.disk_address = {};

                        // 								if(this.current.variables[serviceName+'_'+k+'_device_bus'])
                        // 									specs[i].create_spec.resources[j][k].device_properties.disk_address.adapter_type = this._getValue(this.current.variables[serviceName+'_'+k+'_device_bus']+'', typeof specs[i].create_spec.resources[j][k].device_properties.disk_address.adapter_type);

                        // 								if(this.current.variables[serviceName+'_'+k+'_size'])
                        // 									specs[i].create_spec.resources[j][k].disk_size_mib = this._getValue(this.current.variables[serviceName+'_'+k+'_size']+'', typeof specs[i].create_spec.resources[j][k].disk_size_mib);
                        // 							}

                        // 						}

                    } else if (j == 'zone') {

                        if (this.current.variables[serviceName + '_' + j])
                            specs[i].create_spec.resources[j] = this._getValue(this.current.variables[serviceName + '_' + j] + '', typeof specs[i].create_spec.resources[j]);

                    } else if (createSpec.resources[j] &amp;&amp; (createSpec.resources[j].constructor === Object || createSpec.resources[j].constructor === Array)) {
                        continue;

                    } else if (this.exclusionList.includes(j) || this.disabledFields.includes(j) || j == 'vm_name') {
                        continue;

                    } else {
                        if (this.current.variables[serviceName + '_' + j])
                            specs[i].create_spec.resources[j] = this._getValue(this.current.variables[serviceName + '_' + j] + '', typeof specs[i].create_spec.resources[j]);
                    }
                }
            }
            return specs;

        } catch (e) {
            this.logger.error("Nutanix_RequestUtil._fillSubstrateValue :- Exception caught while filling substrate variables value. Error :- " + e);
        }
    },

    _fillServiceValue: function(status, specs) {

        try {
            this.logger.debug("Inside Nutanix_RequestUtil._fillServiceValue.");

            for (var i in status) {
                var serviceName = status[i].name.toLowerCase().replace(/ /g, '_');

                var varList = status[i].variable_list;
                for (var j in varList) {

                    if (this.current.variables[serviceName + '_' + varList[j].name]) {
                        if (varList[j].type + '' == 'SECRET' || varList[j].type + '' == 'HTTP_SECRET' || varList[j].type + '' == 'EXEC_SECRET') {
                            specs[i].variable_list[j].attrs.is_secret_modified = true;
                        }
                        if (varList[j].data_type + '' &amp;&amp; varList[j].data_type + '' == 'LIST') {

                            specs[i].variable_list[j].value = (this._getValue(this.current.variables[serviceName + '_' + varList[j].name].getDisplayValue().replace(/, /g, ",") + '', specs[i].variable_list[j].val_type)).replace(/\r/g, "");

                        } else if (varList[j].type + '' == "LOCAL" &amp;&amp; varList[j].options &amp;&amp; varList[j].options.type + '' == "PREDEFINED" &amp;&amp; (varList[j].options.choices).length &lt;= 0 &amp;&amp; (varList[j].val_type + '' == 'DATE' || varList[j].val_type + '' == 'DATE_TIME')) {

                            var newdtVal = this._formattedDateTimeNutanix(this.current.variables[serviceName + '_' + varList[j].name].getDisplayValue() + '', specs[i].variable_list[j].val_type);
                            specs[i].variable_list[j].value = this._getValue(newdtVal + '', typeof newdtVal);

                        } else {

                            specs[i].variable_list[j].value = (this._getValue(this.current.variables[serviceName + '_' + varList[j].name] + '', specs[i].variable_list[j].val_type)).replace(/\r\n/g, '\n');

                        }

                    }
                }
            }
            return specs;

        } catch (e) {
            this.logger.error("Nutanix_RequestUtil._fillServiceValue :- Exception caught while filling service vairables data. Error :- " + e);
        }
    },

    _makeRelations: function(parsed) {

        try {
            this.logger.debug("Inside Nutanix_RequestUtil._makeRelations.");
            var app_profile_list = parsed.app_profile_list;

            for (var i = 0; i &lt; app_profile_list.length; i++) {
                var appProfile = app_profile_list[i];
                var deployment_create_list = appProfile.deployment_create_list;

                for (var j = 0; j &lt; deployment_create_list.length; j++) {

                    var deployemnt = deployment_create_list[j];
                    this.sub_deploy_rel[deployemnt.substrate_local_reference.uuid] = {
                        "name": deployemnt.substrate_local_reference.name,
                        "deployemnt_uuid": deployemnt.uuid,
                        "deployemnt_name": deployemnt.name,
                        "profile_uuid": appProfile.uuid
                    };


                    var package_local_reference_list = deployemnt.package_local_reference_list;

                    for (k = 0; k &lt; package_local_reference_list.length; k++) {
                        var packge = package_local_reference_list[k];

                        if (!this.deploy_pack_rel[deployemnt.uuid])
                            this.deploy_pack_rel[deployemnt.uuid] = [];

                        this.deploy_pack_rel[deployemnt.uuid].push({
                            "name": deployemnt.name,
                            "package_uuid": packge.uuid,
                            "package_name": packge.name,
                        });
                    }

                }
            }


            var packageList = parsed.package_definition_list;

            for (var i = 0; i &lt; packageList.length; i++) {

                var packge = packageList[i];
                var uuid = packge.uuid;
                var serviceList = packge.service_local_reference_list;

                for (var j = 0; j &lt; serviceList.length; j++) {

                    var service = serviceList[j];
                    if (!this.pack_serv_rel[uuid])
                        this.pack_serv_rel[uuid] = [];

                    this.pack_serv_rel[uuid].push({
                        "name": packge.name,
                        "serv_name": service.name,
                        "serv_uuid": service.uuid
                    });
                }
            }
        } catch (e) {
            this.logger.error("Nutanix_RequestUtil._makeRelations:- Exception caught while making relation. Error :- " + e);
        }

    },

    _formattedDateTimeNutanix: function(val, type) {

        var dtVal = val + '';
        var newdtVal;
        dtVal = dtVal.split(' ');
        var g = new GlideDateTime();
        g.setValue(dtVal[0]);
        var month = ((g.getMonthUTC() + '').length &lt; 2) ? '0' + g.getMonthUTC() : g.getMonthUTC();
        var day = ((g.getDayOfMonthUTC() + '').length &lt; 2) ? '0' + g.getDayOfMonthUTC() : g.getDayOfMonthUTC();

        if (type == 'DATE') {
            newdtVal = day + '/' + month + '/' + g.getYearUTC();
        } else {
            var gtime1 = new GlideTime();
            gtime1.setValue(dtVal[1]);
            g.add(gtime1);

            var hour = ((gtime1.getHourOfDayUTC() + '').length &lt; 2) ? '0' + gtime1.getHourOfDayUTC() : gtime1.getHourOfDayUTC();
            var min = ((gtime1.getMinutesUTC() + '').length &lt; 2) ? '0' + gtime1.getMinutesUTC() : gtime1.getMinutesUTC();
            var sec = ((gtime1.getSeconds() + '').length &lt; 2) ? '0' + gtime1.getSeconds() : gtime1.getSeconds();

            newdtVal = day + '/' + month + '/' + g.getYearUTC() + ' - ' + hour + ":" + min + ":" + sec;
        }
        return newdtVal;
    },

    _getValue: function(val, type) {

        if (type + '' == 'STRING' || type + '' == 'string')
            return val + '';
        else
        if (type + '' == 'number')
            return parseInt(val);
        else
        if (type + '' == 'boolean') {
            if (val == 'true')
                return true;
            else
            if (val == 'false')
                return false;
        }

        return val;
    },

    type: 'Nutanix_RequestUtil'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;mumtaz.ansari&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-29 05:48:17&lt;/sys_created_on&gt;&lt;sys_id&gt;99b80fbd37022300d27b8cf6c3990efb&lt;/sys_id&gt;&lt;sys_mod_count&gt;157&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_RequestUtil&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_99b80fbd37022300d27b8cf6c3990efb&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;subuhee.fathima&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-03-18 11:42:41&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>937457937</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>5aab0533c3d4569064971612b4013150</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2ff90000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Nutanix_RequestUtil</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>34df5e05fd450210b355d84575395a53</update_guid>
<update_guid_history>34df5e05fd450210b355d84575395a53:937457937,15cf5a057e4502105f7dfe024744366c:-984886670,2cd1a2ba7cf88a100b3a2ab2e97dec17:522427666,506db4892c601110e7443750a6b895a1:1920033117,60ff7c427beda1103008757d1e927488:-1395854743,506db4892c601110e7443750a6b895a1:1920033117,7289b221266d61105235bbb579a8342b:-1395854743,506db4892c601110e7443750a6b895a1:1920033117,3e72dd8010e9e910803e86638bffa12d:-1395854743,506db4892c601110e7443750a6b895a1:1920033117,270d3481b8601110d244f669ff1c07d0:472503843,8b99f40518601110496fdf910c9e2b23:252580859,e706f841a5601110744efa612a58c1b3:1014096188,ae71fcc9b8201110a7c0e950cdf93e6b:1779060374,4785f77c0da011100dbefece1bd88a0c:-333459370,ff837f3c06a01110949cb77d5cde28a9:-670241019,a70377f8a7a011100b20eebb00d4132c:-1582845851,5d7cabb472a01110d905318dd46a24d5:-2008857391,b70f9bf4e0601110d15aecaf9e08aadb:-903056797,06bc57f4c560111077d36fe7a6bacbed:1910325906,c682e664a96c95108852485149bdc46b:840554903,41b12624fe6c95107671321f5d40ad1b:-462904253,cf2eda606b6c9510e1c3bb471962247b:1683675621,773b5a20d02c9510b7255829f77c1728:1726327352,8387c26cd5e895108c8e6d623796f86c:973769003,c8c94980c095a09016904c98ee544125:909872311,d6283c8c7315a090ae0b1013a5948b5f:1671936417,9c47344ca115a0908ed303a780f3eca3:1148495380,9b27f84c6a15a090cd83eb5bdc153808:-302670220,ac06b40c1715a090a2d2072072d1891d:1377700335,c6433888d415a090b1b5025b9c312c35:318333795,5a8aa0040015a090f11251f304d5d5c5:673483739,2009ac801d15a090a9361035129d40ba:-1854532509,44516c843ad1a090e540a85b5c2c1a9f:637778955,3aee94cc8491a090eef350c9acb91dad:-1541469756,ea79d488ab91a090997814c9cc68cce0:-1349788867,8fe59088c891a09043315dac75d59bd5:-1959754021,5f99118f84c5ec50dcbaeb6c2875020c:1140770057,6e39d58743c5ec501025a3cd3f9dc94a:1139938441,0e96c5471985ec50e93386b5c627a6d9:-1684479228,f97efc038085ec50fe3bf72282dba51b:630775010,8b12800b5ec1ec50422d142e5174c0ad:-413473327,679fb7765ac1ec504ceb7f9f4e361ea4:819420549,0a78a3b410c0a010bb1c82893c0b58a4:-1812277617,04cfee072873dc10483756a92d30da59:-488872953,2aeca6c3a133dc10c0fb75e4aba1aeba:-1691426687,769aea435733dc103e1d4453d197270b:-2081613981,a157264f6aff9c10313c81fa4216db9b:-2023738616,3be31a0307bf9c109ee49373f9d54c62:-62666641,c4ef21870ffb9c100ddf1d0076f206fd:-730169676,1c7e6d8f2dbb9c10089232a5f4bb52d1:165148585,49282d8fc6bb9c10d182710081cb4b55:-332078485,07a22dc7a57b9c10b2599568c4c37657:-1422674545,a167825bcc3b08104e0bf3362b967765:637807631,63873616a713041028b906afbaa26b2a:-53126073,058f2eda7fdfc0108d26230a81c3367a:-15629299,80370a46b013c010b904f5f24269311f:959277270,c5f5c6867f13c0105c13d7fbf6435558:-1459809958,d6540e06e9df80108c55ffdc7992a724:-2011301882,c8440a064613c01016af48072de5d3b0:-714206144,20c3824abbdf8010d3f6e808ab84f9d6:-1215120319,52d0fdce249f80102ef062838cab96ef:-851026276,b54be54a7a9f8010e56e3b0477ec6270:332177827,082b690a6b9f80104c36c36d447058b6:-678959269,760bed86f09f80108b679dbc3695e590:-1700460389,fd992502fe9f80103801593dadb221fb:-219721515,b37621ce4d5f8010ec54036df9627bf7:1224588623,870670baa211001002873b2019fa2168:-537181501,5bb9bd2832190810e9494816e0c41114:1323255798,69e8eda8efd50810f6accea72f2d268e:-507750720,4798ad6893d50810f6a521e09ef3d38a:1139577552,0439073e77cdc0105e631a81a715beec:463437016,d1d3f636a98dc0105851096c8dede4a1:-231264049,1c7cba6ebfc1c01010e4c5f1fb08ef99:-23376183,ebe2f6ee0681c010ef0d2f54a793a634:-1563495646,5d8ff7c80cbb3300414fbd0fd33d2aa8:968953996,e48d73c82ebb33008242c495f6285b89:-1784746111,812bb788a0bb330074a13700724d1655:-825789407,31cab788a1bb3300e24ddc781b6ba34e:600160556,3b8933487abb3300cf46565da4aca46e:29161580,33d8bb4c8c7b330079135787fe3a71de:-551808420,decbcf844933b3000346424ea14898ce:1820673985,70b7cf8cc0ff7300ccb63e11a958db06:-1018579340,779a724c35ff73000e6000c607a64d96:-569707585,c66932c85bff7300f82e9be3507eae36:-1196381055,e96162c054bf7300e336822f3fe0acbc:1174751134,9b2f9240d6bf7300af809174f9d927b7:-2103457113,84cb8e04767f73000043a604f48585dc:769017547,399a4a00887f7300e86c42cecc3f5c4b:-1377990933,bbce5637a9477700e00429a9663ca217:1080444183,1b39dc7f0ecf3700784401c4874998ce:187824359,18fd1bebd04f37001be3cf430d761d9f:-1752048643,767c9fab3ecb3700e41e4324a831f574:-924059476,6cc07f539c473700e7d108155f84ca09:128319861,977476538843370088ff172b9028200b:-864278758,1a4b6fda6a0373001a9d049fe37d8e3b:-124581098,d4d9ebdab60373008e64f07e29add777:589189155,3ea96f9ac20373002ff86c3ef40fee73:1951704111,67911f9aa18f3300b107d41582f8a5c7:1453820231,6b874b164c8f3300d7be794cd62d5b15:-2125612781,c1a64356ce8f3300d444eabbd1fa3e3c:-1550698529,f7a50716118f330001f79ca617d23134:1587784339,754387de3b4f330017cfbb8c3c51c837:1199525427,66a0475e444f3300a9a8bd36963bbfa6:1263041339,c9eebedafb4f3300acb71a3575f1fc72:2109108564,e6a47692cf4f33001b5c47025dea62c5:2104508657,7a6fa219e582b300773ad360f0f47227:955426953,ad1ec9cd15c27300ba9b267fbeeb84e6:532254034,51dd01450ac2730012ad0007bf0ec66e:-933182004,07c61fb1d7213300d9893426bfcce552:225112864,a800be555b6d7300f14a18a4cdeb65c8:49452486,399f6655b56d73009fb6350130c88a86:-79914508,936faa55cb6d7300db9111f026a42f01:-561432537,373fae15a46d73008600a84129836041:1353126046,aefe2255f16d7300a193a6a38663fd7b:2106697540,7cf82edddd2d73000306ba9f0e228589:2063534842,c687eaddc02d7300cf90113636a39b32:-846873265,85a846d9ece973001363e2834c1abc70:1875537465,4f511115e5297300cabb8896e47c40fb:1712295517,e9be83686b613300b9f621d9f3dcc1b6:-1554885763,da8aa18711913300dafbd448e5175fca:1022628135,062d5bb329c533006a44dc2bbae778f3:-395513899,3bea1fbfdd853300111c88cfe3188487:-1438981185,270a53bf5b853300978a7fdddbff1c1a:-905094757,44091f3f3a853300648270b136de057f:1627376403,60e41bbb89853300aa08a28295962dcc:-1141735246,339413bb4a8533009c20630ccbf6bbbf:-570292,e2b2dbf7f98533007e300a96e038d8a3:-332688474,14329737358533002ee3833345d4e439:2039241043,19cdc3371d8533008397e317f270ec3e:-354297461,a14acfbb404533002169c087a3d3be51:-1558249679,9e35fe3f4b05330087004bfb13e5149e:1318991146,5334fefb8405330045441a253dd2ede8:-1147630970,628f1af7c4c13300ecbe8163cffb40b6:1662129211,2a0186377e413300a4f6c82189ba2037:1401083437,46683dff9701330070203ca4657df596:1012963979,6708f5ff6601330026ef63d19ad1c54f:323786025,75a7fd3f83013300b5cd803a63f5bffc:61963817,8e0479fbd9013300ba7abeaf44db9367:-1370725903,be7271bbd5013300418a1d55586c5b8b:-1590245040,2a6283536cb07300bb81187df855f738:138620494,24a10fdfaa707300b1dcfa420e17a0f3:-80540937,f601839fba707300a3aec1c4d45021e2:355059834,d6dffa1f77707300715d540782efd1bf:1976339820,d20f7a1f27707300fa9628ddaaaf4a9f:1733828481,cefc6e53073073005c662085807a11cb:-1814177745,5c3c9693ee3073008520760865d781f3:1478869226,68f7d653233073003950a0b475e6bb2f:-1855445755,634f82dfd3fc330029701d0a3e750d86:19373511,b8b44e1bc3fc3300fe7c55f8a93fb2e6:1339607997,7e98a959b47c33001038b56ecb510889:-393100384,5238a15184bc33009baed544110c1799:-367803242,76a80b456e3833000531b65e57835d38:-204992527,f046ecd25f532300c04bf4b60b9dfc9d:-140438105,fa2beb37b30323001ec050027d2c2247:1633487970,16fb0550c15223000ed73fb9c64cc155:-725420091,36db09508a52230024c8a61c940b865a:-1957187259,cd68855c051223001f09bc8cf34c527c:-725420091,33c80affc40263004bd6794647e3a3dc:1594745523,d7066b32b10e230022533e020d1ca743:1467091764,46d0588a8c42a300e039997aaa0c19d1:1705671716,2d6a08065f42a300b1e5ccefaeab4c26:1432887994,7676cc826b42a300abbc64557f4a1890:-757080926,68154482f642a3009f9326ce31122ece:-1774439161,1c1bf73dabc2230008fcb4e582aa9d51:570741894,f3aafff957c22300a5bc76b10ef74676:-1540640015,b448bb7923c22300fb5e8c8c5025ad67:954728334,c6b63f3971c223004a0638d90e86072a:-1613735073,fa36fb3965c223005b8eb50fa2707706:-1798848525,06d5bbf54bc2230051cbb47151850cad:-2074535242,3fb57739b9c2230086c75bfefcb96016:956584800,70fe0fb177422300f29ab3c7214dbfb3:907650355,fdddcbbd7a022300b047b050df879fd0:-48898052,27eb4f314b422300e59a13c8d245be42:-494645910,6dc8cbbd640223007af7efd1eac19d9a:523166658</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_c9beb5c39369421090acfa497bba104d</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="INSERT_OR_UPDATE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2024-04-18 10:59:22</sys_created_on><sys_id>c9beb5c39369421090acfa497bba104d</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.calm_admin</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_security_acl display_value="x_nuta2_nutanix_ca_environment_subnet_mtom">0f480cb82f77a1904627de1a2799b6f0</sys_security_acl><sys_update_name>sys_security_acl_role_c9beb5c39369421090acfa497bba104d</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2024-04-18 10:59:22</sys_updated_on><sys_user_role display_value="x_nuta2_nutanix_ca.calm_admin" name="x_nuta2_nutanix_ca.calm_admin">7b91d2024fc1630065e48020a310c7bb</sys_user_role></sys_security_acl_role></record_update>]]></payload>
<payload_hash>1469471732</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>5aab0533c3d4569064971612b4013153</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c308f0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.calm_admin</target_name>
<type>Access Roles</type>
<update_domain>global</update_domain>
<update_guid>b43fbdc39c694210598bd10f88da63c4</update_guid>
<update_guid_history>b43fbdc39c694210598bd10f88da63c4:1469471732</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_nutanix_calm_credential_ssh_private_key</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="ssh_private_key" table="x_nuta2_nutanix_ca_nutanix_calm_credential"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;SSH Private Key&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;ssh_private_key&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;formula/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value=""&gt;password2&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;1000&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_nutanix_calm_credential&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-20 23:42:12&lt;/sys_created_on&gt;&lt;sys_id&gt;61f7a8d337fda300fdfc097973990e13&lt;/sys_id&gt;&lt;sys_name&gt;SSH Private Key&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_nutanix_calm_credential_ssh_private_key&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-01-09 10:35:56&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;virtual_type&gt;script&lt;/virtual_type&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>-129320018</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>5aab4133c3d4569064971612b4013121</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f690000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_calm_credential</table>
<target_name>Credentials.SSH Private Key</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>26da72fa036f71107c3d7b8bec53ef85</update_guid>
<update_guid_history>26da72fa036f71107c3d7b8bec53ef85:-129320018,09486417eefda300a9d17d787a4a568a:522207344,4b8f78ce6fada1101e035f5d462a72c0:-837873568,09486417eefda300a9d17d787a4a568a:522207344,39e87ae9eb2d611020764b845adbd20d:-837873568,09486417eefda300a9d17d787a4a568a:522207344,0ee1958ce5a9e91056b2a0e0e0e686b8:-837873568,09486417eefda300a9d17d787a4a568a:522207344</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_index_x_nuta2_nutanix_ca_environment_subnet_mtom_environment_uuid_subnet_uuid</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_index"><sys_index action="INSERT_OR_UPDATE"><col_name_string>environment_uuid,subnet_uuid</col_name_string><index_col_name>f04280742f77a1904627de1a2799b67e,29080cf42f77a1904627de1a2799b6d5</index_col_name><logical_table_name>x_nuta2_nutanix_ca_environment_subnet_mtom</logical_table_name><sys_class_name>sys_index</sys_class_name><sys_created_by>system</sys_created_by><sys_created_on>2024-03-20 06:18:45</sys_created_on><sys_id>dfd8e36193c1c21090acfa497bba10fb</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_index_x_nuta2_nutanix_ca_environment_subnet_mtom_environment_uuid_subnet_uuid</sys_update_name><sys_updated_by>system</sys_updated_by><sys_updated_on>2024-03-20 06:18:45</sys_updated_on><table display_value="Environment Subnet MTOM" name="x_nuta2_nutanix_ca_environment_subnet_mtom">0042c0742f77a1904627de1a2799b659</table><unique_index>true</unique_index></sys_index></record_update>]]></payload>
<payload_hash>-618385752</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>5aab4133c3d4569064971612b4013124</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30770000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>0042c0742f77a1904627de1a2799b659</table>
<target_name>Environment Subnet MTOM: Environment UUID, Subnet UUID</target_name>
<type>Indexes</type>
<update_domain>global</update_domain>
<update_guid>dbd86761eec1c21018eb34415a746c1c</update_guid>
<update_guid_history>dbd86761eec1c21018eb34415a746c1c:-618385752</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_45011fe1db503300bfa82a9a48961935</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Delete_Inventory&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Delete_Inventory&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Delete_Inventory = Class.create();
Delete_Inventory.prototype = {
	initialize: function() {
		this.logger = new Nutanix_Calm_Logger();
		this.utils = new Nutanix_Calm_Utils();
	},
	
	deleteInventory: function() {
		
		this.manageIncidents();
		
		var table_name = ["x_nuta2_nutanix_ca_nutanix_catalog_items","x_nuta2_nutanix_ca_nutanix_calm_run_book","x_nuta2_nutanix_ca_nutanix_staging_cloud_providers","x_nuta2_nutanix_ca_restore_points","x_nuta2_nutanix_ca_nutanix_cloud_providers","x_nuta2_nutanix_ca_generic_table_for_dropdown","x_nuta2_nutanix_ca_nutanix_staging_application", "x_nuta2_nutanix_ca_nutanix_calm_action", "x_nuta2_nutanix_ca_nutanix_calm_application", "x_nuta2_nutanix_ca_app_action_workflow_trigger", "x_nuta2_nutanix_ca_application_deployment", "x_nuta2_nutanix_ca_nutanix_blueprint", "x_nuta2_nutanix_ca_nutanix_project", "x_nuta2_nutanix_ca_nutanix_staging_project", "x_nuta2_nutanix_ca_nutanix_staging_blueprints", "x_nuta2_nutanix_ca_nutanix_process_queue", "x_nuta2_nutanix_ca_application_profile", "x_nuta2_nutanix_ca_nutanix_staging_marketplace_items", "x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation", "x_nuta2_nutanix_ca_catalog_variables_properties", "x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship", "x_nuta2_nutanix_ca_nutanix_calm_credential", "x_nuta2_nutanix_ca_nutanix_calm_app_runlogs", "x_nuta2_nutanix_ca_nutanix_staging_environment", "x_nuta2_nutanix_ca_nutanix_runtime_configuration",  "x_nuta2_nutanix_ca_subnet","x_nuta2_nutanix_ca_nutanix_environment","x_nuta2_nutanix_ca_nutanix_marketplaceitems","x_nuta2_nutanix_ca_disk_list","x_nuta2_nutanix_ca_service","x_nuta2_nutanix_ca_pod","x_nuta2_nutanix_ca_container","x_nuta2_nutanix_ca_nutanix_staging_endpoint","x_nuta2_nutanix_ca_endpoints","x_nuta2_nutanix_ca_runbooks","x_nuta2_nutanix_ca_nutanix_staging_runbooks","x_nuta2_nutanix_ca_environment_subnet_mtom" ];
		for (var i = 0; i &lt; table_name.length; i++) {
			this.logger.info("Cleaning table: " + table_name[i]);
			var k = new GlideRecord(table_name[i] + '');
			k.deleteMultiple();
		}
		
		var grGroup=new GlideRecord('sys_user_group');
		grGroup.addEncodedQuery('x_nuta2_nutanix_ca_nutanix_group_uuidISNOTEMPTY');
		grGroup.query();
		while(grGroup.next()) {
			grGroup.x_nuta2_nutanix_ca_nutanix_group_uuid = '';
			grGroup.update();
		}
		this.logger.info('User groups Nutanix UUID has been cleaned');
		
		var grUser=new GlideRecord('sys_user');
		grUser.addEncodedQuery('x_nuta2_nutanix_ca_nutanix_uuidISNOTEMPTY');
		grUser.query();
		while(grUser.next()) {
			grUser.x_nuta2_nutanix_ca_nutanix_uuid = '';
			grUser.update();
		}
		this.logger.info('Users Nutanix UUID has been cleaned');
		
		var grProp = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
		grProp.addQuery('sys_id', gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'));
		grProp.query();
		if(grProp.next()) {
			grProp.calm_instance = '';
			grProp.calm_version = '';
			grProp.calm_admin_username = '';
			grProp.calm_admin_password = '';
			grProp.credential = "";
			grProp.mid_application = "";
			grProp.mid_server = "";
			grProp.calm_saas_and_servicenow = false;
			grProp.datadelflag = 'no';
			grProp.update();
		}
		gs.setProperty('x_nuta2_nutanix_ca.check.authentication', 'false');
		this.utils.showHideSyncUiAction('false');
		this.logger.info('Application properties page has been cleaned');
		
	},
	
	manageIncidents: function() {
		
		try{
			this.logger.info("Resolving orphaned incidents.");
			
			var incGr = new GlideRecord('incident');
			incGr.addEncodedQuery('x_nuta2_nutanix_ca_catalog_item!=NULL^state=6');   //update
			incGr.query();
			
			while(incGr.next()){
				
				incGr.incident_state = 7;
				incGr.state = 7;
				incGr.comments = 'Auto closed all the resolved incidents as inventory was cleaned.';
				incGr.update();
			}
			
			// 			incGr.incident_state = 7;
			// 			incGr.state = 7;
			// 			incGr.comments = 'Auto closed all the resolved incidents as inventory was cleaned.';
			// 			incGr.updateMultiple();
			//
			
			
			var incGr = new GlideRecord('incident');
			incGr.addEncodedQuery('x_nuta2_nutanix_ca_catalog_item!=NULL^incident_state!=8^incident_state!=7');   //update
			incGr.query();
			
			while(incGr.next()){
				
				incGr.incident_state = 8;
				incGr.state = 8;
				incGr.comments = 'Auto cancelled all the open incidents as inventory was cleaned.';
				
				incGr.close_code = 'Closed/Resolved by Caller';
				incGr.close_notes = 'Auto cancelled all the open incidents as inventory was cleaned.';
				
				incGr.update();
			}
			
			// 			incGr.incident_state = 8;
			// 			incGr.state = 8;
			// 			incGr.comments = 'Auto cancelled all the open incidents as inventory was cleaned.';
			// 			incGr.close_code = 'Closed/Resolved by Caller';
			// 			incGr.close_notes = 'Auto cancelled all the open incidents as inventory was cleaned.';
			// 			incGr.updateMultiple();
			
		} catch(e) {
			this.logger.error('Exception caught in updating incidents: '+e);
		}
	},
	
	type: 'Delete_Inventory'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;Bharat&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-03-20 08:19:39&lt;/sys_created_on&gt;&lt;sys_id&gt;45011fe1db503300bfa82a9a48961935&lt;/sys_id&gt;&lt;sys_mod_count&gt;44&lt;/sys_mod_count&gt;&lt;sys_name&gt;Delete_Inventory&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_45011fe1db503300bfa82a9a48961935&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-04-22 06:48:47&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1688861548</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>5eab0533c3d4569064971612b401314f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30be0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Delete_Inventory</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>093c6d14b1f9c61050abdc2842b69c53</update_guid>
<update_guid_history>093c6d14b1f9c61050abdc2842b69c53:-1688861548,fc4c890366654210877ef32e8859e1dc:1623394571,fd76210aeca8bc101fb17df1385d993b:-1338829145,96bf7802b9eda1103bd4625359a854ed:-1560580173,fd76210aeca8bc101fb17df1385d993b:-1338829145,568972210f6d6110c7fb940d7cba9c49:-1560580173,fd76210aeca8bc101fb17df1385d993b:-1338829145,35121100c0e9e9108f0ae92d73eff05a:-1560580173,fd76210aeca8bc101fb17df1385d993b:-1338829145,12a9d63ac086e4109d0e8311108f5a34:1906231624,29d640da5a7dd4108de22cb422c746f9:1974247670,5a96849af47dd4107a6d3530cab3313f:678768724,82abb70e39f9d410937d0f44ee7867a9:678768724,f878cb5ecf5b001058f5b325f7fea460:-1427804539,559cf2053613401022163212cccadf22:-513215515,357c3a0590134010d5d14dc0c968fe84:57060016,90ddf0652b474010dd99d833b0a7fa31:1128504530,c47cd0425f733300c6ddf31bbeb58d52:631284351,4949d7299b733300d4847d446540563c:1495938269,1f217aaa89d7b3000758d28afec4b5e3:1128063356,27017eaa35d7b300f0af3db5cb9b50eb:39899906,4f75eba1d25333009848c63ac8bf0f47:986094864,3c7ccfe1ecd333001fe34c68f5e3f0f7:-800179717,93b3b98f48913300c154a42fc49c7170:-922364270,8a93bd8f929133002519ad0c7ac8e461:1315734468,0c33398f87913300992bca4525b3ae90:-1734552711,f2d2b58fde91330020eb2e5596998ddc:-1540970848,9741fd0fa591330069b5094f93f9991b:1561888253,8d21790ffc9133007225551673db33ed:1084065277,dedfe58726913300d1804d334f0e648b:809203485,fb991fcc6bb43300c855c324a20decc5:-1068277532,f0d6f64c86b03300e148f8e89c669c7e:-2072802855,29092684dab03300f336d4a534364a07:-668449332,a4e66a80f3b0330084f7eab03d51198a:654653370,af44e24076b03300e0ff842da4b7cdff:610269365,a150a2e4bfec730087bd864bb9ecd572:-1148840969,7d4bfd20b36c730056ba7928a3564363:-956632959,5fe9f9aca32c7300f1dec37a32b76418:-878086685,c0885777809033005c1fddf84191bae2:-1991695452,a47083ef8d143300792346ac2822044f:-184992236,e644fae3d8143300cc39ee8e606e660b:292766950,97243ae39c143300c3f4b973768fa6cd:1979628957,b8d8f5eb96103300796bdac686376fa8:-1582777843,8ef920df1d1033007067fbc50a69fe00:654420273,c9e8ac5f8b1033008b002ce54791f1da:-1850304498,31c7e09f30103300f50598b7ff9ab3c3:-373099527,dcf2ac1b2e103300dcf5429f6e194e55:327731312,f76554f1f4543300f6b5224d3e075e22:564936578,c263dcb1e0543300c3d36a560c81e34a:351978604,65001cfdb01433002088645ea1ce7911:-985108340,548af36d61d033004f1bd0c6e65a75ab:1874040898,5fa1f32523d033004afc89ba06007a71:592173411,d550fb61ffd03300ccf463a761d3051b:-2068273517,2238d3a1559033008e21d5a2a0cdeecc:121862291,1a841bed26503300d3cf2d647df8a5ac:1668645695,c1e3176da0503300ab364aa84b472f91:-349778611</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_0f484cb82f77a1904627de1a2799b614</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="INSERT_OR_UPDATE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 06:32:32</sys_created_on><sys_id>0f484cb82f77a1904627de1a2799b614</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.user</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_security_acl display_value="x_nuta2_nutanix_ca_environment_subnet_mtom">4b484cb82f77a1904627de1a2799b611</sys_security_acl><sys_update_name>sys_security_acl_role_0f484cb82f77a1904627de1a2799b614</sys_update_name><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 06:32:32</sys_updated_on><sys_user_role display_value="x_nuta2_nutanix_ca.user" name="x_nuta2_nutanix_ca.user">3376fd254f452b001200e5201310c717</sys_user_role><transaction_id/></sys_security_acl_role></record_update>]]></payload>
<payload_hash>-465239527</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>5eab0533c3d4569064971612b4013152</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30700000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.user</target_name>
<type>Access Roles</type>
<update_domain>global</update_domain>
<update_guid>d0a38d7c2ffba1907b2b5d806f2a5e09</update_guid>
<update_guid_history>d0a38d7c2ffba1907b2b5d806f2a5e09:-465239527,c7484cb88f77a190b80ffe087e9adf16:-465239527</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_environment_subnet_mtom_null</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="" table="x_nuta2_nutanix_ca_environment_subnet_mtom"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label/&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element/&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;formula/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value="Collection"&gt;collection&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;40&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_environment_subnet_mtom&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;ratakondala.arun&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-06-30 06:32:32&lt;/sys_created_on&gt;&lt;sys_id&gt;97484cb82f77a1904627de1a2799b649&lt;/sys_id&gt;&lt;sys_name&gt;x_nuta2_nutanix_ca_environment_subnet_mtom&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_environment_subnet_mtom_null&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;ratakondala.arun&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-06-30 06:32:32&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;virtual_type&gt;script&lt;/virtual_type&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>2019866063</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>5eab4133c3d4569064971612b4013120</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30190000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>Environment Subnet MTOM</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>88a3897c23fba19034dd71eb059b6fb2</update_guid>
<update_guid_history>88a3897c23fba19034dd71eb059b6fb2:2019866063,97484cb84277a190aa20b3bce0e9b5ba:2019866063</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_documentation_x_nuta2_nutanix_ca_subnet_subnet_type_en</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_documentation element="subnet_type" label="Subnet Type" language="en" table="x_nuta2_nutanix_ca_subnet"><sys_documentation action="INSERT_OR_UPDATE"><element>subnet_type</element><help/><hint/><label>Subnet Type</label><language>en</language><name>x_nuta2_nutanix_ca_subnet</name><plural>Subnet Types</plural><sys_class_name>sys_documentation</sys_class_name><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-04-26 07:12:38</sys_created_on><sys_id>e5089e2993358e1090acfa497bba10b3</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Subnet Type</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_documentation_x_nuta2_nutanix_ca_subnet_subnet_type_en</sys_update_name><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-04-26 07:12:38</sys_updated_on><url/><url_target/></sys_documentation></sys_documentation></record_update>]]></payload>
<payload_hash>-1408641751</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>5eab4133c3d4569064971612b4013123</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30df0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_subnet</table>
<target_name>Subnet.Subnet Type</target_name>
<type>Field Label</type>
<update_domain>global</update_domain>
<update_guid>6d089e2932358e109eff60cc1b9e49cb</update_guid>
<update_guid_history>6d089e2932358e109eff60cc1b9e49cb:-1408641751</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_e8934fe64f4233002aca224f9310c7f6</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name/&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;false&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;current.state+''=='active' &amp;amp;&amp;amp; new Nutanix_ClientServerScriptBridge().checkQueue()&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style/&gt;&lt;format_for_configurable_workspace&gt;false&lt;/format_for_configurable_workspace&gt;&lt;hint/&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;messages/&gt;&lt;name&gt;Move To Draft&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;74&lt;/order&gt;&lt;script&gt;&lt;![CDATA[var url = 'x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=b2d6d6a54f41230065e48020a310c7b7&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';

if(current.state+''=='deleted' ){
	
	gs.addErrorMessage("Can not move deleted catalog item to draft.");
	url = 'x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=b2d6d6a54f41230065e48020a310c7b7&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';
}else{
	
	current.state = 'draft';
	current.update();

	if(current.item_name.getRefRecord()){
	var catItem = current.item_name.getRefRecord();
	catItem.active = false;
	catItem.update();
	gs.addInfoMessage("Catalog Item " + current.item_name.name + " moved to Draft.");
	url = 'x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=b2d6d6a54f41230065e48020a310c7b7&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';
}
}

action.setRedirectURL(url);


]]&gt;&lt;/script&gt;&lt;show_insert&gt;true&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-06-18 09:33:14&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;e8934fe64f4233002aca224f9310c7f6&lt;/sys_id&gt;&lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;&lt;sys_name&gt;Move To Draft&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_e8934fe64f4233002aca224f9310c7f6&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;subuhee.fathima&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-03-15 08:54:12&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_nutanix_runtime_configuration&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>-354004439</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>62ab0533c3d4569064971612b4013155</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f590000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_runtime_configuration</table>
<target_name>Move To Draft</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>6b7cd6005a8502509e2ac84b4d4fd167</update_guid>
<update_guid_history>6b7cd6005a8502509e2ac84b4d4fd167:-354004439,f32c96cc3e450250d3066f896a8229d9:6485928,1d13176ee45ff550041e25d7d4dc78a2:-217557732,456c0bee8e42330059675b735689c559:-1265849362,d610098233eda110c360a35283ca48f4:1676157426,456c0bee8e42330059675b735689c559:-1265849362,b5b97e616c6d611069880374cb18246f:1676157426,456c0bee8e42330059675b735689c559:-1265849362,7ca21504e9e9e91052d95507ae1b7060:1676157426,456c0bee8e42330059675b735689c559:-1265849362,456c0bee8e42330059675b735689c559:-1265849362,d13a4feed84233002f05db9cba638d39:1732518684,a408876ee0423300ebdf281d51e4cf53:1658199920,d9c7476edd4233001ee0a98d047ccb77:1144019205,3d67432e2c423300959e25f5d8184d8a:-915233936,e69643aac6423300562e6d5cc5c4223c:-857792999,df460fea3e423300aface432fc77a0c9:-1382425657,8c058b2a6d423300212b3f48cfe7ba3a:1931234209,e1e44faaab423300ed9f863903080625:-1658124543,e8d383e60a423300165d1d33878c130b:1931234209</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_user_role_3376fd254f452b001200e5201310c717</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_user_role"><sys_user_role action="INSERT_OR_UPDATE"><assignable_by/><can_delegate>false</can_delegate><description/><elevated_privilege>false</elevated_privilege><grantable>true</grantable><includes_roles/><name>x_nuta2_nutanix_ca.user</name><requires_subscription>-1</requires_subscription><scoped_admin>false</scoped_admin><suffix>user</suffix><sys_class_name>sys_user_role</sys_class_name><sys_created_by>giridhar.shankar</sys_created_by><sys_created_on>2018-10-09 12:07:32</sys_created_on><sys_id>3376fd254f452b001200e5201310c717</sys_id><sys_mod_count>1</sys_mod_count><sys_name>x_nuta2_nutanix_ca.user</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_user_role_3376fd254f452b001200e5201310c717</sys_update_name><sys_updated_by>nikita.kumari</sys_updated_by><sys_updated_on>2018-11-21 09:03:47</sys_updated_on></sys_user_role></record_update>]]></payload>
<payload_hash>573202557</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>6aab0533c3d4569064971612b4013156</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30680000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.user</target_name>
<type>Role</type>
<update_domain>global</update_domain>
<update_guid>98a38d7cd3fba190e43599ad21a83107</update_guid>
<update_guid_history>98a38d7cd3fba190e43599ad21a83107:573202557,dfc8665b4c75e300ee43b63049ba44ab:-885678755,90bff40218eda1103f050d64b8573e63:2000806897,dfc8665b4c75e300ee43b63049ba44ab:-885678755,a3c9faa1186d6110c7e1cf7a570e1e36:2000806897,dfc8665b4c75e300ee43b63049ba44ab:-885678755,00129dcc5aa9e9104a248de17d080b20:2000806897,dfc8665b4c75e300ee43b63049ba44ab:-885678755,ce2281d403a563008c9e6e76b7890371:-549825081,7776316519452b008755c96126ac31e6:-822204612</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_page_0682926e9710111027f8fbc71153af91</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_page"&gt;&lt;sys_ui_page action="INSERT_OR_UPDATE"&gt;&lt;category&gt;general&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[var actSysId = "${JS:sysparm_sysId}";
var act_vars = "${JS:sysparm_actVarsArr}";
var action_name = "${JS:sysparm_actionName}";
var appName = "${JS:sysparm_appName}";
var parsedApp = "${JS:sysparm_parsedApp}";
var credential_list = "${JS:sysparm_credential_list}";
var subnet_reference = "${JS:sysparm_subnet_reference}";
var discLength = 0;
var nicLength = 0;
var tmp_array = [];
var nic_details = [];
var disc_details = [];
var categories_delete_allowed = 'false';
var categories_add_allowed = 'false';
var nic_delete_allowed = 'false';
var disk_delete_allowed = 'false';
var existing_nic_array = [];
var pre_defined_categories = [];
new GlideModal().get("dialog_loading").destroy();

var parsedAppBp = JSON.parse(act_vars);
var credential_list_parsed = JSON.parse(credential_list);
addLoadEvent(function() {
    firstCheck();
});

var $j = jQuery.noConflict();

$j("input").click(function() {
    $j(".errorData").html('');
});

$j('#cancelAct').mousedown(cancelDialog);
$j('#Update').mousedown(checkValueinJson);
$j('#cancelAct').mousedown(cancelDialog);
$j('#backToUpdate').mousedown(backToUpdate);
$j('#Confirm_Submission').mousedown(submitBlueprint);

function backToUpdate() {
    $j("#Confirm_Submission").hide();
    $j("#backToUpdate").hide();
    $j("#update_form").show();
    $j("#Update").show();
    $j("#diff_page").html('');
    $j("#diff_page").hide();
}

function cancelDialog() {
    GlideModal.get().destroy();
}
// Section: VM Configuration
function firstCheck() {
    var parsedAppBp = JSON.parse(act_vars);
    var resourceList = parsedAppBp.create_spec.resources;
    setFieldValues(resourceList);
}

function setFieldValues(resource_array) {
    for (var i in resource_array) {
        if (typeof resource_array[i] != 'object') {
            if (i == 'memory_size_mib')
                $j("#" + i).val(resource_array[i] / 1024);
            else
                $j("#" + i).val(resource_array[i]);
        }
    }
    validatepatchResponse(parsedApp);
}

function validatepatchResponse(response) {
    parsedApp = JSON.parse(response);
    var data = parsedApp.attrs_list[0].data;
    var backend_name = {
        "num_sockets_ruleset": "num_sockets",
        "num_vcpus_per_socket_ruleset": "num_vcpus_per_socket",
        "memory_size_mib_ruleset": "memory_size_mib"
    };
    for (var i in data) {
        if (i == 'num_sockets_ruleset' || i == 'num_vcpus_per_socket_ruleset' || i == 'memory_size_mib_ruleset') {
            if (data[i].editable &amp;&amp; data[i].editable + '' == 'true') {
                $j("#" + backend_name[i]).prop("min_value", data[i].min_value);
                $j("#" + backend_name[i]).prop("max_value", data[i].max_value);
                $j("#" + backend_name[i]).prop("disabled", false);
            }
        }
    }
}

function checkValueinJson() {
    var regex = /^\d+$/g;
    var num_sockets = $j("#num_sockets").val() + "";
    var cores = $j("#num_vcpus_per_socket").val() + "";
    var memory = $j("#memory_size_mib").val() + "";

    if (num_sockets.length != (parseInt(num_sockets) + "").length) {
        var error_div = '&lt;div class="alert alert-danger" style="padding: 5px 16px; position: relative; margin: 5px 0px;"&gt;Enter Numeric Value for VCPUs&lt;/div&gt;';
        $j(".errorData").html(error_div);
        return;
    } else if (($j("#num_sockets").prop("disabled") + '' == 'false') &amp;&amp; (parseInt(num_sockets) &lt; parseInt($j("#num_sockets").prop("min_value")) || parseInt(num_sockets) &gt; parseInt($j("#num_sockets").prop("max_value")))) {
        var error_div = '&lt;div class="alert alert-danger" style="padding: 5px 16px; position: relative; margin: 5px 0px;"&gt;Enter Value between ' + $j("#num_sockets").prop("min_value") + ' and ' + $j("#num_sockets").prop("max_value") + ' for VCPUs&lt;/div&gt;';
        $j(".errorData").html(error_div);
        return;
    }

    if (cores.length != (parseInt(cores) + "").length) {
        var error_div1 = '&lt;div class="alert alert-danger" style="padding: 5px 16px; position: relative; margin: 5px 0px;"&gt;Enter Numeric Value for Cores Per VCPUs&lt;/div&gt;';
        $j(".errorData").html(error_div1);
        return;
    } else if (($j("#num_vcpus_per_socket").prop("disabled") + '' == 'false') &amp;&amp; (parseInt(cores) &lt; parseInt($j("#num_vcpus_per_socket").prop("min_value")) || parseInt(cores) &gt; parseInt($j("#num_vcpus_per_socket").prop("max_value")))) {
        var error_div = '&lt;div class="alert alert-danger" style="padding: 5px 16px; position: relative; margin: 5px 0px;"&gt;Enter Value between ' + $j("#num_vcpus_per_socket").prop("min_value") + ' and ' + $j("#num_vcpus_per_socket").prop("max_value") + ' for Cores&lt;/div&gt;';
        $j(".errorData").html(error_div);
        return;
    }

    if (memory.length != (parseInt(memory) + "").length) {
        var error_div2 = '&lt;div class="alert alert-danger" style="padding: 5px 16px; position: relative; margin: 5px 0px;"&gt;Enter Numeric Value for Memory &lt;/div&gt;';
        $j(".errorData").html(error_div2);
        return;
    } else if (($j("#memory_size_mib").prop("disabled") + '' == 'false') &amp;&amp; (parseInt(memory) &lt; parseInt($j("#memory_size_mib").prop("min_value")) / 1024 || parseInt(memory) &gt; parseInt($j("#memory_size_mib").prop("max_value")) / 1024)) {
        var error_div = '&lt;div class="alert alert-danger" style="padding: 5px 16px; position: relative; margin: 5px 0px;"&gt;Enter Value between ' + $j("#memory_size_mib").prop("min_value") / 1024 + ' and ' + $j("#memory_size_mib").prop("max_value") / 1024 + ' for Memory&lt;/div&gt;';
        $j(".errorData").html(error_div);
        return;
    }
    for (var i = 1; i &lt; disc_details.length; i++) {
        if (disc_details[i].operation != 'delete') {
            // if (($j("#disk-" + i).val() + "").length != (parseInt($j("#disk-" + i).val() + "") + "").length) {
            if (($j("#disk-" + i).val() + "" == '')) {
                var error_div2 = '&lt;div class="alert alert-danger" style="padding: 5px 16px; position: relative; margin: 5px 0px;"&gt;Update field cannot be empty. A number is required.&lt;/div&gt;';
                $j(".errorData").html(error_div2);
                return;
            }
            if (($j("#disk-" + i).prop("disabled") + '' == 'false') &amp;&amp; (parseInt($j("#disk-" + i).val() + "") &lt; parseInt($j("#disk-" + i).prop("min_value")) || parseInt($j("#disk-" + i).val() + "") &gt; parseInt($j("#disk-" + i).prop("max_value")))) {
                var error_div = '&lt;div class="alert alert-danger" style="padding: 5px 16px; position: relative; margin: 5px 0px;"&gt;Enter Value between ' + $j("#disk-" + i).prop("min_value") + ' and ' + $j("#disk-" + i).prop("max_value") + ' for DISK' + i + '&lt;/div&gt;';
                $j(".errorData").html(error_div);
                return;
            }
        }
    }
    submitBlueprint();
}

function submitBlueprint() {

    $j("#Confirm_Submission").prop("disabled", true);
    $j("#backToUpdate").prop("disabled", true);
    $j("#cancelAct").prop("disabled", true);
    $j("#Update").prop("disabled", true);

    $j("#final_status").show();
    $j("#final_status").html('&lt;strong&gt;Updating application configuration...&lt;/strong&gt;');
    //VM Configuration
    if ($j("#num_sockets").prop("disabled") + '' == 'false')
        parsedApp.attrs_list[0].data["num_sockets_ruleset"].value = $j("#num_sockets").val();
    if ($j("#num_vcpus_per_socket").prop("disabled") + '' == 'false')
        parsedApp.attrs_list[0].data["num_vcpus_per_socket_ruleset"].value = $j("#num_vcpus_per_socket").val();
    if ($j("#memory_size_mib").prop("disabled") + '' == 'false')
        parsedApp.attrs_list[0].data["memory_size_mib_ruleset"].value = $j("#memory_size_mib").val();

    //Disc details
    // console.log("Submit: disc=&gt;" + JSON.stringify(disc_details));
    for (var i = 1; i &lt; discLength; i++) {
        if ($j("#disk-" + i).prop("disabled") + '' == 'false') {
            disc_details[i]["disk_size_mib"].value = $j("#disk-" + i).val() * 1024;
        }
        delete disc_details[i]["identifier"];
    }
    parsedApp.attrs_list[0].data["pre_defined_disk_list"] = disc_details;

    //Network Adaptors
    for (var i = 0; i &lt; nicLength; i++) {
        if ($j("#nic-" + i).prop("disabled") + '' == 'false') {
            nic_details[i]["subnet_reference"].uuid = $j("#nic-" + i).val() + '';
            nic_details[i]["subnet_reference"].name = '';
        }
        delete nic_details[i]["subnet_reference"]["cluster_name"];
    }
    parsedApp.attrs_list[0].data["pre_defined_nic_list"] = nic_details;

    //Categories
    parsedApp.attrs_list[0].data["pre_defined_categories"] = [];
    for (var k = 0; k &lt; pre_defined_categories.length; k++) {
        //var set = 0;
        var cat = (pre_defined_categories[k].value).split(":");
        // console.log("cat: "+cat[0]);
        var index = tmp_array.indexOf(pre_defined_categories[k].value);
        if (index &gt; -1) {
            tmp_array.splice(index, 1);
            parsedApp.attrs_list[0].data["pre_defined_categories"].push({
                "operation": "modify",
                "value": tmp_array[index] + ''
            });
        } else {
            parsedApp.attrs_list[0].data["pre_defined_categories"].push({
                "operation": "delete",
                "value": pre_defined_categories[k].value + ''
            });
        }

    }
    for (var i = 0; i &lt; tmp_array.length; i++) {
        parsedApp.attrs_list[0].data["pre_defined_categories"].push({
            "operation": "add",
            "value": tmp_array[i] + ''
        });
    }
    // console.log("final=&gt;&gt;" + JSON.stringify(parsedApp));
    updateBpResponse(parsedApp);
}

function updateBpResponse(response) {

    $j("#final_status").html('&lt;strong&gt;Applying changes...&lt;/strong&gt;');
    var gajax = new GlideAjax('Run_App_Actions');
    gajax.addParam('sysparm_name', 'runAction');
    gajax.addParam('sysparm_actionsysid', actSysId);
    gajax.addParam('sysparm_actionVars', JSON.stringify(parsedApp));
    gajax.getXML(getResponse);

    function getResponse(response) {
        var answer = response.responseXML.documentElement.getAttribute("answer");
        g_form.addInfoMessage(answer);
        GlideModal.get().destroy();
    }
}
// Section: DISC
function Disks() {
    var parsedAppBp = JSON.parse(act_vars);
    var existing_discs = parsedAppBp.create_spec.resources['disk_list'];
    for (var i = 0; i &lt; existing_discs.length; i++) {
        existing_discs[i].operation = 'modify';
        if (i != 0) {
            var temp_value = existing_discs[i].disk_size_mib;
            existing_discs[i].disk_size_mib = {
                "editable": "false",
                "operation": "equal",
                "value": temp_value + ''
            };
        }
        disc_details.push(existing_discs[i]);
    }
    var parsedData = JSON.parse(parsedApp);
    var data = parsedData.attrs_list[0].data;
    disk_delete_allowed = data.disk_delete_allowed + '';
    for (var i = 1; i &lt; data.pre_defined_disk_list.length; i++) {
        disc_details.push(data.pre_defined_disk_list[i]);
    }
    discLength = disc_details.length;
    var spanOptions = '';
    if (disc_details.length &lt;= 1) {
        document.getElementById("info-message2").style.display = "none";
    }
    for (var i = 1; i &lt; discLength; i++) {
        disc_details[i].identifier = i + '';
        selectDiscOption('addOption', JSON.stringify(disc_details[i]), '');
    }
    // console.log("RV: disc det=&gt;" + JSON.stringify(disc_details));
}

function check2(multiValOption) {
    for (var i = 1; i &lt; disc_details.length; i++) {
        if (disc_details[i].identifier + '' == multiValOption.identifier + '') {
            return i;
        }
    }
    return -1;
}

function selectDiscOption(type, multiValOption, key) {
    var unesc_multiValOption = unescape(multiValOption);
    var parsedValue = JSON.parse(unesc_multiValOption);
    if (type == 'addOption' &amp;&amp; check2(parsedValue) == -1 &amp;&amp; parsedValue != '') {
        disc_details.push(parsedValue);
    }
    if (type == 'removeOption' &amp;&amp; check2(parsedValue) != -1) {
        var index = check2(parsedValue);
        if (index &gt; -1) {
            //disc_details.splice(index, 1);
            if (disc_details[index].operation == 'add') {
                disc_details.splice(index, 1);
            } else
                disc_details[index].operation = 'delete';
        }
    }
    var spanOptions = '';

    for (var i = 1; i &lt; disc_details.length; i++) {
        var temp = JSON.stringify(disc_details[i]);
        var adapter_type = '';
        if (disc_details[i].device_properties &amp;&amp; disc_details[i].device_properties.disk_address &amp;&amp; disc_details[i].device_properties.disk_address.adapter_type) {
            adapter_type = disc_details[i].device_properties.disk_address.adapter_type + '';
        }
        if (disc_details[i].operation + '' == 'add') {
            var exist = '&lt;span style="color: #22a5f7;border: 1px solid #91d2fb;border-radius: 4px;padding: 2px;margin:6px;"&gt;New&lt;/span&gt;';
        } else {
            var exist = '&lt;span style="color: #696969;border: 1px solid #a9a9a9;border-radius: 4px;padding: 2px;margin:6px;"&gt;Existing&lt;/span&gt;';
        }

        var disk_value = disc_details[i].disk_size_mib.value / 1024;
        if (disc_details[i].operation + '' != 'delete') {
            if (disk_delete_allowed == 'true') {
                spanOptions += '&lt;div style="display: -webkit-inline-box; margin: 10px;"&gt;&lt;span class="list-options" style="margin: 3px; padding-bottom: 10px; border: 1px solid rgb(242, 244, 245); line-height: 13px; font-size: 12px; display: inline-block; background-color: rgb(242, 244, 245); color: #000000;padding:10px; position: relative;width:440px;"&gt;&lt;a href="#" onclick="selectDiscOption(\'removeOption\',\'' + escape(temp) + '\', \'' + '' + '\')"&gt;&lt;i class="fa fa-trash-o" style="padding-left: 400px;font-size: 13px;margin-top: -4px;color:#22a5f7"&gt;&lt;/i&gt;&lt;/a&gt;&lt;div style="width: 400px;"&gt;&lt;label&gt;Disk ' + i + ': ' + adapter_type + ' &lt;\/label&gt;' + exist + '&lt;input type=\"text\" class=\"form-control\" name=\"disk-' + i + '\" id=\"disk-' + i + '\" placeholder=\"Size (GiB)\" value=\"' + disk_value + '\" \/&gt;&lt;\/div&gt;&lt;/span&gt;&lt;/div&gt;';
            } else {
                spanOptions += '&lt;div style="display: -webkit-inline-box; margin: 10px;"&gt;&lt;span class="list-options" style="margin: 3px; padding-bottom: 10px; border: 1px solid rgb(242, 244, 245); line-height: 13px; font-size: 12px; display: inline-block; background-color: rgb(242, 244, 245); color: #000000;padding:10px; position: relative;width:440px;"&gt;&lt;a href="#" onclick="selectDiscOption(\'removeOption\',\'' + escape(temp) + '\', \'' + '' + '\')"&gt;&lt;/a&gt;&lt;div style="width: 400px;padding:5px;"&gt;&lt;label&gt;Disk ' + i + ': ' + adapter_type + ' &lt;\/label&gt;' + exist + '&lt;input type=\"text\" class=\"form-control\" name=\"disk-' + i + '\" id=\"disk-' + i + '\" placeholder=\"Size (GiB)\" value=\"' + disk_value + '\" \/&gt;&lt;\/div&gt;&lt;/span&gt;&lt;/div&gt;';
            }
        }
    }

    $j(".bodyData_DISK").html(spanOptions);
    for (var i = 1; i &lt; disc_details.length; i++) {
        $j('#disk-' + i).val(disc_details[i].disk_size_mib.value / 1024);
        if (disc_details[i].disk_size_mib.editable + '' == 'true') {
            $j('#disk-' + i).prop("disabled", false);
            $j('#disk-' + i).prop("min_value", disc_details[i].disk_size_mib.min_value / 1024);
            $j('#disk-' + i).prop("max_value", disc_details[i].disk_size_mib.max_value / 1024);
        } else {
            $j('#disk-' + i).prop("disabled", true);
        }
    }
}
//To add or delete Network Adaptors

function NetworkAdaptors() {
    var parsedAppBp = JSON.parse(act_vars);
    // console.log("act_vars: " + act_vars);
    // console.log("parsedApp: " + parsedApp);
    var exixting_nics = parsedAppBp.create_spec.resources['nic_list'];
    var ni_details = [];
    for (var i = 0; i &lt; exixting_nics.length; i++) {
        exixting_nics[i].identifier = i + '';
        exixting_nics[i].operation = 'modify';
        ni_details.push(exixting_nics[i]);
    }
    // console.log("RV:ni_details=&gt;" + JSON.stringify(ni_details));
    var parsedData = JSON.parse(parsedApp);
    var data = parsedData.attrs_list[0].data;
    nic_delete_allowed = data.nic_delete_allowed + '';
    for (var i = 0; i &lt; data.pre_defined_nic_list.length; i++) {
        if (data.pre_defined_nic_list[i].operation + '' == 'add') {
            ni_details.push(data.pre_defined_nic_list[i]);
        }
    }
    // console.log("RV2:ni_details=&gt;" + JSON.stringify(ni_details));
    //var ni_details = data.pre_defined_nic_list;
    var gajax = new GlideAjax('Run_App_Actions');
    gajax.addParam('sysparm_name', 'getNicDetails');
    gajax.addParam('sysparm_nic_details', JSON.stringify(ni_details));
    gajax.getXML(setNicDetails);
}

function setNicDetails(response) {
    var answer = response.responseXML.documentElement.getAttribute("answer");
    nic_details = JSON.parse(answer);
    nicLength = nic_details.length;
    // console.log("RV:nic_details=&gt;" + JSON.stringify(nic_details));
    for (var i = 0; i &lt; nic_details.length; i++) {
        selectNicOption('addOption', JSON.stringify(nic_details[i]), '');
    }
    // console.log("RV2:nic_details=&gt;" + JSON.stringify(nic_details));
}

function check(multiValOption) {
    for (var i = 0; i &lt; nic_details.length; i++) {
        if (nic_details[i].identifier + '' == multiValOption.identifier) {
            return i;
        }
    }
    return -1;
}

function selectNicOption(type, multiValOption, key) {
    var unesc_multiValOption = unescape(multiValOption);
    var parsedValue = JSON.parse(unesc_multiValOption);
    if (type == 'addOption' &amp;&amp; check(parsedValue) == -1 &amp;&amp; parsedValue != '') {
        nic_details.push(parsedValue);
    }
    if (type == 'removeOption' &amp;&amp; check(parsedValue) != -1) {
        var index = check(parsedValue);
        if (index &gt; -1) {
            //nic_details.splice(index, 1);
            if (nic_details[index].operation == 'add') {
                nic_details.splice(index, 1);
            } else
                nic_details[index].operation = 'delete';
        }
    }
    var spanOptions = '';
    for (var i = 0; i &lt; nic_details.length; i++) {
        if (nic_details[i].operation + '' != 'delete') {
            if (nic_details[i].operation + '' == 'add') {
                var exist = '&lt;span style="color: #22a5f7;border: 1px solid #91d2fb;border-radius: 4px;padding: 2px; margin:6px;"&gt;New&lt;/span&gt;';
            } else {
                var exist = '&lt;span style="color: #696969;border: 1px solid #a9a9a9;border-radius: 4px;padding: 2px;margin:6px;"&gt;Existing&lt;/span&gt;';
            }
            var temp = JSON.stringify(nic_details[i]);
            if (nic_delete_allowed == 'true' &amp;&amp; i &gt; 0) {
                // console.log(i + nic_delete_allowed);
                spanOptions += '&lt;div style="display: -webkit-inline-box; margin: 10px;"&gt;&lt;span class="list-options" style="margin: 3px; padding-bottom: 10px; padding-top:5px; border: 1px solid rgb(242, 244, 245); line-height: 13px; font-size: 12px; display: inline-block; border-radius: 2px; background-color: rgb(242, 244, 245); color: #007eff;"&gt;&lt;a href="#" onclick="selectNicOption(\'removeOption\',\'' + escape(temp) + '\', \'' + '' + '\')"&gt;&lt;i class="fa fa-trash-o" style="padding-left: 420px;font-size: 13px;margin-top: -4px;color:#22a5f7"&gt;&lt;/i&gt;&lt;/a&gt;&lt;div class="info-message" style=" color: #000000;padding-left:10px;padding-bottom:10px;position: relative; width:440px;"&gt;&lt;div style="margin: 3px;"&gt;NIC ' + (i + 1) + exist + '&lt;/div&gt; &lt;select name="nic-' + i + '" id="nic-' + i + '" style="border-color:#989898; height: 27px; width:400px"&gt;&lt;option value=' + nic_details[i].subnet_reference.uuid + '&gt; ' + nic_details[i].subnet_reference.name + ' &lt;/option&gt;&lt;/select&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;';
            } else {
                // console.log("i" + i + nic_delete_allowed);
                spanOptions += '&lt;div style="display: -webkit-inline-box; margin: 10px;"&gt;&lt;span class="list-options" style="margin: 3px; padding-bottom: 10px; border: 1px solid rgb(242, 244, 245); line-height: 13px; font-size: 12px; display: inline-block; border-radius: 2px; background-color: rgb(242, 244, 245); color: #007eff;"&gt;&lt;a href="#" onclick="selectNicOption(\'removeOption\',\'' + escape(temp) + '\', \'' + '' + '\')"&gt;&lt;/a&gt;&lt;div class="info-message" style="  color: #000000; padding:10px; position: relative; width:440px;"&gt;&lt;div style="margin: 3px;"&gt;NIC ' + (i + 1) + exist + '&lt;/div&gt; &lt;select name="nic-' + i + '" id="nic-' + i + '" style="border-color:#989898; height: 27px; width:400px"&gt;&lt;option value=' + nic_details[i].subnet_reference.uuid + '&gt; ' + nic_details[i].subnet_reference.name + ' &lt;/option&gt;&lt;/select&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;';
            }
            /*if (nic_details[i].operation + '' == 'add') {
            	var subnet_parsed=JSON.parse(subnet_reference);
            	console.log("subnet_parsed.length: "+subnet_parsed.length);
            	for(var m=0;m&lt;subnet_parsed.length;m++) {
            		console.log("subnet_reference[m].name: "+subnet_parsed[m].name + i);
            		var option = '&lt;option value="' + subnet_parsed[m].uuid + '"&gt;' + subnet_parsed[m].name + '&lt;/option&gt;';
            		$j("#test2").append(option);
            	}
            }*/
        }
    }
    $j(".bodyData_NetworkAdaptors").html(spanOptions);
    for (var i = 0; i &lt; nic_details.length; i++) {
        if (nic_details[i].editable + '' == 'true') {
            $j('#nic-' + i).prop("disabled", false);
        } else {
            $j('#nic-' + i).prop("disabled", true);
        }
        if (nic_details[i].operation + '' == 'add') {
            var subnet_parsed = JSON.parse(subnet_reference);
            // console.log("subnet_parsed.length: "+subnet_parsed.length);
            for (var m = 0; m &lt; subnet_parsed.length; m++) {
                // console.log("subnet_reference[m].name: "+subnet_parsed[m].name + i);
                if (nic_details[i].subnet_reference.uuid + '' != subnet_parsed[m].uuid + '') {
                    var option = '&lt;option value="' + subnet_parsed[m].uuid + '"&gt;' + subnet_parsed[m].name + '&lt;/option&gt;';
                    $j("#nic-" + i).append(option);
                }
            }
        }
    }
}

// To add or delete Categories
function Categories() {
    var parsedData = JSON.parse(parsedApp);
    var data = parsedData.attrs_list[0].data;
    categories_delete_allowed = parsedData.attrs_list[0].data.categories_delete_allowed + '';
    categories_add_allowed = parsedData.attrs_list[0].data.categories_add_allowed + '';
    var category_details = data.pre_defined_categories;
    pre_defined_categories = data.pre_defined_categories;
    // console.log("category_details : "+JSON.stringify(category_details));
    if (categories_add_allowed == 'true') {
        var inputType = '&lt;select name="test" id="test" placeholder ="Key: Value" style="border-color:#87cefa; width: 500px; height: 30px;" onchange="selectOption(\'addOption\',this.value, \'' + '' + '\')"&gt;&lt;option value=\'empty\'&gt;&lt;/option&gt;&lt;/select&gt;';
        $j(".bodyData_Categories").append(inputType);
        for (var i = 0; i &lt; credential_list_parsed.length; i++) {
            var option = '&lt;option value=' + credential_list_parsed[i] + '&gt;' + credential_list_parsed[i] + '&lt;/option&gt;';
            $j("#test").append(option);
        }
    }
    for (var i = 0; i &lt; category_details.length; i++) {
        tmp_array.push(category_details[i].value);
        selectOption('', category_details[i].value, '');
        // console.log("category_details[i].value :"+category_details[i].value);
        addRemoveCategories('add', category_details[i].value);
    }
}

function selectOption(type, multiValOption, key) {

    if ((type == 'addOption' &amp;&amp; tmp_array.indexOf(multiValOption) == -1 &amp;&amp; multiValOption != '') &amp;&amp; categories_add_allowed == 'true') {
        tmp_array.push(multiValOption);
        addRemoveCategories('add', multiValOption);
        //$j('#test').find('option[value="' + multiValOption + '"]').remove();
    }
    if ((type == 'removeOption' &amp;&amp; tmp_array.indexOf(multiValOption) != -1) &amp;&amp; categories_delete_allowed == 'true') {
        var index = tmp_array.indexOf(multiValOption);
        if (index &gt; -1) {
            tmp_array.splice(index, 1);
        }
        /* var option = '&lt;option value="' + multiValOption + '"&gt;' + multiValOption + '&lt;/option&gt;';
         $j("#test").append(option);*/
        addRemoveCategories('remove', multiValOption);
    }
    var spanOptions = '';
    // console.log("tmp_array: "+tmp_array);
    for (var i = 0; i &lt; tmp_array.length; i++) {
        if (categories_delete_allowed == 'true') {
            spanOptions += '&lt;div style="display: -webkit-inline-box; margin: 3px;"&gt;&lt;span class="list-options" style="margin: 3px; padding: 5px; border: 1px solid rgba(0, 126, 255, 0.24); line-height: 13px; font-size: 12px; display: inline-block; border-radius: 2px; background-color: rgba(0, 126, 255, 0.08); color: #007eff;"&gt;' + tmp_array[i] + '&lt;a href="#" onclick="selectOption(\'removeOption\',\'' + tmp_array[i] + '\', \'' + '' + '\')"&gt;&lt;i class="icon-cross" style="padding-left: 7px;font-size: 11px;margin-top: -4px;"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;';
        } else {
            spanOptions += '&lt;div style="display: -webkit-inline-box; margin: 3px;"&gt;&lt;span class="list-options" style="margin: 3px; padding: 5px; border: 1px solid rgba(0, 126, 255, 0.24); line-height: 13px; font-size: 12px; display: inline-block; border-radius: 2px; background-color: rgba(0, 126, 255, 0.08); color: #007eff;"&gt;' + tmp_array[i] + '&lt;a href="#" onclick="selectOption(\'removeOption\',\'' + tmp_array[i] + '\', \'' + '' + '\')"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;';
        }
    }
    $j(".bodyData2_Categories").html(spanOptions);
}

function addRemoveCategories(key, value) {
    if (key == 'add') {
        var cat = value.split(":");
        for (var i = 0; i &lt; credential_list_parsed.length; i++) {
            if (credential_list_parsed[i].includes(cat[0])) {
                $j('#test').find('option[value="' + credential_list_parsed[i] + '"]').remove();
            }
        }
    }
    if (key == 'remove') {
        var cat = value.split(":");
        for (var i = 0; i &lt; credential_list_parsed.length; i++) {
            if (credential_list_parsed[i].includes(cat[0])) {
                // console.log("credential_list_parsed[i]: "+credential_list_parsed[i]);
                var option = '&lt;option value="' + credential_list_parsed[i] + '"&gt;' + credential_list_parsed[i] + '&lt;/option&gt;';
                $j("#test").append(option);
            }
        }
    }
}]]&gt;&lt;/client_script&gt;&lt;description/&gt;&lt;direct&gt;false&lt;/direct&gt;&lt;endpoint&gt;x_nuta2_nutanix_ca_update_patch_UI_page.do&lt;/endpoint&gt;&lt;html&gt;&lt;![CDATA[&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null"&gt;
&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"&gt;&lt;/link&gt;  
	&lt;body&gt;
		&lt;div class="errorData"&gt;&lt;/div&gt;
		&lt;div&gt;
			&lt;div id="update_form"&gt;
				&lt;div class="form-group"&gt;
					&lt;div class="info-message" style="padding: 5px 16px; background-color: #e8f0fa; color: #5f96e3; position: relative; margin: 5px 0px;" data-toggle="collapse" aria-expanded="true" href="#collapseExample" aria-controls="collapseExample" &gt;&lt;strong&gt;+ VM Configuration&lt;/strong&gt;&lt;/div&gt;
					&lt;div class="collapse" id="collapseExample" style="margin: 10px 16px; width:500px"&gt;
					&lt;div class="form-group" style="width:400px"&gt;
						&lt;label&gt;vCPUs&lt;/label&gt;
						&lt;input type="text" class="form-control" name="num_sockets" id="num_sockets" placeholder="vCPUs" value="" disabled=""/&gt;
					&lt;/div&gt;
					&lt;div class="form-group" style="width:400px"&gt;
						&lt;label&gt;Cores per vCPU&lt;/label&gt;
						&lt;input type="text" class="form-control" name="num_vcpus_per_socket" id="num_vcpus_per_socket" placeholder="Num cores" value="" disabled=""/&gt;
					&lt;/div&gt;
					&lt;div class="form-group" style="width:400px"&gt;
						&lt;label&gt;Memory (GiB)&lt;/label&gt;
						&lt;input type="text" class="form-control" name="memory_size_mib" id="memory_size_mib" placeholder="Memory" value="" disabled=""/&gt;
					&lt;/div&gt;
					&lt;/div&gt;
					&lt;div class="info-message2" id="info-message2" style="padding: 5px 16px; background-color: #e8f0fa; color: #5f96e3; position: relative; margin: 5px 0px;" data-toggle="collapse" aria-expanded="true" href="#collapseExample2" aria-controls="collapseExample2" &gt;&lt;strong&gt;+ Disks&lt;/strong&gt;&lt;/div&gt;
					&lt;div class="collapse" id="collapseExample2"&gt;
						&lt;script&gt;
							addLoadEvent( function() {
							Disks();
							});
						&lt;/script&gt;
						&lt;div class="bodyData_DISK"&gt;&lt;/div&gt;
					&lt;/div&gt;
					&lt;div class="info-message" style="padding: 5px 16px; background-color: #e8f0fa; color: #5f96e3; position: relative; margin: 5px 0px;" data-toggle="collapse" aria-expanded="true" href="#collapseExample3" aria-controls="collapseExample3" &gt;&lt;strong&gt;+ Network Adaptors&lt;/strong&gt;&lt;/div&gt;
					&lt;div class="collapse" id="collapseExample3"&gt;
						&lt;script&gt;
							addLoadEvent( function() {
							NetworkAdaptors();
							});
						&lt;/script&gt;
						&lt;div class="bodyData_NetworkAdaptors"&gt;&lt;/div&gt;
					&lt;/div&gt;
					&lt;div class="info-message" style="padding: 5px 16px; background-color: #e8f0fa; color: #5f96e3; position: relative; margin: 5px 0px;" data-toggle="collapse" aria-expanded="true" href="#collapseExample4" aria-controls="collapseExample4" &gt;&lt;strong&gt;+ Categories&lt;/strong&gt;&lt;/div&gt;
					&lt;div class="collapse" id="collapseExample4"&gt;
						&lt;script&gt;
							addLoadEvent( function() {
							Categories();
							});
						&lt;/script&gt;
						&lt;div class="bodyData2_Categories"&gt;&lt;/div&gt;
						&lt;div class="bodyData_Categories"&gt;&lt;/div&gt;
					&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
			&lt;div id="diff_page" style="none"&gt;
			&lt;/div&gt;
			&lt;div id="final_status" style="display:none;"&gt;&lt;/div&gt;
			&lt;div class="modal-footer"&gt;
				&lt;div class="row"&gt;
					&lt;div class="col-sm-9 pull-right" style="width: max-content;"&gt;
						&lt;button class="btn btn-default" id="backToUpdate" style="display:none;"&gt;Back&lt;/button&gt;
						&lt;button class="btn btn-default" id="cancelAct"&gt;Cancel&lt;/button&gt;
						&lt;button class="btn btn-primary" id="Update"&gt;Update&lt;/button&gt;
						&lt;button class="btn btn-primary" id="Confirm_Submission" style="display:none;"&gt;Confirm&lt;/button&gt;
					&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;style&gt;
		#diff_table {
		font-family: SourceSansPro, "Helvetica Neue", Arial;
		border-collapse: collapse;
		width: 100%;
		}
		#diff_table td,#diff_table th{
		border: 1px solid #dddddd;
		text-align: left;
		padding: 8px;
		}
		
	&lt;/style&gt;
&lt;/j:jelly&gt;]]&gt;&lt;/html&gt;&lt;name&gt;update_patch_UI_page&lt;/name&gt;&lt;processing_script/&gt;&lt;sys_class_name&gt;sys_ui_page&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2022-06-28 07:15:37&lt;/sys_created_on&gt;&lt;sys_id&gt;0682926e9710111027f8fbc71153af91&lt;/sys_id&gt;&lt;sys_mod_count&gt;59&lt;/sys_mod_count&gt;&lt;sys_name&gt;update_patch_UI_page&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_page_0682926e9710111027f8fbc71153af91&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-07-23 11:21:27&lt;/sys_updated_on&gt;&lt;/sys_ui_page&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1102178344</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>6eab0533c3d4569064971612b4013155</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c31e20000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>update_patch_UI_page</target_name>
<type>UI Page</type>
<update_domain>global</update_domain>
<update_guid>0cecdcce5c2fc254233457f2ac9bf2ab</update_guid>
<update_guid_history>0cecdcce5c2fc254233457f2ac9bf2ab:-1102178344,0cecdcce5c2fc254233457f2ac9bf2ab:-1102178344,13c3bda9be451110fb149294ab72610a:-1211530589,cc9ff8ceb3ada1102e9c5cbbfe8cd5bc:356600751,13c3bda9be451110fb149294ab72610a:-1211530589,49c976a1ff6d611091e6f8955ef0f72d:356600751,13c3bda9be451110fb149294ab72610a:-1211530589,47e1598c0fa9e91048be88ea1ce3d100:356600751,13c3bda9be451110fb149294ab72610a:-1211530589,f12e95d0c7cd911055577b21620cba61:1910436405,408d51d007cd91109b5f924c581e1a13:-1338454259,492d95d09ecd91109a4f435982544d59:1617776955,65ac1d900dcd91101c9ae996a6bd7390:895811048,ef1c51901acd9110d5e2507d1b5483c4:1015437371,8ebb5d508bcd91107f61bf409f8499cc:1249687707,fd0b1d1038cd9110258b8311b48411f4:1795794156,998a1110fbcd9110d229bb3295a147d1:-338026837,7af915dce38d9110d917206f0cec1d28:-259718410,92d915dc928d91102bfc14e91f9bd3a8:2025804083,04b91954568d911006b4d89378de79e1:1343979872,b196d5d8948d911041718370f24f97b1:649907749,34411554e58d9110898bab08f1986354:-1636835675,4c3e49dc944d91106a89db2b326a2f4b:-182647185,0f8d05d8ff4d9110f701003601f768b5:983774434,c71c45d8a44d9110ef8b1d69651ba4bc:765060987,940b05d8b94d911024b00dec3b06af81:954175432,2c6a05d8564d91100a60df01281e62a8:-1792802008,36f805d8b74d9110e847d719cba26fa2:-401360632,99e4019c1ac991105df8e0e2512f4468:-927919214,f7a301508f4d9110073814707644f6df:1916034555,281c2010590d9110308d0e9379ab201d:-58346473,6e93f96b3354d1102f75f9b8800d0524:596997284,c02339abe454d110e402a0ca2bc9cb67:-1646914745,4851352b8354d110632f583bcfda0c53:131734644,8effa5e7ff54d1102b0f47da0a1e9948:-326408339,2bbf21e7eb54d110bfef7b49ce7203d5:-183732662,183f25277754d110326af734f2431164:-1100141348,02de2d677e54d110ae64791f87018caa:131734644,4ebde127c954d110b3dd5b5b16a937aa:-1028631507,195f16930e1c9110c4fa7f0210c7504f:-836534385,3158cadf8e9891106c910a1b5d635d73:981912573,7195ca5f85989110df6a3628c8bb66df:149028765,162082d38698911047ed761bed504665:1888028656,2ebe791b2f9891103232c5c8d297299d:1888450881,843e75d76b9891103c995b11db5682cf:984618627,3fec799318989110bdd3dadaa6b854c0:-1881612644,e13771d39c9891102ba0e673ba701e34:-112879844,e0a63193389891101238ad0f5ab007b2:-1418216918,3a16bd53f69891103a60be86bcb516c3:-32571035,27b53553ab989110983377c565ba7529:-884329666,2ed439131098911075332386f1b64ccb:54862329,8284b11369989110ba231f0adde0f8cf:-1825764835,d504b91f9a589110ed4397f3945b8743:-2025351992,0c93b1132098911057ca30473cc42cd8:-1819371902,d3aee11fbe589110f17c4ef959037a9a:1868933193,d04c2d9bec589110ee01cd4d001ada6c:-1126929355,9b9b691bca5891108c3eb73eda6b550a:-670066186,813b295b0e589110a86c06339df3affc:1749598768,f1daa95f461891100584fb2d87dc80a5:1302782172,c8e9291b495891105689ed319d586aea:-1965230182,b548959b8818911021dcbebb5b007392:-1870513530,05e3cd53c2949110c0cb20f38bf4204f:-625720420,d08301db1d54911043349cbb77962ec4:-213547420,fcf2cd9b3854911013e1397a858aaf4f:-1613203473,98928d1357949110e7338bde404dc710:-1896492340,b60241db76549110c553620959a72617:322750533,40b2de2e70101110e4381e2609e7da17:700410208</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_properties_bc05bdc147050210f96f1916926d4340</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>Fix script to update Default Replica field in service config if value is set to true</description><ignore_cache>true</ignore_cache><is_private>false</is_private><name>x_nuta2_nutanix_ca.NCM Trigger Fix Script</name><read_roles/><suffix>NCM Trigger Fix Script</suffix><sys_class_name>sys_properties</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2024-03-18 08:36:11</sys_created_on><sys_id>bc05bdc147050210f96f1916926d4340</sys_id><sys_mod_count>6</sys_mod_count><sys_name>x_nuta2_nutanix_ca.NCM Trigger Fix Script</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_properties_bc05bdc147050210f96f1916926d4340</sys_update_name><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-04-19 08:37:08</sys_updated_on><type>boolean</type><value>true</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=bc05bdc147050210f96f1916926d4340"/></record_update>]]></payload>
<payload_hash>2102471159</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>92ab0533c3d4569064971612b401314e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30060000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.NCM Trigger Fix Script</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>8738ea13eaed4610f04355ea515120ad</update_guid>
<update_guid_history>8738ea13eaed4610f04355ea515120ad:2102471159,f3f722d39eed4610b778e0bdaa1c447f:841831068</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_caeab4864f337300d8494ebf9310c73e</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Migration_Script&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;true&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Migration_Script&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Migration_Script = Class.create();
Migration_Script.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.createVariable = new Nutanix_CreateCatalogVariables();
        this.appScriptInstance = new Nutanix_ImportApplicationProfiles();
        this.protected_var = 'protected';
    },


    checkForTheRuntimeConfigurationsCatalogItems: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();
            if (gr.hasNext() &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_5') == '0')) {
                this.logger.info("Migration to V 1_4_5 require");
                return true;
            }
            this.logger.info("Migration to V 1_4_5 not require");
            gs.setProperty("x_nuta2_nutanix_ca.1_4_5", "1");
            return false;
        } catch (e) {
            this.logger.error("Exception caught inside Migration_script.checkForTheRuntimeConfigurationsCatalogItems() Error : - " + e);
        }
    },
    updateTheFetchOnChangeClientScripts: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();
            while (gr.next()) { //nameINFetch dependencies on change of profile,On Change of Environment variable
                var catalogScriptGR = new GlideRecord('catalog_script_client');
                catalogScriptGR.addQuery('cat_item', gr.item_name + '');
                catalogScriptGR.addEncodedQuery('nameINFetch values OnChange,On Change of Environment variable,Fetch dependencies on change of profile,Fetch form data on change of profile,Hide Order details on request');
                catalogScriptGR.query();
                var catalogClientScript = new sn_sc.CatalogClientScript();
                var fieldList = [];
                var envFieldSysID;
                var profilesysID;
                var fetchformSysID;
                while (catalogScriptGR.next()) {
                    var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');
                    catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                    if (catalogScriptGR.name + '' == 'Fetch values OnChange' &amp;&amp; fieldList.indexOf(field) == -1)
                        fieldList.push(field);
                    else if (catalogScriptGR.name + '' == 'On Change of Environment variable')
                        envFieldSysID = field;
                    else if (catalogScriptGR.name + '' == 'Fetch dependencies on change of profile')
                        profilesysID = field;
                    else if (catalogScriptGR.name + '' == 'Fetch form data on change of profile')
                        fetchformSysID = field;

                }
                var fieldListLength = fieldList.length;
                while (fieldListLength--) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Fetch values OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + fieldList[fieldListLength],
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (!sessionStorage['varValues']) return;var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + ''];if (isLoading || newValue == '' || oldValue + '' == newValue + '') {    new GlideModal().get('loader').destroy();return;}function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var var_array = [];for (var i in prof_json) {if (i + '' == control.id + '')continue;var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);varValues['IO:' + i] = curr_value + '';var parsed_field = JSON.parse(field);parsed_field.def_val = parsed_field.value + '';parsed_field.value = curr_value, parsed_field.sys_id = i + '', var_array.push(parsed_field);} getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {if (control.id + '' == k) {continue;}var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);varValues['IO:' + k] = curr_value + '';var parsed_field = JSON.parse(field);parsed_field.def_val = parsed_field.value + '';parsed_field.value = curr_value, parsed_field.sys_id = k + '', var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser'),gajax.addParam('sysparm_field', control.id +''), gajax.addParam('sysparm_type', 'catalog'), gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''),gajax.addParam('sysparm_varJson', act_var_JSON), gajax.getXML(getVarResponse);}function getVarResponse(response) { new GlideModal().get('loader').destroy();var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undefined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id;if (control.id + '' == sys_id) {continue;}var type = row.type + '';if (row.state == 'SUCCESS' &amp;&amp; (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')) {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + '', row.value[k], row.value[k]);g_form.setValue(sys_id, row.value);} else {if (row.data_type + '' != 'BASE') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);}g_form.setValue(sys_id, row.value);}if (row.state == 'ERROR') {g_form.clearOptions(sys_id); g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars'), ga.addParam('sysparm_catsysid', cat_sys_id), ga.addParam('sysparm_profile', profile), ga.getXML(varResponse, null, loadingDialog);}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "global");
                        grChange.update();
                    }
                }
                //environment..
                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "On Change of Environment variable",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "cat_variable": "IO:" + envFieldSysID,
                    "active": true,
                    "order": 1000,
                    "description": "This script is auto created thorugh runtime module for fetching values.",
                    "applies_catalog": "true",
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('environment_loader', true);loadingDialog.setTitle('Fetching Profiles...');loadingDialog.renderWithContent('' + loadingHTML);var gUrl = new GlideURL();gUrl.setFromCurrent();var def_project;for (var i = 0; i &lt; g_form.getControl('default_project').options.length; i++){if (g_form.getControl('default_project').options[i].value == g_form.getValue('default_project')) {def_project = g_form.getControl('default_project').options[i].innerText;break;}}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProfilesBasisOnEnvironment');ga.addParam('sysparm_env', g_form.getValue('default_environment'));ga.addParam('sysparm_proValue', g_form.getValue('default_project'));ga.addParam('sysparm_pro', def_project + '');ga.addParam('sysparm_profile', gUrl.getParam('profileSysId'));ga.addParam('sysparm_blueprint', gUrl.getParam('uuid'));ga.addParam('sysparm_type', gUrl.getParam('type'));ga.getXML(parseData);function parseData(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(' On Change of Environment variable answer' + answer);answer = JSON.parse(answer);if (answer.length == 0) {g_form.hideFieldMsg('default_profile', true); g_form.clearOptions('default_profile');g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, false);}g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, true);}g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');for (var i = 0; i &lt; answer.length; i++) {g_form.addOption('default_profile', answer[i], answer[i]);}if (answer.length == 1) {g_form.setReadOnly('default_profile', true);}}new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();}}";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(OnChangeCatalogScriptId)) {
                    grChange.setValue("sys_scope", "global");
                    grChange.update();
                }

                //Profile..

                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Fetch dependencies on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "cat_variable": "IO:" + profilesysID,
                    "active": true,
                    "order": 1000,
                    "description": "This script is auto created thorugh runtime module for fetching values.",
                    "applies_catalog": "true",
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_field', 'onLoad');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS' &amp;&amp; (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')) {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + '', row.value[k], row.value[k]);g_form.setValue(sys_id, row.value);} else {if (row.data_type + '' != 'BASE') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);}g_form.setValue(sys_id, row.value);}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}new GlideModal().get('variables_loader').destroy(); }";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(OnChangeCatalogScriptId)) {
                    grChange.setValue("sys_scope", "global");
                    grChange.update();
                }

                //formDataDisplay

                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Fetch form data on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "cat_variable": "IO:" + fetchformSysID,
                    "active": true,
                    "order": 1000,
                    "description": "This script is auto created thorugh runtime module for fetching values.",
                    "applies_catalog": "true",
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading) { return; } try { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { if (newValue == '') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } g_form.setMandatory(flds[i].prettyName, false); g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay('provider_icons', false); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true); g_form.setMandatory('default_profile', true); g_form.setDisplay('default_environment', true); g_form.setReadOnly('default_environment', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + ''; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (nameTypeMap[i + ''] + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); } else { g_form.setValue(i + '', parsed[i].value+''); g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get('loader').destroy(); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } } } else { var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails'); ga.addParam('cat_item_sys_id', g_form.getUniqueValue()); ga.addParam('fieldNameArray', g_form.getFieldNames()); ga.getXML(parseFieldResponse); function parseFieldResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var object1 = JSON.parse(answer); for (var i in object1) { if (object1[i].var_type == 'formatter' || object1[i].var_type == 'container' || object1[i].var_type == 'checkbox_container' || object1[i].var_type == 'undefined' || object1[i].var_type == 'Container Start') { continue; } g_form.setDisplay(object1[i].var_type + '', false); g_form.setReadOnly(object1[i].var_type + '', true); } } g_form.setDisplay('provider_icons', 'true'); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse1, null); function parseResponse1(response) { var answer1 = response.responseXML.documentElement.getAttribute('answer'); var object1 = JSON.parse(answer1); for (var i in object1) { var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (object1[i].var_type + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); } else { g_form.setValue(i + '', parsed[i].value+''); g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } } } } } } catch (e) { console.log('Inside onchange profile: ' + e.message); } }";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(OnChangeCatalogScriptId)) {
                    grChange.setValue("sys_scope", "global");
                    grChange.update();
                }

                //onload

                var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScriptGR.setAttributes({
                    "name": "Hide Order details on request",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "active": true,
                    "order": 10,
                    "description": "Hide values on request details.",
                    "applies_catalog": "false",
                    "ui_type": "0",
                    "applies_req_item": "true",
                    "applies_sc_task": "false"
                });
                onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setMandatory(flds[i].prettyName,false);g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onLoadCatalogClientScriptId)) {
                    grChange.setValue("sys_scope", "global");
                    grChange.update();
                }
            }
            gs.setProperty("x_nuta2_nutanix_ca.1_4_5", "1");
        } catch (e) {
            this.logger.error("Exception caugh inside Migration_script.updateTheFetchOnChangeClientScripts() Error : - " + e);
        }
    },
	

    updatedOneDotFiveDotOneMigrationNeeded: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();
            if (gr.hasNext() &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_5_1') == '0')) {
                this.logger.info("Migration to V 1_5_1 require");
                return true;
            }
            this.logger.info("Migration to V 1_5_1 not require");
            gs.setProperty("x_nuta2_nutanix_ca.1_5_1", "1");
            return false;
        } catch (e) {
            this.logger.error("Exception caught inside Migration_script.isOneDotFiveOneMigrationNeeded() Error : - " + e);
        }
    },

    updateBpTypeForOneDotFive: function() {
        gs.info("Inside updateBpTypeForOneDotFive Function");
        var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
        gr.query();

        while (gr.next()) {
            if (gr.item_name.category.title + '' == 'Marketplace Blueprint') {
                gr.type_of_blueprint = 'published';
            } else if (gr.item_name.category.title + '' == 'Blueprint') {
                gr.type_of_blueprint = 'unpublished';
            }
            gr.update();
        }
    },
    updatedOneDotSevenMigrationNeeded: function() {
        try {

            if (gs.getProperty('x_nuta2_nutanix_ca.1_7') == '0') {
                this.logger.info("Migration to V 1_7 require");
                gs.setProperty("x_nuta2_nutanix_ca.1_7", "1");
                return true;
            }
            this.logger.info("Migration to V 1_7 not require");
            return false;
        } catch (e) {
            this.logger.error("Exception caught inside Migration_script.updatedOneDotSevenMigrationNeeded() Error : - " + e);
        }
    },
    updatedOneDotSixDotOneMigrationNeeded: function() {
        try {

            if (gs.getProperty('x_nuta2_nutanix_ca.1_6_1') == '0') {
                this.logger.info("Migration to V 1_6_1 require");
                gs.setProperty("x_nuta2_nutanix_ca.1_6_1", "1");
                return true;
            }
            this.logger.info("Migration to V 1_6_1 not require");
            return false;
        } catch (e) {
            this.logger.error("Exception caught inside Migration_script.updatedOneDotSixDotOneMigrationNeeded() Error : - " + e);
        }
    },
    updatedOneDotSixMigrationNeeded: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();
            if (gr.hasNext() &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_6') == '0')) {
                this.logger.info("Migration to V 1_6 require");
                return true;
            }
            this.logger.info("Migration to V 1_6 not require");
            gs.setProperty("x_nuta2_nutanix_ca.1_6", "1");
            return false;
        } catch (e) {
            this.logger.error("Exception caught inside Migration_script.updatedOneDotSixMigrationNeeded() Error : - " + e);
        }
    },

    updateSubnetFilteringOneDotSeven: function() {
		try{
		gs.info('Migration started updateSubnetFilteringOneDotSeven');	
        var gr = new GlideRecord('item_option_new');
        gr.addEncodedQuery('nameLIKE_NIC_^cat_item!=NULL^type=18^cat_item.sc_catalogsLIKE240abede37112300fdfc097973990e24^cat_item.sys_class_name=x_nuta2_nutanix_ca_nutanix_catalog_items');
            gr.setValue('lookup_value', 'uuid');
            gr.setValue('lookup_label', 'name,cluster_name,subnet_type');
            gr.setValue('reference_qual','javascript: new x_nuta2_nutanix_ca.Nutanix_FetchConfigureSettingDropdown().getSubnetRefQual(current.variables.default_environment)');
            gr.setValue('attributes', 'ref_qual_elements=default_environment');
            gr.updateMultiple();
			
        
		}
		catch(e){
			this.logger.error("Exeption caught inside Migration_script.updateSubnetFilteringOneDotSeven() Error : - " + e);

		}

    },
	updateTheCatalogClientScriptForOneDotSeven: function() {
    try {
		gs.info('Migration started updateTheCatalogClientScriptForOneDotSeven');
        var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
        gr.query();
        while (gr.next()) {
            var configScript = new Nutanix_ConfigureSettingScripts();
            var grChange = new GlideRecord('catalog_script_client');
            grChange.addEncodedQuery('name=Fetch form data on change of profile^cat_item!=NULL');
            grChange.query();
            while (grChange.next()) {
                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Fetch form data on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": "" + grChange.cat_item,
                    "cat_variable": grChange.cat_variable,
                    "active": true,
                    "order": 100,
                    "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onchangeScript = '';

                onchangescript = "function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==\'\'){reg.switchStatusToStandBy();return}try{var portal_check;var portalgr=new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\');portalgr.addParam(\'sysparm_name\',\'getPortalCompatibility\');portalgr.getXMLAnswer(getPortalCheck);function getPortalCheck(response){portal_check=response;if(portal_check==\'false\'){if(newValue==\'\')return;var fldType={};var elemen=g_form.elements;for(var i in elemen){fldType[elemen[i].fieldName+\'\']=elemen[i].type+\'\'}var flds=g_form.nameMap;for(var i in flds){if(fldType[flds[i].realName+\'\']+\'\'==\'formatter\'||fldType[flds[i].realName+\'\']+\'\'==\'container\'||fldType[flds[i].realName+\'\']+\'\'==\'checkbox_container\'||fldType[flds[i].realName+\'\']+\'\'==\'undefined\'){continue}if(flds[i].prettyName!=\'default_app_name\'){g_form.setMandatory(flds[i].prettyName,false)}g_form.setDisplay(flds[i].prettyName,false)}g_form.setVariablesReadOnly(true);g_form.setDisplay(\'provider_icons\',false);g_form.setReadOnly(\'default_project\',false);g_form.setReadOnly(\'default_app_name\',false);g_form.setReadOnly(\'default_profile\',false);g_form.setDisplay(\'default_project\',true);g_form.setDisplay(\'default_app_name\',true);g_form.setDisplay(\'default_profile\',true);g_form.setMandatory(\'default_profile\',true);g_form.setDisplay(\'default_environment\',true);g_form.setReadOnly(\'default_environment\',false);var profile=newValue;var cat_sys_id=g_form.getUniqueValue();var ga=new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\');ga.addParam(\'sysparm_name\',\'fetchOrderFormData\');ga.addParam(\'sysparm_profile\',profile);ga.addParam(\'sysparm_catSysID\',cat_sys_id);ga.getXML(parseResponse);function parseResponse(response){var answer=response.responseXML.documentElement.getAttribute(\'answer\');var fldType={};var elemen=g_form.elements;for(var i in elemen){fldType[elemen[i].fieldName+\'\']=elemen[i].type+\'\'}var nameTypeMap={};var flds=g_form.nameMap;for(var i in flds){nameTypeMap[flds[i].prettyName+\'\']=fldType[flds[i].realName+\'\']+\'\'}var fielVal={};var parsed=JSON.parse(answer);for(var i in parsed){if(i.indexOf(\'cluster_name\')==-1){if(nameTypeMap[i+\'\']+\'\'==\'masked\'){fielVal[i]=parsed[i].value;g_form.setValue(i+\'\',\'\')}else{g_form.setValue(i+\'\',parsed[i].value+\'\')}g_form.setReadOnly(i+\'\',parsed[i].readOnly+\'\');g_form.setDisplay(i+\'\',!parsed[i].readOnly);if(parsed[i].mandatory){g_form.setMandatory(i+\'\',parsed[i].mandatory)}}else{g_form.setValue(i+\'\',parsed[i].value+\'\');g_form.setDisplay(i+\'\',!parsed[i].readOnly);g_form.setReadOnly(i+\'\',true);if(parsed[i].mandatory){g_form.setMandatory(i+\'\',parsed[i].mandatory)}}}sessionStorage[\'fieldValues_\'+g_form.getUniqueValue()]=JSON.stringify(fielVal);new GlideModal().get(\'loader\').destroy();var cat_sys_id=g_form.getUniqueValue();var envUUID=(g_form.getValue(\'default_environment\')+\'\').trim();var projectUUID=(g_form.getValue(\'default_project\')+\'\').trim();var ga=new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\');ga.addParam(\'sysparm_name\',\'fetchCredentialsList\');ga.addParam(\'sysparm_catSysID\',cat_sys_id);ga.addParam(\'sysparm_project\',projectUUID);ga.addParam(\'sysparm_env\',envUUID);ga.getXML(parseResponse);function parseResponse(response){var answer=response.responseXML.documentElement.getAttribute(\'answer\');var credArr={};var parsed=JSON.parse(answer);for(var i in parsed){var credential=parsed[i];var name=(credential.actual_name+\'\').toLowerCase().replace(\/ \/g,\'_\');g_form.setValue(name+\'_credential_name\',credential.name+\'\');g_form.setReadOnly(name+\'_credential_name\',true);g_form.setValue(name+\'_secret_type\',credential.type+\'\',(credential.type+\'\'==\'KEY\')?\'SSH Private Key\':\'Password\');g_form.setReadOnly(name+\'_secret_type\',true);g_form.setValue(name+\'_username\',credential.username.value);g_form.setReadOnly(name+\'_username\',credential.username.readOnly);g_form.setDisplay(name+\'_username\',!credential.username.readOnly);if((credential.type==\'KEY\')){g_form.setValue(name+\'_ssh_private_key\',credential.ssh_private_key.value);g_form.setReadOnly(name+\'_ssh_private_key\',credential.ssh_private_key.readOnly);g_form.setValue(name+\'_passphrase\',credential.passphrase.value);g_form.setReadOnly(name+\'_passphrase\',credential.passphrase.readOnly);g_form.setDisplay(name+\'_password\',\'false\');g_form.setDisplay(name+\'_ssh_private_key\',!credential.ssh_private_key.readOnly);g_form.setDisplay(name+\'_passphrase\',!credential.passphrase.readOnly)}else{g_form.setValue(name+\'_password\',\'\');credArr[name+\'_password\']=credential.password.value;g_form.setReadOnly(name+\'_password\',credential.password.readOnly);g_form.setDisplay(name+\'_password\',!credential.password.readOnly);g_form.setDisplay(name+\'_ssh_private_key\',\'false\');g_form.setDisplay(name+\'_passphrase\',\'false\')}g_form.setDisplay(name+\'_credential_reference\',\'false\');if(credential.credential_reference&amp;&amp;credential.credential_reference[0].name){g_form.setDisplay(name+\'_credential_reference\',\'true\');for(var i=0;i&lt;credential.credential_reference.length;i++){g_form.addOption(name+\'_credential_reference\',credential.credential_reference[i].uuid+\'\',credential.credential_reference[i].name+\'\')}if(credential.credential_reference.length&lt;=1){g_form.setReadOnly(name+\'_credential_reference\',\'true\')}else g_form.setReadOnly(name+\'_credential_reference\',\'false\');g_form.setDisplay(name+\'_credential_reference\',credential.credential_reference[0].readOnly);g_form.setDisplay(name+\'_ssh_private_key\',\'false\');g_form.setDisplay(name+\'_passphrase\',\'false\');g_form.setDisplay(name+\'_password\',\'false\');g_form.setDisplay(name+\'_secret_type\',\'false\')}}sessionStorage[\'credentials_\'+g_form.getUniqueValue()]=JSON.stringify(credArr);new GlideModal().get(\'loader\').destroy();reg.switchStatusToStandBy()}}}else{var ga=new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\');ga.addParam(\'sysparm_name\',\'getFieldDetails\');ga.addParam(\'cat_item_sys_id\',g_form.getUniqueValue());ga.addParam(\'fieldNameArray\',g_form.getFieldNames());ga.getXML(parseFieldResponse);function parseFieldResponse(response){var answer=response.responseXML.documentElement.getAttribute(\'answer\');var object1=JSON.parse(answer);for(var i in object1){if(object1[i].var_type==\'formatter\'||object1[i].var_type==\'container\'||object1[i].var_type==\'checkbox_container\'||object1[i].var_type==\'undefined\'||object1[i].var_type==\'Container Start\'){continue}if(object1[i].var_name!=\'default_app_name\'){g_form.setMandatory(object1[i].var_name+\'\',false)}if(object1[i].var_name!=\'default_environment\'&amp;&amp;object1[i].var_name!=\'default_project\'&amp;&amp;object1[i].var_name!=\'default_profile\'&amp;&amp;(object1[i].var_name).includes(\"snapshot_policy\")==false&amp;&amp;(object1[i].var_name).includes(\"local_rule\")==false){g_form.setDisplay(object1[i].var_name+\'\',false)}}reg.switchStatusToStandBy()}g_form.setDisplay(\'provider_icons\',\'true\');g_form.setReadOnly(\'default_project\',false);g_form.setReadOnly(\'default_app_name\',false);g_form.setReadOnly(\'default_profile\',false);g_form.setDisplay(\'default_project\',true);g_form.setDisplay(\'default_app_name\',true);g_form.setDisplay(\'default_profile\',true);g_form.setDisplay(\'default_environment\',true);var profile=newValue;var cat_sys_id=g_form.getUniqueValue();var envuuid=g_form.getValue(\'default_environment\');var ga=new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\');ga.addParam(\'sysparm_name\',\'fetchOrderFormData\');ga.addParam(\'sysparm_profile\',profile);ga.addParam(\'sysparm_catSysID\',cat_sys_id);ga.addParam(\'sysparm_envsysid\',envuuid);ga.getXML(parseResponse,null);function parseResponse(response){var answer=response.responseXML.documentElement.getAttribute(\'answer\');var ga=new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\');ga.addParam(\'sysparm_name\',\'fetchOrderFormData\');ga.addParam(\'sysparm_profile\',profile);ga.addParam(\'sysparm_catSysID\',cat_sys_id);ga.addParam(\'sysparm_envsysid\',envuuid);ga.getXML(parseResponse1,null);function parseResponse1(response){var answer1=response.responseXML.documentElement.getAttribute(\'answer\');var object1=JSON.parse(answer1);for(var i in object1){var fielVal={};var parsed=JSON.parse(answer);for(var i in parsed){if(i.indexOf(\'cluster_name\')==-1){if(object1[i].var_type+\'\'==\'masked\'){fielVal[i]=parsed[i].value;g_form.setValue(i+\'\',\'\')}else{g_form.setValue(i+\'\',parsed[i].value+\'\')}g_form.setReadOnly(i+\'\',parsed[i].readOnly+\'\');g_form.setDisplay(i+\'\',!parsed[i].readOnly);if(parsed[i].mandatory){g_form.setMandatory(i+\'\',parsed[i].mandatory)}}else{g_form.setValue(i+\'\',parsed[i].value+\'\');g_form.setDisplay(i+\'\',!parsed[i].readOnly);g_form.setReadOnly(i+\'\',true);if(parsed[i].mandatory){g_form.setMandatory(i+\'\',parsed[i].mandatory)}}}sessionStorage[\'fieldValues_\'+g_form.getUniqueValue()]=JSON.stringify(fielVal)}reg.switchStatusToStandBy()}}}}}catch(e){console.log(\'Inside onchange profile: \'+e.message);reg.switchStatusToStandBy()}}";

                onChangecatalogClientScript.addScript([configScript.genUniqueScriptIdTemplate(), configScript.getLoadingRegistryScriptTeamplate({
                    shouldRegistry: true
                }), onchangescript].join('\n'));
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                var grChange1 = new GlideRecord('catalog_script_client');
                if (grChange1.get(OnChangeCatalogScriptId)) {
                    grChange1.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");//ncm
                    grChange1.setValue('sys_policy', 'protected');
                    grChange1.update();
                }
                onChangecatalogClientScript.deleteRecord(grChange.sys_id);
			
            }
        }
    } catch (e) {
        this.logger.error("Exeption caught inside Migration_script.updateTheCatalogClientScriptForOneDotSeven() Error : - " + e);

    }

},

    updateTheCatalogClientScriptForOneDotSix: function() {
        try {
            gs.info("migration triggered");
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();

            while (gr.next()) {
                var fieldGR = new GlideRecord(this.appUtil.configuration.table.catItem + '');
                fieldGR.query();
                if (fieldGR.get(gr.item_name + '')) {
                    fieldGR.state = "published";
                    fieldGR.update();
                }

                var catalogScriptGR = new GlideRecord('catalog_script_client');
                catalogScriptGR.addQuery('cat_item', gr.item_name + '');
                catalogScriptGR.addEncodedQuery('nameINFetch values OnChange,Set Session Vars');
                catalogScriptGR.query();

                var catalogClientScript = new sn_sc.CatalogClientScript();
                var fieldList = [];
                var envFieldSysID;
                var onchangeproject;
                var setSessionVars;

                while (catalogScriptGR.next()) {
                    var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');
                    catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                    if (catalogScriptGR.name + '' == 'Fetch values OnChange' &amp;&amp; fieldList.indexOf(field) == -1)
                        fieldList.push(field);
                    else if (catalogScriptGR.name + '' == 'Set Session Vars')
                        setSessionVars = field;

                }

                var fieldListLength = fieldList.length;
                while (fieldListLength--) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Fetch values OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + fieldList[fieldListLength],
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { if (!sessionStorage[\'varValues\']) return; var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control.id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { new GlideModal().get(\'loader\').destroy(); return; } function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { if (i + \'\' == control.id + \'\') continue; var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { if (control.id + \'\' == k) { continue; } var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); if (g_form.getValue(\'default_profile\') != \'\') var profile = g_form.getValue(\'default_profile\').trim(); else var profile = \'runbook\'; var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control.id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', profile), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { new GlideModal().get(\'loader\').destroy(); var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; if (control.id + \'\' == sys_id) { continue; } var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); if(row.value!=\'undefined\') g_form.setValue(sys_id, row.value); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } if(row.value!=\'undefined\') g_form.setValue(sys_id, row.value); } if (row.state == \'ERROR\') { g_form.clearOptions(sys_id); g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching variables...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); if (g_form.getValue(\'default_profile\') != \'\') var profile = g_form.getValue(\'default_profile\').trim(); else var profile = \'runbook\'; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse, null, loadingDialog); } else { try { if (!sessionStorage[\'varValues\']) return;var control_id =\'" + fieldList[fieldListLength] + "\'; var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control_id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { return; } console.log(oldValue); console.log(newValue); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); if (g_form.getValue(\'default_profile\') != \'\') var profile = g_form.getValue(\'default_profile\').trim(); else var profile = \'runbook\'; var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control_id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', profile), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); if(row.value[0]!=\'undefined\') g_form.setValue(sys_id, row.value[0]); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } if(row.value!=\'undefined\') g_form.setValue(sys_id, row.value); } row.state == \'ERROR\' &amp;&amp; g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } var cat_sys_id = g_form.getUniqueValue(); if (g_form.getValue(\'default_profile\') != \'\') var profile = g_form.getValue(\'default_profile\').trim(); else var profile = \'runbook\'; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse); } catch (e) { console.log(\'Fetch values OnChange\' + e) } } } }";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                }

                try {
                    if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                        var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                        onChangecatalogClientScript2.setAttributes({
                            "name": "Set Session Vars",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "cat_variable": "IO:" + setSessionVars,
                            "active": true,
                            "order": 700,
                            "description": "This script is auto created thorugh runtime module for setting session json.",
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false

                        });
                        onChangecatalogClientScript2.appliesToCatalogItem(true);
                        var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; } for (var j in serv_json) { for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; } } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } } else { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } } } catch (e) { console.log(\'inside Set Session Vars:: \' + e.message); } }";
                        onChangecatalogClientScript2.addScript(onChangeScriptSess);
                        var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(OnChangeCatalogScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    } else {
                        var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                        onChangecatalogClientScript2.setAttributes({
                            "name": "Set Session Vars",
                            "type": "onLoad",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "active": true,
                            "order": 700,
                            "description": "This script is auto created thorugh runtime module for setting session json.",
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false

                        });
                        onChangecatalogClientScript2.appliesToCatalogItem(true);
                        var onChangeScriptSess = "function onLoad() { try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', \'runbook\'); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } } getAdvancedVars(var_array); sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_field\', \'onLoad\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', \'runbook\'); gajax.addParam(\'sysparm_envsysid\', \'\'); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); if (row.value) { for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value[0]); } } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); if (row.options) { for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value); } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } if (portal_check == \'false\') new GlideModal().get(\'variables_loader\').destroy(); } } } else { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', \'runbook\'); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } } getAdvancedVars(var_array); sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_field\', \'onLoad\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', \'runbook\'); gajax.addParam(\'sysparm_envsysid\', \'\'); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); if (row.value) { for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value[0]); } } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); if (row.options) { for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value); } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } if (portal_check == \'false\') new GlideModal().get(\'variables_loader\').destroy(); } } } } catch (e) { console.log(\'inside Set Session Vars:: \' + e.message); } }";
                        onChangecatalogClientScript2.addScript(onChangeScriptSess);
                        var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(OnChangeCatalogScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    }
                } catch (e) {
                    gs.info('Set Session Vars: ' + e.message);
                }

            }
            gs.setProperty("x_nuta2_nutanix_ca.1_6", "1");
            this.logger.info("Migration to v1.6 is completed");
        } catch (e) {
            this.logger.error("Exeption caught inside Migration_script.updateTheCatalogClientScriptForOneDotSix() Error : - " + e);
        }
    },

    updatedOneDotFiveDotTwoMigrationNeeded: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();
            if (gr.hasNext() &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_5_2') == '0')) {
                this.logger.info("Migration to V 1_5_2 require");
                return true;
            }
            this.logger.info("Migration to V 1_5_2 not require");
            gs.setProperty("x_nuta2_nutanix_ca.1_5_2", "1");
            return false;
        } catch (e) {
            this.logger.error("Exception caught inside Migration_script.isOneDotFiveTwoMigrationNeeded() Error : - " + e);
        }
    },

    updateTheCatalogClientScriptForOneDotFiveDotTwo: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();

            while (gr.next()) {
                var fieldGR = new GlideRecord(this.appUtil.configuration.table.catItem + '');
                fieldGR.query();
                if (fieldGR.get(gr.item_name + '')) {
                    fieldGR.state = "published";
                    fieldGR.update();
                }

                var catalogScriptGR = new GlideRecord('catalog_script_client');
                catalogScriptGR.addQuery('cat_item', gr.item_name + '');
                catalogScriptGR.addEncodedQuery('nameINOn Change of Project,On Change of Environment variable');
                catalogScriptGR.query();

                var catalogClientScript = new sn_sc.CatalogClientScript();
                var envFieldSysID;
                var onchangeproject;

                while (catalogScriptGR.next()) {
                    var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');
                    catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                    if (catalogScriptGR.name + '' == 'On Change of Environment variable')
                        envFieldSysID = field;
                    else if (catalogScriptGR.name + '' == 'On Change of Project')
                        onchangeproject = field;

                }

                if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                    if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                        try {
                            var onChangeCatalogProject = new sn_sc.CatalogClientScript();
                            onChangeCatalogProject.setAttributes({
                                "name": "On Change of Project",
                                "type": "onChange",
                                "applies_to": "item",
                                "cat_item": gr.item_name,
                                "cat_variable": "IO:" + onchangeproject,
                                "active": true,
                                "order": 700,
                                "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                                "applies_catalog": true,
                                "ui_type": '10',
                                "applies_req_item": false,
                                "applies_sc_task": false

                            });
                            onChangeCatalogProject.appliesToCatalogItem(true);
                            var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEnvironments\'); ga.addParam(\'sysparm_cat_sys_id\', cat_sys_id); ga.addParam(\'sysparm_project_id\', newValue); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var result = JSON.parse(answer); if (result.length == 0) { g_form.hideFieldMsg(\'default_environment\', true); g_form.clearOptions(\'default_environment\'); g_form.showFieldMsg(\'default_environment\', \'This Project has no valid Environments configured, you cannot proceed with the launch. Please contact your administrator\'); g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); if (portal_check == \'true\') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } } g_form.setMandatory(\'default_profile\', true); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); if (portal_check == \'false\') { var elemen = g_form.elements; for (var i in elemen) { if(elemen[i].type + \'\' == \'container\' || elemen[i].type + \'\' == \'checkbox_container\' ) continue; g_form.setDisplay(elemen[i].fieldName, false); } } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { g_form.clearMessages(); g_form.clearOptions(\'default_environment\'); g_form.clearValue(\'default_environment\'); for (var i = 0; i &lt; result.length; i++) { var jsonObj = result[i]; g_form.addOption(\'default_environment\', jsonObj.UUID + \'\', jsonObj.Name + \'\'); } if (portal_check == \'true\') { var jsonobj = result[0]; g_form.setValue(\'default_environment\', jsonObj.UUID); } } } } }";
                            onChangeCatalogProject.addScript(onChangeProjectScript);
                            var OnChangeCatalogScriptId = onChangeCatalogProject.create();
                            var grChange = new GlideRecord('catalog_script_client');
                            if (grChange.get(OnChangeCatalogScriptId)) {
                                grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                                grChange.setValue('sys_policy', 'protected');
                                grChange.update();
                            }
                            this.logger.debug("Created On Change of Project (calm evirment 3.2) client script on  " + gr.item_name);

                            //onchange

                            var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
                            onChangeCatalogEnvironment.setAttributes({
                                "name": "On Change of Environment variable",
                                "type": "onChange",
                                "applies_to": "item",
                                "cat_item": gr.item_name + '',
                                "cat_variable": "IO:" + envFieldSysID,
                                "active": true,
                                "order": 700,
                                "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                                "applies_catalog": true,
                                "ui_type": '10',
                                "applies_req_item": false,
                                "applies_sc_task": false
                            });
                            onChangeCatalogEnvironment.appliesToCatalogItem(true);
                            var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'environment_loader\', true); loadingDialog.setTitle(\'Fetching Profiles...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var def_project; var gUrl = new GlideURL(); gUrl.setFromCurrent(); for (var i = 0; i &lt; g_form.getControl(\'default_project\').options.length; i++) { if (g_form.getControl(\'default_project\').options[i].value == g_form.getValue(\'default_project\')) { def_project = g_form.getControl(\'default_project\').options[i].innerText; break; } } var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_sysID\', g_form.getUniqueValue()); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(\' On Change of Environment variable answer\' + answer); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.elements; for (var i in elemen) { if (elemen[i].type + \'\' == \'container\' || elemen[i].type + \'\' == \'checkbox_container\') continue; g_form.setDisplay(elemen[i].fieldName, false); } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { var elemen = g_form.elements; for (var i in elemen) { if (elemen[i].type + \'\' == \'container\' || elemen[i].type + \'\' == \'checkbox_container\') continue; g_form.setDisplay(elemen[i].fieldName, true); } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); for (var i = 0; i &lt; answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } } else { var def_project; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_sysID\', g_form.getUniqueValue()); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.setDisplay(\'default_profile\', true); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { g_form.setReadOnly(\'default_profile\', false); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.clearValue(\'default_profile\'); for (var i = 0; i &lt; answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } g_form.setValue(\'default_profile\', answer[0]); if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } } } }";
                            onChangeCatalogEnvironment.addScript(onChangeEnvironmentScript);
                            var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
                            var grChange = new GlideRecord('catalog_script_client');
                            if (grChange.get(OnChangeCatalogScriptId)) {
                                grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                                grChange.setValue('sys_policy', 'protected');
                                grChange.update();
                            }
                            this.logger.debug("Created On Change of Environment (calm evirment 3.2) client script on  " + gr.item_name);
                        } catch (e) {
                            gs.info('Fetch 3.2:: ' + e.message);
                        }
                    }
                }
            }

            gs.setProperty("x_nuta2_nutanix_ca.1_5_2", "1");
            this.logger.info("Migration to v1.5.2 is completed");
        } catch (e) {
            this.logger.error("Exeption caught inside Migration_script.updateTheCatalogClientScriptForOneDotFiveDotTwo() Error : - " + e);
        }
    },


    updateTheCatalogClientScriptForOneDotFiveDotOne: function() {
        try {
            this.updateBpTypeForOneDotFive();
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();

            while (gr.next()) {

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + gr.item_name + '');
                fieldGR.query();
                var nic_list = '';
                var counter = 0;
                var nicSysIdList = [];
                while (fieldGR.next()) {

                    if ((fieldGR.name + '').indexOf('_nic_') != -1) {
                        nicSysIdList.push(fieldGR.sys_id + '');
                        nic_list = "Populate Nic on change of Nic Sys_id : " + counter + ' ,' + nic_list;
                        counter++;
                    }
                }
                gs.info('nic_list:: ' + nic_list);
                var catalogScriptGR = new GlideRecord('catalog_script_client');
                catalogScriptGR.addQuery('cat_item', gr.item_name + '');
                catalogScriptGR.addEncodedQuery('nameINGet Project and Profile List onLoad,Get Credentials OnLoad,Fetch values OnChange,Fetch dynamic value for advance variable,Fetch form data on change of profile,Get Subnet Info,Check AppName OnChange,Check AppName OnSubmit,Hide Order details on request,Get Subnet Info on project change,Check Catalog Item Validity project,Check Catalog Item Validity profile,Set Session Vars,Fetch dependencies on change of profile,Service portal fixes,On Change of Project,On Change of Environment variable,Check Catalog Item Validity,' + nic_list);
                catalogScriptGR.query();

                var catalogClientScript = new sn_sc.CatalogClientScript();
                var fieldList = [];
                var envFieldSysID;
                var profilesysID;
                var fetchformSysID;
                var appSysID;
                var subnetInfo;
                var catItemValidity;
                var catItemProValidity;
                var setSessionVars;
                var portalfix;
                var onchangeproject;


                // For NIC onchange



                while (catalogScriptGR.next()) {
                    var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');
                    catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                    if (catalogScriptGR.name + '' == 'Fetch values OnChange' &amp;&amp; fieldList.indexOf(field) == -1)
                        fieldList.push(field);
                    else if (catalogScriptGR.name + '' == 'On Change of Environment variable')
                        envFieldSysID = field;
                    else if (catalogScriptGR.name + '' == 'Fetch dependencies on change of profile')
                        profilesysID = field;
                    else if (catalogScriptGR.name + '' == 'Fetch form data on change of profile')
                        fetchformSysID = field;
                    else if (catalogScriptGR.name + '' == 'Check AppName OnChange')
                        appSysID = field;
                    else if (catalogScriptGR.name + '' == 'Get Subnet Info on project change')
                        subnetInfo = field;
                    else if (catalogScriptGR.name + '' == 'Check Catalog Item Validity project')
                        catItemValidity = field;
                    else if (catalogScriptGR.name + '' == 'Check Catalog Item Validity profile')
                        catItemProValidity = field;
                    else if (catalogScriptGR.name + '' == 'Set Session Vars')
                        setSessionVars = field;
                    else if (catalogScriptGR.name + '' == 'Service portal fixes')
                        portalfix = field;
                    else if (catalogScriptGR.name + '' == 'On Change of Project')
                        onchangeproject = field;

                }

                //onchange

                for (var x = 0; x &lt; nicSysIdList.length; x++) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Populate Nic on change of Nic Sys_id : " + x,
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + nicSysIdList[x],
                        "active": true,
                        "order": 400,
                        "description": "This script is created for onChange of Nic",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var clusterJson = JSON.parse(sessionStorage.getItem('clusterName_' + g_form.getUniqueValue())); var catCluster = clusterJson.catalog_data; var clusterInfo = clusterJson.cluster_info; var clusterVal; for (var i in clusterInfo) { for (var k in clusterInfo[i].subnet) { if (k == newValue) { clusterVal = i + ''; } } } var clustername, relatedNic; for (var i in catCluster) { var nic = catCluster[i].nics; for (var k in nic) { var nicElem = nic[k]; if ('" + nicSysIdList[x] + "' == k) { if (!catCluster[i].value) { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; addNicOptions(relatedNic); } else { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; } } } } function addNicOptions(relatedNic) { for (var n in relatedNic) { for (var l in clusterInfo) { if (l != clusterVal &amp;&amp; clusterVal) for (var j in clusterInfo[l].subnet) { g_form.removeOption(relatedNic[n], j); } } } } } else { var clusterJson = JSON.parse(sessionStorage.getItem('clusterName_' + g_form.getUniqueValue())); var catCluster = clusterJson.catalog_data; var clusterInfo = clusterJson.cluster_info; var clusterVal; for (var i in clusterInfo) { for (var k in clusterInfo[i].subnet) { if (k == newValue) { clusterVal = i + ''; } } } var clustername, relatedNic; for (var i in catCluster) { var nic = catCluster[i].nics; for (var k in nic) { var nicElem = nic[k]; if ('" + nicSysIdList[x] + "' == k) { if (!catCluster[i].value) { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; addNicOptions(relatedNic); } else { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; } } } } if (typeof clusterVal == \"undefined\") { g_form.showFieldMsg(catCluster[i].name,'This Nic is not associated with the project, Please select another Nic. To Filterout unassociated Nic reload the page.', 'error'); } function addNicOptions(relatedNic){ for (var n in relatedNic) { for (var l in clusterInfo) { if (l != clusterVal &amp;&amp; clusterVal) for (var j in clusterInfo[l].subnet){ g_form.removeOption(relatedNic[n], j); } } } } } } }";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var onChangeCatalogClientScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onChangeCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();

                    }
                }




                //Fetch values on change loop

                var fieldListLength = fieldList.length;
                while (fieldListLength--) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Fetch values OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + fieldList[fieldListLength],
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { if (!sessionStorage[\'varValues\']) return; var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control.id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { new GlideModal().get(\'loader\').destroy(); return; } function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { if (i + \'\' == control.id + \'\') continue; var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { if (control.id + \'\' == k) { continue; } var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control.id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { new GlideModal().get(\'loader\').destroy(); var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; if (control.id + \'\' == sys_id) { continue; } var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); g_form.setValue(sys_id, row.value); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } g_form.setValue(sys_id, row.value); } if (row.state == \'ERROR\') { g_form.clearOptions(sys_id); g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching variables...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse, null, loadingDialog); } else { try { if (!sessionStorage[\'varValues\']) return; var control_id =\'" + fieldList[fieldListLength] + "\'; var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control_id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { return; } console.log(oldValue); console.log(newValue); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control_id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); g_form.setValue(sys_id, row.value[0]); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } g_form.setValue(sys_id, row.value); } row.state == \'ERROR\' &amp;&amp; g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse); } catch (e) { console.log(\'Fetch values OnChange\' + e) } } } }";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                }

                //onload
                //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {

                    try {
                        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                        onLoadCatalogClientScript.setAttributes({
                            "name": "Get Project and Profile List onLoad",
                            "type": "onLoad",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "active": "true",
                            "order": "100",
                            "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                            "applies_catalog": "true",
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        onLoadCatalogClientScript.appliesToCatalogItem(true);
                        var onLoadScript = "";
                        if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                            onLoadScript = "function onLoad() { try { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } if (portal_check == 'true') { project = projectList[0]; g_form.setValue('default_project', project.uuid); } if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (portal_check == 'false') new GlideModal().get('loader').destroy(); } } catch (e) { console.log('Exception in Get project and profile list onload ' + e.message); }}";
                        } else {
                            onLoadScript = "function onLoad() { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if(portal_check =='false') { var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent('' + loadingHTML); } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); if(portal_check == 'false') ga.getXML(parseResponse, null, loadingDialog); else ga.getXML(parseResponse); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]); if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (profileList.length == 1) { g_form.setReadOnly('default_profile', true); } new GlideModal().get('loader').destroy(); var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent('' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse, null, loadingDialog); } function parseResponseForPortal(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]); if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (profileList.length == 1) { g_form.setReadOnly('default_profile', true); } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponseForPortal); } function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json); } function varResponseForPortal(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } } } } }";
                        }
                        onLoadCatalogClientScript.addScript(onLoadScript);
                        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(onLoadCatalogClientScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    } catch (e) {
                        gs.info('Get Project and Profile List onLoad: ' + e.message);
                    }
                }

                // onload

                try {
                    gs.info('get_credentialss:: ' + gr.item_name);
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Credentials OnLoad",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": true,
                        "order": 900,
                        "description": "This script is auto created thorugh runtime module for getting Credentials list.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { try { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXML(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Credentials List...'); loadingDialog.renderWithContent('' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } } else { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); } } } } catch(e) { console.log('Exception Inside Get Credentials OnLoad '+e.message); } }";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Get Credentials OnLoad: ' + e.message);
                }


                //onload

                try {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Fetch dynamic value for advance variables onload",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": true,
                        "order": 10,
                        "description": "This script is created for fetching dynamic values for advance variables onload.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXML(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Dynamic values for advance variables...'); loadingDialog.renderWithContent('' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'advanceVariableDynamicOptions'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage['FieldRegex_' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; if (row.options.state == 'SUCCESS') { g_form.clearOptions(keys[i] + ''); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + '', row.options.values[k], row.options.values[k]); } } else { g_form.addErrorMessage('Error in variable: ' + keys[i] + ': ' + row.options.values[0]); } } new GlideModal().get('loader').destroy(); } } else { var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'advanceVariableDynamicOptions'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage['FieldRegex_' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; if (row.options.state == 'SUCCESS') { g_form.clearOptions(keys[i] + ''); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + '', row.options.values[k], row.options.values[k]); } } else { g_form.showFieldMsg(keys[i], 'Error in variable: ' + keys[i] + ': ' + row.options.values[0], 'error'); } } } } } }";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Fetch dynamic value for advance variables onload: ' + e.message);
                }

                //onchange********************** (need to change variable onchange)

                //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                    try {
                        var catalogScriptGR = new sn_sc.CatalogClientScript();
                        catalogScriptGR.setAttributes({
                            "name": "Fetch form data on change of profile",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "cat_variable": "IO:" + fetchformSysID,
                            "active": true,
                            "order": 100,
                            "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        catalogScriptGR.appliesToCatalogItem(true);
                        var script = '';
                        if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                            script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { if (newValue == \'\') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].prettyName != \'default_app_name\') { g_form.setMandatory(flds[i].prettyName, false); } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', false); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); g_form.setMandatory(\'default_profile\', true); g_form.setDisplay(\'default_environment\', true); g_form.setReadOnly(\'default_environment\', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get(\'loader\').destroy(); var cat_sys_id = g_form.getUniqueValue(); var envUUID = (g_form.getValue(\'default_environment\') + \'\').trim(); var projectUUID = (g_form.getValue(\'default_project\') + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchCredentialsList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.addParam(\'sysparm_project\', projectUUID); ga.addParam(\'sysparm_env\', envUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + \'\').toLowerCase().replace(\/ \/g, \'_\'); g_form.setValue(name + \'_credential_name\', credential.name + \'\'); g_form.setReadOnly(name + \'_credential_name\', true); g_form.setValue(name + \'_secret_type\', credential.type + \'\', (credential.type + \'\' == \'KEY\') ? \'SSH Private Key\' : \'Password\'); g_form.setReadOnly(name + \'_secret_type\', true); g_form.setValue(name + \'_username\', credential.username.value); g_form.setReadOnly(name + \'_username\', credential.username.readOnly); g_form.setDisplay(name + \'_username\', !credential.username.readOnly); if ((credential.type == \'KEY\')) { g_form.setValue(name + \'_ssh_private_key\', credential.ssh_private_key.value); g_form.setReadOnly(name + \'_ssh_private_key\', credential.ssh_private_key.readOnly); g_form.setValue(name + \'_passphrase\', credential.passphrase.value); g_form.setReadOnly(name + \'_passphrase\', credential.passphrase.readOnly); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_ssh_private_key\', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + \'_passphrase\', !credential.passphrase.readOnly); } else { g_form.setValue(name + \'_password\', \'\'); credArr[name + \'_password\'] = credential.password.value; g_form.setReadOnly(name + \'_password\', credential.password.readOnly); g_form.setDisplay(name + \'_password\', !credential.password.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); } g_form.setDisplay(name + \'_credential_reference\', \'false\'); if (credential.credential_reference &amp;&amp; credential.credential_reference[0].name) { g_form.setDisplay(name + \'_credential_reference\', \'true\'); for (var i = 0; i &lt; credential.credential_reference.length; i++) { g_form.addOption(name + \'_credential_reference\', credential.credential_reference[i].uuid + \'\', credential.credential_reference[i].name + \'\'); } if (credential.credential_reference.length &lt;= 1) { g_form.setReadOnly(name + \'_credential_reference\', \'true\'); } else g_form.setReadOnly(name + \'_credential_reference\', \'false\'); g_form.setDisplay(name + \'_credential_reference\', credential.credential_reference[0].readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_secret_type\', \'false\'); } } sessionStorage[\'credentials_\' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get(\'loader\').destroy(); } } } else { var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseFieldResponse); function parseFieldResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object1 = JSON.parse(answer); for (var i in object1) { if (object1[i].var_type == \'formatter\' || object1[i].var_type == \'container\' || object1[i].var_type == \'checkbox_container\' || object1[i].var_type == \'undefined\' || object1[i].var_type == \'Container Start\') { continue; } if (object1[i].var_name != \'default_app_name\') { g_form.setMandatory(object1[i].var_name + \'\', false); } if (object1[i].var_name != \'default_environment\' &amp;&amp; object1[i].var_name != \'default_project\' &amp;&amp; object1[i].var_name != \'default_profile\') { g_form.setDisplay(object1[i].var_name + \'\', false); } } } g_form.setDisplay(\'provider_icons\', \'true\'); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_environment\', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse1, null); function parseResponse1(response) { var answer1 = response.responseXML.documentElement.getAttribute(\'answer\'); var object1 = JSON.parse(answer1); for (var i in object1) { var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (object1[i].var_type + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } } } } } } catch (e) { console.log(\'Inside onchange profile: \' + e.message); } }";
                        } else {
                            script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialogbox = new GlideModal(\'loader\', true); loadingDialogbox.setTitle(\'Fetching Order Form Data...\'); loadingDialogbox.renderWithContent(\'\' + loadingHTML); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].prettyName != \'default_app_name\') { g_form.setMandatory(flds[i].prettyName, false); } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', \'false\'); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null, loadingDialogbox); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get(\'loader\').destroy(); var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching Credentials List...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchCredentialsList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + \'\').toLowerCase().replace(\/ \/g, \'_\'); g_form.setValue(name + \'_credential_name\', credential.name + \'\'); g_form.setReadOnly(name + \'_credential_name\', true); g_form.setValue(name + \'_secret_type\', credential.type + \'\', (credential.type + \'\' == \'KEY\') ? \'SSH Private Key\' : \'Password\'); g_form.setReadOnly(name + \'_secret_type\', true); g_form.setValue(name + \'_username\', credential.username.value); g_form.setReadOnly(name + \'_username\', credential.username.readOnly); g_form.setDisplay(name + \'_username\', !credential.username.readOnly); if ((credential.type == \'KEY\')) { g_form.setValue(name + \'_ssh_private_key\', credential.ssh_private_key.value); g_form.setReadOnly(name + \'_ssh_private_key\', credential.ssh_private_key.readOnly); g_form.setValue(name + \'_passphrase\', credential.passphrase.value); g_form.setReadOnly(name + \'_passphrase\', credential.passphrase.readOnly); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_ssh_private_key\', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + \'_passphrase\', !credential.passphrase.readOnly); } else { g_form.setValue(name + \'_password\', \'\'); credArr[name + \'_password\'] = credential.password.value; g_form.setReadOnly(name + \'_password\', credential.password.readOnly); g_form.setDisplay(name + \'_password\', !credential.password.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); } g_form.setDisplay(name + \'_credential_reference\', \'false\'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + \'_credential_reference\', \'true\'); g_form.addOption(name + \'_credential_reference\', credential.credential_reference.uuid + \'\', credential.credential_reference.name + \'\'); g_form.setReadOnly(name + \'_credential_reference\', credential.credential_reference.readOnly); g_form.setDisplay(name + \'_credential_reference\', !credential.credential_reference.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_secret_type\', \'false\'); } } sessionStorage[\'credentials_\' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get(\'loader\').destroy(); } } }";
                        }
                        catalogScriptGR.addScript(script);
                        var ScriptId = catalogScriptGR.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(ScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    } catch (e) {
                        gs.info('Fetch form data on change of profile: ' + e.message);
                    }
                }
                //onload (ACTIVE = FALSE);

                try {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Subnet Info",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": false,
                        "order": 50,
                        "description": "This script is created for getting subnet list.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Get Subnet Info: ' + e.message);
                }

                //onchange

                try {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Check AppName OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + appSysID,
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false

                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var name = newValue; if ((newValue.length != ((newValue.trim()).length)) || (!(\/^[\\_\\-\\w ]+$\/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) { if(portal_check == 'false') g_form.clearValue('default_app_name'); else g_form.setValue('default_app_name', ''); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.'); } } }";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Check AppName OnChange: ' + e.message);
                }

                //onsubmit

                try {
                    var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                    onSubmitcatalogScriptGR.setAttributes({
                        "name": "Check AppName OnSubmit",
                        "type": "onSubmit",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": 'false',
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                    var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                    onSubmitcatalogScriptGR.addScript(onSubmitscript);
                    var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onSubmitcatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Check AppName OnSubmit: ' + e.message);
                }

                //onload

                try {
                    var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScriptGR.setAttributes({
                        "name": "Hide Order details on request",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": true,
                        "order": 10,
                        "description": "Hide values on request details.",
                        "applies_catalog": "false",
                        "ui_type": '10',
                        "applies_req_item": "true",
                        "applies_sc_task": "false"
                    });
                    onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                    onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                    var onLoadScriptHide = "function onLoad() { var blueprintType = \"\"; if (g_form.getTableName() + \'\' == \'sc_req_item\') { var item_name = g_form.getValue(\"cat_item\"); var glide = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); glide.addParam(\'sysparm_name\', \'fetchBlueprintType\'); glide.addParam(\'sysparm_item_sys_id\', item_name); glide.getXML(getBlueprintResponse); function getBlueprintResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); blueprintType = answer; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } g_form.setMandatory(flds[i].prettyName, false); g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', \'false\'); g_form.setReadOnly(\'default_project\', true); g_form.setReadOnly(\'default_environment\', true); g_form.setReadOnly(\'default_app_name\', true); g_form.setReadOnly(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); if (blueprintType == \"Runbook\" || blueprintType == \"Marketplace Runbook\") { g_form.setDisplay(\'default_endpoint\', true); } var profile = g_form.getValue(\'default_profile\') + \'\'; var cat_sys_id = g_form.getValue(\'cat_item\') + \'\'; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile + \'\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id + \'\'); ga.getXML(parseResponse); } } function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } g_form.setReadOnly(i + \'\', true); g_form.setDisplay(i + \'\', !parsed[i].readOnly); } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } }";
                    onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Hide Order details on request: ' + e.message);
                }

                //onchange

                try {
                    var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript1.setAttributes({
                        "name": "Get Subnet Info on project change",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + subnetInfo,
                        "active": true,
                        "order": 600,
                        "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false

                    });
                    onChangecatalogClientScript1.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.getXML(processAnswer); function processAnswer(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); sessionStorage[\'clusterName_\' + g_form.getUniqueValue()] = ans; ans = JSON.parse(ans); var catalog_clusterJSON = ans.catalog_data; clusterJSON = ans.cluster_info; var nicList = []; for (var m in clusterJSON) { nicList.push(clusterJSON[m].subnet); } for (var k in catalog_clusterJSON) { for (var i in catalog_clusterJSON[k].nics) { if (catalog_clusterJSON[k].value + \'\') { for (var l in clusterJSON) { var subnetList = clusterJSON[l].subnet; if (l != catalog_clusterJSON[k].value + \'\') for (var s in subnetList) { \/*g_form.removeOption(catalog_clusterJSON[k].nics[i] + \'\', s);*\/ } } } { var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + \'\'); var n=0; if(opt.options) { n = opt.options.length; } for (var x = 1; x &lt; n; x++) { var present = false; var val = opt.options[x].value + \'\'; for (var s = 0; s &lt; nicList.length; s++) { if (nicList[s][val]) { present = true; break; } } if (!present) { g_form.removeOption(catalog_clusterJSON[k].nics[i] + \'\', opt.options[x].value + \'\'); x--; n--; } } } } } } } else { try { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.getXML(processAnswer); function processAnswer(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); sessionStorage[\'clusterName_\' + g_form.getUniqueValue()] = ans; ans = JSON.parse(ans); var catalog_clusterJSON = ans.catalog_data; clusterJSON = ans.cluster_info; var nicList = []; for (var m in clusterJSON) { nicList.push(clusterJSON[m].subnet); } var nic_variable_namme = []; for (var n in catalog_clusterJSON) { var nics = catalog_clusterJSON[n].nics; for (var k in nics) nic_variable_namme.push(nics[k]); } var catNicJson = { \"nic\": nic_variable_namme, \"nicList\": nicList }; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'setSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_catNicJson\', JSON.stringify(catNicJson)); ga.getXML(processAnswer1); function processAnswer1(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); } } } catch (err) {} } } }";
                    onChangecatalogClientScript1.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('"Get Subnet Info on project change: ' + e.message);
                }

                //onchange


                try {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Check Catalog Item Validity project",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + catItemValidity,
                        "active": true,
                        "order": 1,
                        "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } g_form.setReadOnly(\'default_endpoint\', false); var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { var selectedEndpointList; var allEndpointList; portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var projectUUID = (newValue + \'\').trim(); if (projectUUID == \'\') return; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Checking Project Status...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'project\'); ga.addParam(\'sysparm_projectUUID\', projectUUID); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = \'\'; if (parsed[index].state == \'INACTIVE\') { message = parsed[index].name + \' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \' + parsed[index].name + \' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } new GlideModal().get(\'loader\').destroy(); } function clearFieldValue(message) { var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].label == \"Project\" &amp;&amp; flds[i].prettyName == \"default_project\") continue; if (flds[i].label == \"Profile\" &amp;&amp; flds[i].prettyName == \"default_profile\") continue; if (flds[i].prettyName.indexOf(\'cluster_name\') == -1) g_form.clearValue(flds[i].prettyName); } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchSelectedEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); selectedEndpointList = parsed.endpointList; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEndpointAssociatedToProject\'); ga.addParam(\'sysparm_projectID\', newValue); ga.addParam(\'sysparm_selected_endpoint\', JSON.stringify(selectedEndpointList)); ga.getXML(parseResponseProjectAndEndpointList); function parseResponseProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(\"Endpoint associated to new project ::\" + answer); var parse = JSON.parse(answer); var final_endpointList = parse.single; g_form.clearOptions(\'default_endpoint\'); for (var i = 0; i &lt; final_endpointList.length; i++) { var endpoint = final_endpointList[i]; g_form.addOption(\'default_endpoint\', endpoint.uuid + \'\', endpoint.name + \'\'); console.log(\"endpoint ::\" + endpoint.uuid); if (endpoint.uuid == \"\") { g_form.showFieldMsg(\'default_endpoint\', \'There are no applicable Endpoints(s) that match the selected Project. Please choose a different Project to proceed.\'); } } if (final_endpointList.length == 1) { g_form.setReadOnly(\'default_endpoint\', true); } } } } else { var projectUUID = (newValue + \'\').trim(); if (projectUUID == \'\') return; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'project\'); ga.addParam(\'projectUUID\', projectUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = \'\'; if (parsed[index].state == \'INACTIVE\') { message = parsed[index].name + \' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \' + parsed[index].name + \' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } } function getParameterValue(name) { name = name.replace(\/[\\\\[]\/, \"\\\\\\\\\\\\[\").replace(\/[\\\\]]\/, \"\\\\\\\\\\\\]\"); var regexS = \"[\\\\\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } function clearFieldValue(message) { alert(message); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseResponse1); function parseResponse1(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object = JSON.parse(answer); for (var i in object) { if (object[i].var_type == \'formatter\' || object[i].var_type == \'container\' || object[i].var_type == \'checkbox_container\' || object[i].var_type == \'undefined\' || object[i].var_type == \'Container Start\') { continue; } if (object[i].var_name.indexOf(\'cluster_name\') == -1) g_form.clearValue(object[i].var_name); } } self.location = \'\/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24\'; } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchSelectedEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); selectedEndpointList = parsed.endpointList; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEndpointAssociatedToProject\'); ga.addParam(\'sysparm_projectID\', newValue); ga.addParam(\'sysparm_selected_endpoint\', JSON.stringify(selectedEndpointList)); ga.getXML(parseResponseProjectAndEndpointList); function parseResponseProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(\"Endpoint assciated to new project ::\" + answer); var parse = JSON.parse(answer); var final_endpointList = parse.single; g_form.clearOptions(\'default_endpoint\'); for (var i = 0; i &lt; final_endpointList.length; i++) { var endpoint = final_endpointList[i]; g_form.addOption(\'default_endpoint\', endpoint.uuid + \'\', endpoint.name + \'\'); console.log(\"endpoint ::\" + endpoint.uuid); if (endpoint.uuid == \"\") { g_form.showFieldMsg(\'default_endpoint\', \'There are no applicable Endpoints(s) that match the selected Project. Please choose a different Project to proceed.\'); } } if (final_endpointList.length == 1) { g_form.setReadOnly(\'default_endpoint\', true); } } } } } }";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Check Catalog Item Validity project: ' + e.message);
                }


                //onchange
                //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                    try {

                        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                        onLoadCatalogClientScript.setAttributes({
                            "name": "Check Catalog Item Validity profile",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "cat_variable": "IO:" + catItemProValidity,
                            "active": true,
                            "order": 1,
                            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        onLoadCatalogClientScript.appliesToCatalogItem(true);
                        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var blueprintType = getParameterValue(\'type\') + \'\'; var blueprintUUID = getParameterValue(\'uuid\') + \'\'; var profileSysId = getParameterValue(\'profileSysId\') + \'\'; var profileName = (newValue + \'\').trim(); var envUUID = (g_form.getValue(\'default_environment\')+\'\').trim(); var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Checking Blueprint Status...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'profile\'); ga.addParam(\'sysparm_blueprintType\', blueprintType); ga.addParam(\'sysparm_blueprintUUID\', blueprintUUID); ga.addParam(\'sysparm_envUUID\', envUUID); ga.addParam(\'sysparm_profileSysId\', profileSysId); ga.addParam(\'sysparm_profileName\', profileName); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for(var index in parsed) { var message = \'\'; if(parsed[index].state == \'INACTIVE\'){ message = parsed[index].name+\' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \'+ parsed[index].name+\' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } new GlideModal().get(\'loader\').destroy(); } function clearFieldValue(message) { var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].label == \"Project\" &amp;&amp; flds[i].prettyName == \"default_project\") continue; if (flds[i].label == \"Profile\" &amp;&amp; flds[i].prettyName == \"default_profile\") continue; if (flds[i].prettyName.indexOf(\'cluster_name\') == -1) g_form.clearValue(flds[i].prettyName); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } function getParameterValue(name) { name = name.replace(\/[[]\/, \"\\[\").replace(\/[]]\/, \"\\]\"); var regexS = \"[\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } } else { var blueprintType = getParameterValue(\'type\') + \'\'; var blueprintUUID = getParameterValue(\'uuid\') + \'\'; var profileSysId = getParameterValue(\'profileSysId\') + \'\'; var profileName = (newValue + \'\').trim(); if (profileName == \'\') return; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'profile\'); ga.addParam(\'blueprintType\', blueprintType); ga.addParam(\'blueprintUUID\', blueprintUUID); ga.addParam(\'profileSysId\', profileSysId); ga.addParam(\'profileName\', profileName); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for(var index in parsed) { var message = \'\'; if(parsed[index].state == \'INACTIVE\'){ message = parsed[index].name+\' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \'+ parsed[index].name+\' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } function clearFieldValue(message) { alert(message); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseResponse1); function parseResponse1(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object = JSON.parse(answer); for (var i in object) { if (object[i].var_type == \'formatter\' || object[i].var_type == \'container\' || object[i].var_type == \'checkbox_container\' || object[i].var_type == \'undefined\' || object[i].var_type == \'Container Start\') { continue; } if (object[i].var_name.indexOf(\'cluster_name\') == -1) g_form.clearValue(object[i].var_name); } } self.location = \'\/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24\'; } } } } catch (e) { console.log(\'inside Check Catalog Item Validity profile:: \' + e.message); } }";
                        onLoadCatalogClientScript.addScript(onLoadScript);
                        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(onLoadCatalogClientScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    } catch (e) {
                        gs.info('Check Catalog Item Validity profile: ' + e.message);
                    }
                }

                //onchange

                try {
                    var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript2.setAttributes({
                        "name": "Set Session Vars",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + setSessionVars,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for setting session json.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false

                    });
                    onChangecatalogClientScript2.appliesToCatalogItem(true);
                    var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; } for (var j in serv_json) { for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; } } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } } else { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } } } catch (e) { console.log(\'inside Set Session Vars:: \' + e.message); } }";
                    onChangecatalogClientScript2.addScript(onChangeScriptSess);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Set Session Vars: ' + e.message);
                }


                //onchange
                //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                    try {
                        var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
                        onChangecatalogClientScript3.setAttributes({
                            "name": "Fetch dependencies on change of profile",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "cat_variable": "IO:" + profilesysID,
                            "active": true,
                            "order": 900,
                            "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        onChangecatalogClientScript3.appliesToCatalogItem(true);
                        var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); if (portal_check == \'false\') parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); if (portal_check == \'false\') parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_field\', \'onLoad\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); if (row.value) { for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value[0]); } } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); if (row.options) { for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value); } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } if (portal_check == \'false\') new GlideModal().get(\'variables_loader\').destroy(); } } } } }";
                        onChangecatalogClientScript3.addScript(onChangeScriptVars);
                        var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(OnChangeCatalogScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    } catch (e) {
                        gs.info('Fetch dependencies on change of profile:: ' + e.message);
                    }
                }

                //onchange
                try {
                    gs.info('portal_fix: ' + portalfix);
                    var active_flag = gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') + '';

                    var catalogScriptGR = new sn_sc.CatalogClientScript();
                    catalogScriptGR.setAttributes({
                        "name": "Service portal fixes",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + portalfix,
                        "active": active_flag,
                        "order": 300,
                        "description": 'This script is auto created thorugh runtime module for service portal fixes.',
                        "applies_catalog": true,
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    catalogScriptGR.appliesToCatalogItem(true);
                    var Script = "function onChange(control, oldValue, newValue, isLoading) { try { if (isLoading) { return; } var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if( portal_check == 'true') { if (newValue == '') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + '' === 'default_profile' || elemen[i] + '' === 'default_project' || elemen[i] + '' === 'default_environment' || elemen[i] + '' === 'default_app_name') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.setDisplay('default_profile', true); g_form.setDisplay('default_project', true); g_form.setDisplay('default_environment', true); g_form.setDisplay('default_app_name', true); g_form.setMandatory('default_profile', true); } else { var credentials = g_form.getFieldNames(); for (var i in credentials) { if (credentials[i].includes('_password') || credentials[i].includes('_private_key') || credentials[i].includes('_passphrase')) { g_form.setVisible(credentials[i] + '', false); } } var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'extraFields'); ga.addParam('sysparm_catSysID', g_form.getUniqueValue()); ga.addParam('sysparm_fieldNames', g_form.getFieldNames()); ga.addParam('sysparm_profile', newValue); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var object = JSON.parse(answer); var extraFields = JSON.parse(object.extraFields); var privateFields = JSON.parse(object.privateFields); var showRuntimeVariables = JSON.parse(object.showRuntimeVariables); var secretVariables = JSON.parse(object.secretVariables); var extraCredentials = JSON.parse(object.extraCredentials); for (var i in extraFields) g_form.setVisible(extraFields[i] + '', false); for (var j in privateFields) g_form.setVisible(privateFields[j] + '', false); for (var k in showRuntimeVariables) g_form.setVisible(showRuntimeVariables[k] + '', true); for (var l in secretVariables) g_form.clearValue(secretVariables[l] + ''); for (var m in extraCredentials) g_form.setVisible(extraCredentials[k] + '', true); } } } } } catch (e) { console.log('Service portal fix' + e); }}";
                    catalogScriptGR.addScript(Script);
                    var ScriptId = catalogScriptGR.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(ScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Fetch dependencies on change of profile:: ' + e.message);
                }


                //ONLOAD


                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "active": false,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var projectUUID = getParameterValue('projectUUID') + ''; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName); } 				 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 				 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onLoadCatalogClientScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue('sys_policy', 'protected');
                    grChange.update();
                }

                //IFCONDITION onchange

                if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                    //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                    if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                        try {
                            var onChangeCatalogProject = new sn_sc.CatalogClientScript();
                            onChangeCatalogProject.setAttributes({
                                "name": "On Change of Project",
                                "type": "onChange",
                                "applies_to": "item",
                                "cat_item": gr.item_name,
                                "cat_variable": "IO:" + onchangeproject,
                                "active": true,
                                "order": 700,
                                "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                                "applies_catalog": true,
                                "ui_type": '10',
                                "applies_req_item": false,
                                "applies_sc_task": false

                            });
                            onChangeCatalogProject.appliesToCatalogItem(true);
                            var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEnvironments\'); ga.addParam(\'sysparm_cat_sys_id\', cat_sys_id); ga.addParam(\'sysparm_project_id\', newValue); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var result = JSON.parse(answer); if (result.length == 0) { g_form.hideFieldMsg(\'default_environment\', true); g_form.clearOptions(\'default_environment\'); g_form.showFieldMsg(\'default_environment\', \'This Project has no valid Environments configured, you cannot proceed with the launch. Please contact your administrator\'); g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); if (portal_check == \'true\') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } } g_form.setMandatory(\'default_profile\', true); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); if (portal_check == \'false\') { var elemen = g_form.elements; for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, false); } } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { g_form.clearMessages(); g_form.clearOptions(\'default_environment\'); g_form.clearValue(\'default_environment\'); for (var i = 0; i &lt; result.length; i++) { var jsonObj = result[i]; g_form.addOption(\'default_environment\', jsonObj.UUID + \'\', jsonObj.Name + \'\'); } if (portal_check == \'true\') { var jsonobj = result[0]; g_form.setValue(\'default_environment\', jsonObj.UUID); } } } } }";
                            onChangeCatalogProject.addScript(onChangeProjectScript);
                            var OnChangeCatalogScriptId = onChangeCatalogProject.create();
                            var grChange = new GlideRecord('catalog_script_client');
                            if (grChange.get(OnChangeCatalogScriptId)) {
                                grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                                grChange.setValue('sys_policy', 'protected');
                                grChange.update();
                            }
                            this.logger.debug("Created On Change of Project (calm evirment 3.2) client script on  " + gr.item_name);

                            //onchange

                            var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
                            onChangeCatalogEnvironment.setAttributes({
                                "name": "On Change of Environment variable",
                                "type": "onChange",
                                "applies_to": "item",
                                "cat_item": gr.item_name + '',
                                "cat_variable": "IO:" + envFieldSysID,
                                "active": true,
                                "order": 700,
                                "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                                "applies_catalog": true,
                                "ui_type": '10',
                                "applies_req_item": false,
                                "applies_sc_task": false
                            });
                            onChangeCatalogEnvironment.appliesToCatalogItem(true);
                            var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'environment_loader\', true); loadingDialog.setTitle(\'Fetching Profiles...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var def_project; var gUrl = new GlideURL(); gUrl.setFromCurrent(); for (var i = 0; i &lt; g_form.getControl(\'default_project\').options.length; i++) { if (g_form.getControl(\'default_project\').options[i].value == g_form.getValue(\'default_project\')) { def_project = g_form.getControl(\'default_project\').options[i].innerText; break; } } var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_pro\', def_project + \'\'); ga.addParam(\'sysparm_profile\', gUrl.getParam(\'profileSysId\')); ga.addParam(\'sysparm_blueprint\', gUrl.getParam(\'uuid\')); ga.addParam(\'sysparm_type\', gUrl.getParam(\'type\')); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(\' On Change of Environment variable answer\' + answer); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.elements; for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, false); } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { var elemen = g_form.elements; for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, true); } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); for (var i = 0; i &lt; answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } } else { var def_project; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_sysID\', g_form.getUniqueValue()); ga.addParam(\'sysparm_type\', getParameterValue(\'type\')); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.setDisplay(\'default_profile\', true); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { g_form.setReadOnly(\'default_profile\', false); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.clearValue(\'default_profile\'); for (var i = 0; i &lt; answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } g_form.setValue(\'default_profile\', answer[0]); if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } } } }";
                            onChangeCatalogEnvironment.addScript(onChangeEnvironmentScript);
                            var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
                            var grChange = new GlideRecord('catalog_script_client');
                            if (grChange.get(OnChangeCatalogScriptId)) {
                                grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                                grChange.setValue('sys_policy', 'protected');
                                grChange.update();
                            }
                            this.logger.debug("Created On Change of Environment (calm evirment 3.2) client script on  " + gr.item_name);
                        } catch (e) {
                            gs.info('Fetch 3.2:: ' + e.message);
                        }
                    }
                }

                var var_update = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                var_update.addQuery('cat_item.name', gr.item_name.getDisplayValue() + '');
                var_update.query();
                while (var_update.next()) {
                    var column_fields = {};
                    column_fields.sys_scope = "3b7631654f452b001200e5201310c76b";
                    if (var_update.name == 'default_app_name')
                        column_fields.order = 1;
                    if (var_update.name == 'default_project')
                        column_fields.order = 2;
                    if (var_update.name == 'default_environment')
                        column_fields.order = 3;
                    if (var_update.name == 'default_profile')
                        column_fields.order = 4;
                    var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(var_update.sys_id, column_fields, 'update');

                }

            }
            var gr_bp = new GlideRecord(this.appUtil.configuration.table.Blueprint + '');
            gr_bp.query();
            while (gr_bp.next()) {
                var var_update = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                var_update.addQuery('cat_item.name', gr_bp.name.getDisplayValue() + '');
                var_update.query();
                while (var_update.next()) {
                    var column_fields = {};
                    if (var_update.name == 'default_app_name')
                        column_fields.order = 1;
                    if (var_update.name == 'default_project')
                        column_fields.order = 2;
                    if (var_update.name == 'default_environment')
                        column_fields.order = 3;
                    if (var_update.name == 'default_profile')
                        column_fields.order = 4;
                    var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(var_update.sys_id, column_fields, 'update');
                }
            }
            var gr_mpi = new GlideRecord(this.appUtil.configuration.table.marketplaceItem + '');
            gr_mpi.query();
            while (gr_mpi.next()) {
                var var_update = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                var_update.addQuery('cat_item.name', gr_mpi.name.getDisplayValue() + '');
                var_update.query();
                while (var_update.next()) {
                    var column_fields = {};
                    if (var_update.name == 'default_app_name')
                        column_fields.order = 1;
                    if (var_update.name == 'default_project')
                        column_fields.order = 2;
                    if (var_update.name == 'default_environment')
                        column_fields.order = 3;
                    if (var_update.name == 'default_profile')
                        column_fields.order = 4;
                    var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(var_update.sys_id, column_fields, 'update');
                }
            }

            gs.setProperty("x_nuta2_nutanix_ca.1_5_1", "1");

        } catch (e) {
            this.logger.error("Exeption caught inside Migration_script.updateTheCatalogClientScriptForOneDotFiveDotOne() Error : - " + e);
        }
    },


    addEnvironmentVariableToAllCatalogs: function() {
        try {
            if ((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0')) {

                var mpi_cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
                mpi_cat_item.query();
                while (mpi_cat_item.next()) {
                    var grItem = new GlideRecord("item_option_new");
                    grItem.addQuery('name', 'default_environment');
                    grItem.addQuery('cat_item', mpi_cat_item.sys_id + "");
                    grItem.query();
                    if (!grItem.hasNext()) {
                        var column_fields = {};
                        column_fields.type = '5';
                        column_fields.cat_item = mpi_cat_item.sys_id + "";
                        column_fields.active = true;
                        column_fields.question_text = 'Environment';
                        column_fields.name = 'default_environment';
                        column_fields.order = 2;
                        var env_SysID = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                    }
                }

                var bp_cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
                bp_cat_item.query();
                while (bp_cat_item.next()) {
                    var grItem = new GlideRecord("item_option_new");
                    grItem.addQuery('name', 'default_environment');
                    grItem.addQuery('cat_item', bp_cat_item.sys_id + "");
                    grItem.query();
                    if (!grItem.hasNext()) {
                        var column_fields = {};
                        column_fields.type = '5';
                        column_fields.cat_item = bp_cat_item.sys_id + "";
                        column_fields.active = true;
                        column_fields.question_text = 'Environment';
                        column_fields.name = 'default_environment';
                        column_fields.order = 2;
                        var env_SysID = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                    }
                }


                var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
                cat_items.query();
                while (cat_items.next()) {
                    var grItem = new GlideRecord("item_option_new");
                    var column_fields = {};
                    column_fields.type = '5';
                    column_fields.cat_item = cat_items.item_name + "";
                    column_fields.active = true;
                    column_fields.question_text = 'Environment';
                    column_fields.name = 'default_environment';
                    column_fields.order = 2;
                    var env_SysID = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');


                    //Creating new scripts:
                    var projectSysID = "";
                    var profileSysID = "";
                    var app_name_SysID = "";
                    var env_variable_SysID = "";
                    var grItemProf = new GlideRecord("item_option_new");
                    grItemProf.addQuery("cat_item", cat_items.item_name);
                    var qc = grItemProf.addQuery("name", "default_project");
                    qc.addOrCondition('name', 'default_profile');
                    qc.addOrCondition('name', 'default_app_name');
                    qc.addOrCondition('name', 'default_environment');
                    grItemProf.query();

                    while (grItemProf.next()) {
                        if (grItemProf.name + '' == "default_project")
                            projectSysID = grItemProf.sys_id + "";
                        if (grItemProf.name + '' == "default_profile")
                            profileSysID = grItemProf.sys_id + "";
                        if (grItemProf.name + '' == "default_app_name")
                            app_name_SysID = grItemProf.sys_id + "";
                        if (grItemProf.name + '' == "default_environment")
                            env_variable_SysID = grItemProf.sys_id + "";
                    }
                    //             gs.info("**************** projectSysID " + projectSysID + " profileSysID " + profileSysID);


                    var onChangeCatalogProject = new sn_sc.CatalogClientScript();
                    onChangeCatalogProject.setAttributes({
                        "name": "On Change of Project",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "cat_variable": "IO:" + projectSysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangeCatalogProject.appliesToCatalogItem(true);
                    var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == ''){return;}var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchEnvironments');ga.addParam('sysparm_cat_sys_id', cat_sys_id);ga.getXML(parseResponse);function parseResponse(response){var answer = response.responseXML.documentElement.getAttribute('answer');var result = JSON.parse(answer);if (result.length == 0) {g_form.hideFieldMsg('default_environment', true);g_form.clearOptions('default_environment');g_form.showFieldMsg('default_environment', 'This Project has no valid Environments configured, you cannot proceed with the launch.  Please contact your administrator'); g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');g_form.setMandatory('default_profile', true);g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, false);} g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{g_form.clearMessages();g_form.clearOptions('default_environment');for (var i = 0; i &lt; result.length; i++){var jsonObj = result[i];g_form.addOption('default_environment', jsonObj.UUID + '', jsonObj.Name + '');}}}}";
                    onChangeCatalogProject.addScript(onChangeProjectScript);
                    var OnChangeCatalogScriptId = onChangeCatalogProject.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                    //             gs.info("catalog client script  71 " + OnChangeCatalogScriptId);



                    var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
                    onChangeCatalogEnvironment.setAttributes({
                        "name": "On Change of Environment variable",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "cat_variable": "IO:" + env_variable_SysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangeCatalogEnvironment.appliesToCatalogItem(true);
                    var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('environment_loader', true);loadingDialog.setTitle('Fetching Profiles...');loadingDialog.renderWithContent('' + loadingHTML);var gUrl = new GlideURL();gUrl.setFromCurrent();var def_project;for (var i = 0; i &lt; g_form.getControl('default_project').options.length; i++){if (g_form.getControl('default_project').options[i].value == g_form.getValue('default_project')) {def_project = g_form.getControl('default_project').options[i].innerText;break;}}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProfilesBasisOnEnvironment');ga.addParam('sysparm_env', g_form.getValue('default_environment'));ga.addParam('sysparm_proValue', g_form.getValue('default_project'));ga.addParam('sysparm_pro', def_project + '');ga.addParam('sysparm_profile', gUrl.getParam('profileSysId'));ga.addParam('sysparm_blueprint', gUrl.getParam('uuid'));ga.addParam('sysparm_type', gUrl.getParam('type'));ga.getXML(parseData);function parseData(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(' On Change of Environment variable answer' + answer);answer = JSON.parse(answer);if (answer.length == 0) {g_form.hideFieldMsg('default_profile', true); g_form.clearOptions('default_profile');g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, false);}g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, true);}g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');for (var i = 0; i &lt; answer.length; i++) {g_form.addOption('default_profile', answer[i], answer[i]);}if (answer.length == 1) {g_form.setReadOnly('default_profile', true);}}new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);}function varResponse(response){var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};var var_array = [];for (var i in prof_json){var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field);parsed_field.value = curr_value; parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json){var_array = [];for (var k in serv_json[j]){var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json){var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undefined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS'){if (type == 'LOCAL') g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET'){g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++){g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
                    onChangeCatalogEnvironment.addScript(onChangeEnvironmentScript);
                    var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                    //             gs.info("catalog client script  100 " + OnChangeCatalogScriptId);

                    var catalogScriptGR = new GlideRecord('catalog_script_client');
                    catalogScriptGR.addQuery('cat_item', cat_items.item_name + '');
                    catalogScriptGR.query();
                    while (catalogScriptGR.next()) {
                        //  gs.info(catalogScriptGR.name + "catalog client script updatated");
                        if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
                            //                     gs.info("final If " + catalogScriptGR.name + "catalog client script updatated");
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
                            this.logger.info(" final If " + catalogScriptGR.name + "catalog client script updatated");
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Check AppName OnChange") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Check AppName OnSubmit") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Hide Order details on request") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                    }


                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Project and Profile List onLoad",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "active": "true",
                        "order": "100",
                        "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() {var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProjectAndProfileList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var parsed = JSON.parse(answer);var projectList = parsed.projectList;g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) {var project = projectList[i];g_form.addOption('default_project', project.uuid, project.name)} if (projectList.length == 1) { g_form.setReadOnly('default_project', true)}new GlideModal().get('loader').destroy();}}";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(onLoadCatalogClientScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                    //             gs.info("catalog client script  140 " + onLoadCatalogClientScriptId);
                    if (current.variables.type_of_blueprint == 'runbook' || current.variables.type_of_blueprint == 'published_runbook') {
                        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                        onLoadCatalogClientScript.setAttributes({
                            "name": "Get Project and Endpoint List onLoad",
                            "type": "onLoad",
                            "applies_to": "item",
                            "cat_item": '' + catItemSysId,
                            "active": "true",
                            "order": "100",
                            "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                            "applies_catalog": "true",
                            "ui_type": "0",
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });

                        onLoadCatalogClientScript.appliesToCatalogItem(true);
                        var onLoadScript = "function onLoad() { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchMultipleProjectAndEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions(\'default_project\'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption(\'default_project\', project.uuid, project.name); } if (projectList.length == 1) { g_form.setReadOnly(\'default_project\', true); } var endpointList = parsed.endpointList; } var ga1 = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga1.addParam(\'sysparm_name\', \'advanceVariableDynamicOptions\'); ga1.addParam(\'sysparm_catSysID\', cat_sys_id); ga1.getXML(parseResponseAdvanceVariable); function parseResponseAdvanceVariable(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage[\'FieldRegex_\' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + \'\']; if (row.options.state == \'SUCCESS\') { g_form.clearOptions(keys[i] + \'\'); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + \'\', row.options.values[k], row.options.values[k]); } } else { g_form.addErrorMessage(\'Error in variable: \' + keys[i] + \': \' + row.options.values[0]); } } } var ga2 = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga2.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga2.addParam(\'sysparm_profile\', \'runbook\'); ga2.addParam(\'sysparm_catSysID\', cat_sys_id); ga2.getXML(parseResponseOrderFormData); function parseResponseOrderFormData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } }";
                        onLoadCatalogClientScript.addScript(onLoadScript);
                        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                        var gr = new GlideRecord('catalog_script_client');
                        if (gr.get(onLoadCatalogClientScriptId)) {
                            gr.setValue("sys_scope", "global");
                            gr.update();
                        }
                    }
                    var catalogScriptGR = new sn_sc.CatalogClientScript();
                    catalogScriptGR.setAttributes({
                        "name": "Fetch form data on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 100,
                        "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    catalogScriptGR.appliesToCatalogItem(true);
                    var script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading ) { return; } if(newValue == '') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay('provider_icons', false); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true);g_form.setMandatory('default_profile', true); g_form.setDisplay('default_environment', true); g_form.setReadOnly('default_environment', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + ''; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (nameTypeMap[i + ''] + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); } else { g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get('loader').destroy(); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } }}";
                    catalogScriptGR.addScript(script);
                    var ScriptId = catalogScriptGR.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(ScriptId)) {
                        gr.setValue("sys_scope", "global");

                        gr.update();
                    }

                    //   gs.info("catalog client script  170 " + ScriptId);

                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Check AppName OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "cat_variable": "IO:" + app_name_SysID,
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var name = newValue; if ((newValue.length != ((newValue.trim()).length))  || (!(/^[\_\-\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) {g_form.clearValue('default_app_name'); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.');}}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }


                    var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                    onSubmitcatalogScriptGR.setAttributes({
                        "name": "Check AppName OnSubmit",
                        "type": "onSubmit",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                    var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                    onSubmitcatalogScriptGR.addScript(onSubmitscript);
                    var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(onSubmitcatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }

                    var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScriptGR.setAttributes({
                        "name": "Hide Order details on request",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "active": true,
                        "order": 10,
                        "description": "Hide values on request details.",
                        "applies_catalog": "false",
                        "ui_type": "0",
                        "applies_req_item": "true",
                        "applies_sc_task": "false"
                    });
                    onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                    onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                    var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                    onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
                    if (gr.get(onLoadCatalogClientScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                }
                this.fetchValuesOnChangeClientScript();

            }
            if ((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &lt; parseFloat("3.2")) &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0')) {

                var cat_items1 = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
                cat_items1.query();
                while (cat_items1.next()) {


                    var grItemProf1 = new GlideRecord("item_option_new");
                    grItemProf1.addQuery("cat_item", cat_items1.item_name);
                    var qc = grItemProf1.addQuery("name", "default_profile");
                    qc.addOrCondition('name', 'default_app_name');
                    grItemProf1.query();
                    var profileSysID, appSysID;
                    while (grItemProf1.next()) {
                        if (grItemProf1.name + '' == "default_profile")
                            profileSysID = grItemProf1.sys_id + "";
                        if (grItemProf1.name + '' == "default_app_name")
                            appSysID = grItemProf1.sys_id + "";
                    }


                    var catalogScriptGR = new GlideRecord('catalog_script_client');
                    catalogScriptGR.addQuery('cat_item', cat_items1.item_name + '');
                    catalogScriptGR.query();
                    while (catalogScriptGR.next()) {
                        if (catalogScriptGR.name + '' == "Fetch dependencies on change of profile") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Check AppName OnChange") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Check AppName OnSubmit") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Hide Order details on request") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                    }


                    var catalogScriptGR = new sn_sc.CatalogClientScript();
                    catalogScriptGR.setAttributes({
                        "name": "Fetch form data on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 100,
                        "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    catalogScriptGR.appliesToCatalogItem(true);
                    var script = "function onChange(control, oldValue, newValue, isLoading) {if (newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialogbox = new GlideModal('loader', true);loadingDialogbox.setTitle('Fetching Order Form Data...'); loadingDialogbox.renderWithContent(''+loadingHTML);var fldType = {};var elemen = g_form.elements;for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;} g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialogbox);function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer');   var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; }  var nameTypeMap = {}; var flds = g_form.nameMap; for(var i in flds){ nameTypeMap[flds[i].prettyName+''] = fldType[flds[i].realName+'']+''; } 		  var fielVal = {};  var parsed = JSON.parse(answer);for (var i in parsed) {if(i.indexOf('cluster_name') == -1){ if(nameTypeMap[i+'']+'' == 'masked'){ fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else{ g_form.setValue(i + '', parsed[i].value + ''); }			 g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly);	 }else{ g_form.setDisplay(i + '', !parsed[i].readOnly);	 g_form.setReadOnly(i + '', true);	 			}		}   sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);		  new GlideModal().get('loader').destroy();var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Credentials List...'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer);for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_');g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) {g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false');}g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) {g_form.setDisplay(name + '_credential_reference', 'true');g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + '');g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly);g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly);g_form.setDisplay(name + '_ssh_private_key', 'false');g_form.setDisplay(name + '_passphrase', 'false');g_form.setDisplay(name + '_password', 'false');g_form.setDisplay(name + '_secret_type', 'false');}} sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy();}}}";
                    catalogScriptGR.addScript(script);
                    var ScriptId = catalogScriptGR.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(ScriptId)) {
                        gr.setValue("sys_scope", "global");

                        gr.update();
                    }


                    var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript3.setAttributes({
                        "name": "Fetch dependencies on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangecatalogClientScript3.appliesToCatalogItem(true);
                    var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } new GlideModal().get('variables_loader').destroy(); }}";
                    onChangecatalogClientScript3.addScript(onChangeScriptVars);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }


                    var project_load = new sn_sc.CatalogClientScript();
                    project_load.setAttributes({
                        "name": "Get Project and Profile List onLoad",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "active": "true",
                        "order": "100",
                        "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    project_load.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null , loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]);if (projectList.length == 1) { g_form.setReadOnly('default_project', true);} if (profileList.length == 1) { g_form.setReadOnly('default_profile', true);} new GlideModal().get('loader').destroy();var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse, null, loadingDialog);}function varResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:'+i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:'+k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null')return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if(type == 'LOCAL')g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
                    project_load.addScript(onLoadScript);
                    var project_load_ScriptId = project_load.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(project_load_ScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }


                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Check AppName OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "cat_variable": "IO:" + appSysID,
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var name = newValue; if ((newValue.length != ((newValue.trim()).length))  || (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) {g_form.clearValue('default_app_name'); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.');}}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }


                    var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                    onSubmitcatalogScriptGR.setAttributes({
                        "name": "Check AppName OnSubmit",
                        "type": "onSubmit",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                    var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                    onSubmitcatalogScriptGR.addScript(onSubmitscript);
                    var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(onSubmitcatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                    var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScriptGR.setAttributes({
                        "name": "Hide Order details on request",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "active": true,
                        "order": 10,
                        "description": "Hide values on request details.",
                        "applies_catalog": "false",
                        "ui_type": "0",
                        "applies_req_item": "true",
                        "applies_sc_task": "false"
                    });
                    onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                    onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                    var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                    onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
                    if (gr.get(onLoadCatalogClientScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }

                }
                this.fetchValuesOnChangeClientScript();
            }
            gs.setProperty('x_nuta2_nutanix_ca.1_4_4', '1');
        } catch (e) {
            this.logger.error("Exception caught inside migraation_script.addEnvironmentVariableToAllCatalogs : " + e);
        }
    },

    isCatalogItemsAvailable: function() {
        var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items.query();
        if (cat_items.hasNext() &amp;&amp; (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0')) {
            this.logger.info("Migration to V 1_4_4 require");
            return true;
        }
        this.logger.info("Migration to V 1_4_4 not require");
        return false;
    },
    fetchValuesOnChangeClientScript: function() {

        var cat_items1 = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items1.query();
        while (cat_items1.next()) {

            var catalogScriptGR = new GlideRecord('catalog_script_client');
            catalogScriptGR.addQuery('cat_item', cat_items1.item_name + '');
            catalogScriptGR.query();
            while (catalogScriptGR.next()) {
                if (catalogScriptGR.name + '' == "Fetch values OnChange") {

                    var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');

                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Fetch values OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "cat_variable": "IO:" + field,
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if(!sessionStorage['varValues'])return; var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + '']; if (isLoading || newValue == '' || oldValue + '' == newValue + '') {new GlideModal().get('loader').destroy(); return; }jslog(oldValue);jslog(newValue); function varResponse(response,loadingDialog){var answer=response.responseXML.documentElement.getAttribute('answer');var varJSON=JSON.parse(answer);var prof_json=varJSON.profile;var serv_json=varJSON.service;var var_array=[];for(var i in prof_json){var field=prof_json[i];var curr_value=g_form.getValue('IO:'+i);varValues['IO:' + i] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=i+'',var_array.push(parsed_field);}getAdvancedVars(var_array);for(var j in serv_json){var_array=[];for(var k in serv_json[j]){var field=serv_json[j][k];var curr_value=g_form.getValue('IO:'+k);varValues['IO:' + k] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=k+'',var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json){var act_var_JSON=JSON.stringify(variable_json);var gajax=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name','variableArrayParser'),gajax.addParam('sysparm_type','catalog'),gajax.addParam('sysparm_parentUuid',g_form.getUniqueValue()+''),gajax.addParam('sysparm_varJson',act_var_JSON),gajax.getXML(getVarResponse);}function getVarResponse(response){ new GlideModal().get('loader').destroy(); var answer=response.responseXML.documentElement.getAttribute('answer');if(answer+''==''||answer+''=='undefined'||answer+''=='null')return;var parsedResponse=JSON.parse(answer);for(var i in parsedResponse){var row=parsedResponse[i];var sys_id='IO:'+row.sys_id;var type=row.type+'';if(row.state=='SUCCESS'&amp;&amp; (type=='EXEC_LOCAL'||type=='HTTP_LOCAL'||type=='EXEC_SECRET'||type=='HTTP_SECRET')){g_form.clearOptions(sys_id);for(var k=0;k&lt;row.value.length;k++)g_form.addOption(sys_id+'',row.value[k],row.value[k]); g_form.setValue(sys_id,row.value);} else {if(row.data_type + '' != 'BASE'){g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);} g_form.setValue(sys_id, row.value);}row.state=='ERROR'&amp;&amp;g_form.addErrorMessage('Error in variable: '+row.name+': '+row.error[0]);}}var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id=g_form.getUniqueValue();var profile=g_form.getValue('default_profile').trim();var ga=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name','fetchLaunchVars'),ga.addParam('sysparm_catsysid',cat_sys_id),ga.addParam('sysparm_profile',profile),ga.getXML(varResponse,null,loadingDialog);}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }

                    var catalogClientScript = new sn_sc.CatalogClientScript();
                    catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                }

            }
        }

    },
    isMigrationNeeded: function() {
        var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items.addEncodedQuery('multiple_application_profileISEMPTY^multiple_projectsISEMPTY^state=active^ORstate=draft');
        cat_items.query();
        if (cat_items.hasNext()) {
            this.logger.info("Migration to V 1_4 require");
            return true;
        }
        this.logger.info("Migration to V 1_4 not require");
        return false;
    },

    updateCatalog: function() {
        this.logger.info("Migration to V1_4 Started");

        gs.setProperty('x_nuta2_nutanix_ca.migration.script.ran', 'true');

        this.catalogItem_1_4();
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.query();
        while (gr.next()) {
            try {
                this.clientScript_1_4(gr.item_name);
                this.logger.info(gr.item_name.name + " Catalog client script succesfully migrated.");
            } catch (e) {
                this.logger.error(gr.item_name.name + " Catalog Item was not migrated due to issue in catalog client script.");
            }
        }
    },


    clientScript_1_4: function(catSysId) {
        var catalogScriptGR = new GlideRecord(this.appUtil.configuration.table.catalogClientScript + '');
        catalogScriptGR.addQuery('cat_item', catSysId);
        catalogScriptGR.query();
        var i = 0;
        //         this.logger.info("ctalog client Script " + i + "to be updatated");
        while (catalogScriptGR.next()) {
            this.logger.info(catalogScriptGR.name + "catalog client script updatated");
            if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);

            }
            if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Hide Order details on request") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Get Subnet Info") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Get Subnet Info on project change") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Check Catalog Item Validity") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            i++;

        }
        this.logger.info("ctalog client Script " + i + "to be updatated");

        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();
        var catalogScriptGR = new sn_sc.CatalogClientScript();
        catalogScriptGR.setAttributes({
            "name": "Fetch form data on change of profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": "" + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 100,
            "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        catalogScriptGR.appliesToCatalogItem(true);
        var Script = "function onChange(control, oldValue, newValue, isLoading) {if (newValue == '') {return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialogbox = new GlideModal('loader', true);loadingDialogbox.setTitle('Fetching Order Form Data...'); loadingDialogbox.renderWithContent(''+loadingHTML);var fldType = {};var elemen = g_form.elements;for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;} g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialogbox);function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer');   var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; }  var nameTypeMap = {}; var flds = g_form.nameMap; for(var i in flds){ nameTypeMap[flds[i].prettyName+''] = fldType[flds[i].realName+'']+''; } 		  var fielVal = {};  var parsed = JSON.parse(answer);for (var i in parsed) {if(i.indexOf('cluster_name') == -1){ if(nameTypeMap[i+'']+'' == 'masked'){ fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else{ g_form.setValue(i + '', parsed[i].value + ''); }			 g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly);	 }else{ g_form.setDisplay(i + '', !parsed[i].readOnly);	 g_form.setReadOnly(i + '', true);	 			}		}   sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);		  new GlideModal().get('loader').destroy();}} var cat_sys_id = g_form.getUniqueValue();	var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; if (projectList.length == 1) { g_form.setReadOnly('default_project', true);}}";
        catalogScriptGR.addScript(Script);
        var ScriptId = catalogScriptGR.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Fetch form data on change of profile\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(ScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Get Project and Profile List onLoad",
            "type": "onLoad",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "active": "true",
            "order": "100",
            "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
            "applies_catalog": "true",
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null , loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]);if (projectList.length == 1) { g_form.setReadOnly('default_project', true);} if (profileList.length == 1) { g_form.setReadOnly('default_profile', true);} new GlideModal().get('loader').destroy();var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse, null, loadingDialog);}function varResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:'+i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:'+k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null')return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if(type == 'LOCAL')g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k &lt; (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Get Project and Profile List onLoad\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScriptGR.setAttributes({
            "name": "Hide Order details on request",
            "type": "onLoad",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "active": true,
            "order": 10,
            "description": "Hide values on request details.",
            "applies_catalog": "false",
            "ui_type": "0",
            "applies_req_item": "true",
            "applies_sc_task": "false",
            "sys_scope": "global"
        });
        onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
        onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
        var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
        onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Hide values on request details.\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        /*Insert new Scripts Get Subnet Info on project change*/
        var oldGR = new GlideRecord('item_option_new');
        oldGR.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_project');
        oldGR.query();
        oldGR.next();
        var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript1.setAttributes({
            "name": "Get Subnet Info on project change",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + oldGR.sys_id,
            "active": true,
            "order": 600,
            "description": "This script is auto created thorugh runtime module for checking application name on submit.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onChangecatalogClientScript1.appliesToCatalogItem(true);
        var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == '') { return; }var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.addParam('sysparm_ProjectUuid', newValue);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
        onChangecatalogClientScript1.addScript(onChangeScript);
        var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Get Subnet Info on project change\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var projectSysID = new GlideRecord('item_option_new');
        projectSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_project');
        projectSysID.query();
        projectSysID.next();
        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Check Catalog Item Validity project",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + projectSysID,
            "active": true,
            "order": 1,
            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var profileName = (g_form.getValue('default_profile')+'').trim();if(profileName == '') return;var projectUUID = (newValue+'').trim();if(projectUUID == '')return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }  if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);/* self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; */			}	 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Check Catalog Item Validity project\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();
        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Check Catalog Item Validity profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 1,
            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;} var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (newValue+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);/*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			 }}  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Check Catalog Item Validity profile\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


    },

    catalogItem_1_4: function() {
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.addEncodedQuery('multiple_application_profileISEMPTY^multiple_projectsISEMPTY^state=active^ORstate=draft');
        gr.query();
        while (gr.next()) {
            try {
                gr.multiple_projects = gr.project;
                gr.multiple_application_profile = gr.application_profile;
                gr.update();
                this.logger.info("V1.4 migration, " + gr.item_name.name + " Catalog Item was migrated.");
            } catch (e) {
                this.logger.error("V1.4 migration, " + gr.item_name.name + " Catalog Item was not migrated due to issue in some field type and the value it contained.");
            }
        }
    },

    copyFieldJson: function() {

        this.logger.info("V1.4 migration: Migrating old variables");
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.addQuery("state", "active");
        gr.query();
        while (gr.next()) {
            this._createOnChangeSessionScript(gr.item_name.sys_id);
            var grVars = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            grVars.addEncodedQuery('catalog_item=' + gr.item_name.sys_id + '^isprofilevariable=true^ORisservicevariable=true');
            grVars.query();
            while (grVars.next()) {
                var grVarsBp = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                grVarsBp.addQuery('catalog_item', gr.blueprint + "");
                grVarsBp.addQuery('uuid', grVars.uuid + "");
                grVarsBp.query();
                if (grVarsBp.next()) {
                    this._createOnChangeScript(grVars.variable.sys_id + "", gr.item_name.sys_id + "");
                    grVars.field_json = grVarsBp.field_json + '';
                    grVars.update();
                }
            }
        }

    },

    _createOnChangeSessionScript: function(catSysId) {

        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();

        var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript3.setAttributes({
            "name": "Fetch dependencies on change of profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 700,
            "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,

        });
        onChangecatalogClientScript3.appliesToCatalogItem(true);
        var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } new GlideModal().get('variables_loader').destroy(); }}";
        onChangecatalogClientScript3.addScript(onChangeScriptVars);
        var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript2.setAttributes({
            "name": "Set Session Vars",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 700,
            "description": "This script is auto created thorugh runtime module for setting session json.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onChangecatalogClientScript2.appliesToCatalogItem(true);
        var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(answer);var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;}for (var j in serv_json) {for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;}}sessionStorage['varValues'] = JSON.stringify(sess_json);}}";
        onChangecatalogClientScript2.addScript(onChangeScriptSess);
        var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        this.logger.debug("Created onChange script to set Session variables ");
    },

    _createOnChangeScript: function(varSysId, catSysId) {
        try {
            this.logger.info("V1.4 migration: Creating onChange Scripts");
            var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
            onChangecatalogClientScript.setAttributes({
                "name": "Fetch values OnChange",
                "type": "onChange",
                "applies_to": "item",
                "cat_item": '' + catSysId,
                "cat_variable": "IO:" + varSysId,
                "active": true,
                "order": 100,
                "description": "This script is auto created thorugh runtime module for fetching values.",
                "applies_catalog": "true",
                "ui_type": "0",
                "applies_req_item": false,
                "applies_sc_task": false,
                "sys_scope": "global"
            });
            onChangecatalogClientScript.appliesToCatalogItem(true);
            var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if(!sessionStorage['varValues'])return; var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + '']; if (isLoading || newValue == '' || oldValue + '' == newValue + '') {new GlideModal().get('loader').destroy(); return; }jslog(oldValue);jslog(newValue); function varResponse(response,loadingDialog){var answer=response.responseXML.documentElement.getAttribute('answer');var varJSON=JSON.parse(answer);var prof_json=varJSON.profile;var serv_json=varJSON.service;var var_array=[];for(var i in prof_json){var field=prof_json[i];var curr_value=g_form.getValue('IO:'+i);varValues['IO:' + i] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=i+'',var_array.push(parsed_field);}getAdvancedVars(var_array);for(var j in serv_json){var_array=[];for(var k in serv_json[j]){var field=serv_json[j][k];var curr_value=g_form.getValue('IO:'+k);varValues['IO:' + k] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=k+'',var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json){var act_var_JSON=JSON.stringify(variable_json);var gajax=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name','variableArrayParser'),gajax.addParam('sysparm_type','catalog'),gajax.addParam('sysparm_parentUuid',g_form.getUniqueValue()+''),gajax.addParam('sysparm_varJson',act_var_JSON),gajax.getXML(getVarResponse);}function getVarResponse(response){ new GlideModal().get('loader').destroy(); var answer=response.responseXML.documentElement.getAttribute('answer');if(answer+''==''||answer+''=='undefined'||answer+''=='null')return;var parsedResponse=JSON.parse(answer);for(var i in parsedResponse){var row=parsedResponse[i];var sys_id='IO:'+row.sys_id;var type=row.type+'';if(row.state=='SUCCESS'&amp;&amp; (type=='EXEC_LOCAL'||type=='HTTP_LOCAL'||type=='EXEC_SECRET'||type=='HTTP_SECRET')){g_form.clearOptions(sys_id);for(var k=0;k&lt;row.value.length;k++)g_form.addOption(sys_id+'',row.value[k],row.value[k]); g_form.setValue(sys_id,row.value);} else {if(row.data_type + '' != 'BASE'){g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);} g_form.setValue(sys_id, row.value);}row.state=='ERROR'&amp;&amp;g_form.addErrorMessage('Error in variable: '+row.name+': '+row.error[0]);}}var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id=g_form.getUniqueValue();var profile=g_form.getValue('default_profile').trim();var ga=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name','fetchLaunchVars'),ga.addParam('sysparm_catsysid',cat_sys_id),ga.addParam('sysparm_profile',profile),ga.getXML(varResponse,null,loadingDialog);}";
            onChangecatalogClientScript.addScript(onChangeScript);
            var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
            this.logger.info("V1.4 migration, " + catSysId + " Fetch values OnChange catalog client script created.");
            var gr = new GlideRecord('catalog_script_client');
            if (gr.get(OnChangeCatalogScriptId)) {
                gr.setValue("sys_scope", "global");
                gr.update();
            }
        } catch (e) {
            this.logger.error("Exception caught inside Migration_Script._createOnChangeScript. Error:- " + e);
        }
    },

    type: 'Migration_Script'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-09-11 10:09:24&lt;/sys_created_on&gt;&lt;sys_id&gt;caeab4864f337300d8494ebf9310c73e&lt;/sys_id&gt;&lt;sys_mod_count&gt;309&lt;/sys_mod_count&gt;&lt;sys_name&gt;Migration_Script&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_caeab4864f337300d8494ebf9310c73e&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-05-22 10:16:26&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>1614603056</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>92ab0533c3d4569064971612b4013151</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c317a0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Migration_Script</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>076bb0c6a856c6d06c7eb4be7fcd1d56</update_guid>
<update_guid_history>076bb0c6a856c6d06c7eb4be7fcd1d56:1614603056,40fa7c860056c6d01bad84cdb262879b:-564171920,e06657e99d1e0a509f18eecbd31d973f:-207168175,9bb2f2e5a15a0a50fab00c3cd1e8ce4a:-1379761714,1b94f6556f16c65076205f9db22998b9:1548145727,e4a8a6d920d2c650288dd0b9ea4e18a4:-446132525,15545691ddde8650ac25f752314ad569:1176476312,e5c05695ee5e8650eb4ab6fd96897a81:759329389,57f251bb508e8e10a15686c26c4c1899:128736411,f26f4dbf144e8e101963f8b82996927e:1514346619,8dd334bb2bca8e102469afde2c4cad0d:2112592128,60c8905b89e4b9103153360cb58a8133:1431836173,52c2bdd59868b11088a63b282b30bca4:-1413985433,a86de111d6e4b110f15dc25b2583f3a2:2145474824,d583559b525b6d1049e6e5e5c404c7c7:-482900422,3a3d06eaa500311070c67e1cf3ed9f0e:1383056378,d583559b525b6d1049e6e5e5c404c7c7:-482900422,b45e3c4cd9803110b6e2abb44a7f9ee7:1383056378,d583559b525b6d1049e6e5e5c404c7c7:-482900422,c63c984c91003110240fe28b3aee3c5b:1383056378,d583559b525b6d1049e6e5e5c404c7c7:-482900422,c09b8f13ab432110f1f5bb18b4de2e9b:2082876859,e37b4b9327432110a30adc04958b12b1:-1062078776,31ebb128339f011098636e427ee367e5:1383056378,8500c18206eda110e16d08d2dc97b643:1342226798,31ebb128339f011098636e427ee367e5:1383056378,d389b221336d6110ac897d79a9a638a2:1342226798,31ebb128339f011098636e427ee367e5:1383056378,2b8299c004e9e910718be696119f930f:1342226798,31ebb128339f011098636e427ee367e5:1383056378,faaaf9a4e29f011010e3dac15bad6883:1792229296,f2797564b79f01107cadae841114518a:-973581093,e6d83164c49f0110bc74b4b4e3a08177:-1211185433,15c235ecb15f011038c26277c8d108ff:-673671286,0e3235ecec5f0110fb79f51400d03ff8:128478077,cfb8ff01f85601104d28cebd34d354d7:184677407,01f9e7c544d20110509623bf1ed97d17:1169972864,e8f551f05f394110250598fe7fde33cb:591797655,d215647402b14110b1d53ae0a082d497:-252763082,8793ec34f7b14110fad9088cddd065d7:1433672544,1c72207049b141103440280d336086bd:-44503254,238cf2276b91411025e3869cd9937826:95484057,412cfaab32514110cb72ae8525c42689:1841098424,771ab6ab42114110dc9246d5b34a2597:59443967,b3f4b6abfe5d01101cb44e391fa4a36f:-1184881217,613bc26319d501103e31d591f5c31559:1321848271,8b9282ab67950110518d1f96e0bf30e3:939595219,f417c9b41b59c1108ec36b583a4bd440:564595917,3ef7b7a0e7d1c11016d80e146be8e50a:-1241902738,81d4bb20d0d1c110812659074e6798a2:669796140,cd4c86f2c3cd0510f3912f01bef1884e:1633161428,b31d7572398d0510e7966951fa3504b0:-347430544,9ce10ea132810110960725e0b2c2f60a:-291785148,5ae00e6117810110578cda506fa2f782:2091108195,c77f1c9dd389c110b6f0ba7c38163e55:-2068068860,78dc0781f305c110d8a54244eb1a96be:-612866427,625ba370b60d011098ef37874fe24dd5:-1591033656,d179e7fc22c901102fa2852b258e8fd1:1604072556,e68f8378de490110b4d3a416ce057ddb:-1665072904,d45b0b384d4901107c10862a73118209:457926410,a4b5fe747e850110d654649aa4534ee6:1824973482,fa643274c385011015829d259b739e3e:126666290,ba172e7072450110c440a8cba47476cb:667192824,31472c3409f48110c63d32ee39aaf6cc:2045374892,9e1620f041f48110f37e11d4c60b5949:-2106535984,aa92d97f94ec4110f6a0b9cac5a9b0a4:479686869,d89505f31cec4110c32d8fed5161402a:-896478392,08b2c9732fec4110ba8e4fee0136520f:-1448571546,1bddb8fb7aac41108c6330482968bb8e:-359806840,a7fcb0bbb9ac4110191747ba86ffbaaa:537455560,f8eb787b27ac411035753ea5f5d24da1:1816658130,62d0b43366ac411065c9195c3481cb21:-715539098,fa60747344ac41108bd603306f701cc9:352278386,c3af28331aac4110599fcd1c51835974:1274494580,69ec6c3fc16c4110acb887c15937f8bf:-1132332820,5b9c60bf516c4110765c69762e25a8dc:-671730102,fdda283fb76c41106c0cd7581a782e2f:61190742,6e4a2cfbeb6c41108fb72179b67291f2:-1382399737,bb196cbb106c4110718073d0ec6861c7:-342496379,cc2e5c33922c4110128f99f34885dd49:-1842884508,8325d0f76ee84110de294a577e1668cf:-2026760935,b952543bcfe8411006f81ec913d2ba85:594460782,492de4a292a44110558989d6e513a3a9:54513762,8cecec62bea44110bd06a3a0d2bdc721:1185642688,e89ca86228a44110f3841c16fae9cc5e:-950536145,dd7fafc6dce001103aa7081871caaa13:114394639,c97b270a28e00110a32f3b01f192344e:-730268370,b7a0c7061fa00110cfa49b2de428e04a:367821837,09ffb6068ea00110f91f62e2b259c03c:1287630094,0d477e4e0c600110b68e38bc84a3607e:68299164,2b70b2c2416001100dffd354ed8a40ae:2009907766,7596ee8ac92001106eee2f4a8e4d6444:225627486,4505455889600110fdbcb7da474e448b:427526560,7a320d901f6001108e7d126421ef3817:-206183079,d963305cb720011089b46c784c7e0f99:-366824339,c232f01ce4200110e939525e3b80f968:1520862189,c588dd121c58c110d9bdf62fceca8a5d:1245898279,8c70dd968118c110bce103eef40ea3d6:1330174120,d165d58a961c8110c86d24fe3190d490:1530890451,5380594a46d8811077feefd1570f4a84:-1480813932,a9dab4466c588110dba786515d96b3fb:1958789908,62f9f0064a5881104ac7444dfbb9c207:-1867978835,d6f83446dd58811067dcb15eb792f387:295536045,e75ee371ce5481107fd9127831f4fb19:1890362036,0a8ca371a0548110e26264b1011c79c0:-514270583,c5ad0361e3544110f1ec7ed16d58a198:1461123380,4c5d8b2198544110635f92d6968864dc:949634035,586b47a9201441104978e9f03cd162a1:-965354766,d2e44729c0144110a2a423727c40a590:354714322,7bdcb66d46d0411031b5f34c3f533f52:655812691,1beb81411218011040b063497b68b5b9:668646699,08db0141d81801105a91dedc101916b9:-2141639350,208bc9017a180110fe77e57ced6d34ad:1910222441,485760017a94011037fed14b0f301f3f:904399047,32e0e4c57f5401109169e3306a07861a:781571110,5ff12df09f2b70102ea2585a284c6e16:240202252,c46d1c205e2b30109625ea77198e2542:418486220,e9fb068407e77010178696f939a90606:-645650333,373b8a0454e77010f82b9975f5105fe7:-1548980156,8d3e5b92701330106d38a19ec6292f49:-1531830563,85ad7386b7973010e148049df515c45d:-1502480195,552d3f06c197301007a909ad31f6f455:-1767730081,bf6e7d24bd57301040863023f1db0996:-1553341945,c255c5f66dc4bc10f1705dbb4e97e0d6:-1109679404,d62adbee0c00bc10fa6982c207e50b8f:-938829013,49aab656cd083c106f340f9e02a56b90:-1734164096,55f87296b0083c10c4342345f7d84afd:-1609613233,bfff2c82c684f8100c5db50630ef1f6f:722887562,19a7984eaa80f810aa30186ef864a7d2:-1233627957,0f630c06cb40f810d7ee72a14e79be16:-521573323,91a349f9570c3050f87fa75e0ef678c6:1482369167,300df475a80c3050c352b2029387233f:612141019,b8c4b07d6fc83050989f6eb5b57f3dde:726323892,ad34bc3db7c8305081358ee7d4a87ace:1482146395,cd8338f93dc830501505b498d87a4a3d:1573019862,334824f5dfcc78101c89c5d93198227a:-1227885991,175c547dd14878100fd31d90d5f69fed:1169846369,1fafe6218dc8f4104596af8184e1b011:-720350223,412d26a96788f410c124dba629ce846a:-1798572143,498c22a90988f410776a564955d584a2:-867119740,924a16252d08f410d7c3267812b9409f:2092517432,cec542998640b410af329e8914cab513:-1672704215,419cad19bb00b4103c24a1faac51bd21:-382632969,c44268c2a3b92010f8037d330688f89c:-817609419,d4a037756b356010049369bed1960b5c:321711684,4b99783f18306010975804e74f21f0fd:-833368849,b9703433933060105ae5ef3bc0ec66b4:1000706849,197fc16b53fc2010843e38a314d1de01:-439317812,b2ba0d6b18bc20105208c7f5e549926d:2098178244,52ec371fbdfc60105ee76cae1fc14867:535339084,23ce549372b460106e9a8da327817362:1084760422,a979a70395346010d7bca5bb7cbd7672:530587356,f42ed103d4ac60102f4d80a7c9bc20e4:1702884945,d45055cf2a2c6010fc83c472232b4237:616941326,ad97b199e7a0a01087e6296ca746e877:1930885726,18c57159bfa0a0107b9349c7b7e768c7:1848365702,e11e0acdec286010d5016313aa8a39ce:-853561603,901ccec51d286010ad34cbed1f6181ed:-1084338431,bed53dc5e7e460106714528214f26f01:1408175284,7a22b1092ee46010e1fa12a4abbfbebf:-123892049,d5d5258592a46010f8061da235deca65:627640957,a1856d4537a46010ae72c042254dd109:1406714032,2f141d0d51e8e050b1ab8ae6565ba48d:-845142013,2cdfc0701caca05033384a629ef3b17b:2142404088,192a8c340d2ca050a88e659c03abc712:-1080722118,1997087cdce8a0507474b0138e8eaecb:514958393,afe3c87c7ca8a05061cc40460b965cbe:-1541715594,2350b222c884e010f8a75a518aec8a3d:-41385206,0e6fe6a2a144e010bca144d7cdf3f196:-1102985943,18f8c4841c9f30105cf58805cf6f0324:1574439623,75b7cc8c7f5f3010c1387a32b8c41a37:-1449447165,51b6cc8c215f3010310fa762c9291e2e:-1394220927,85cc6f33324f3010788cf8f565c1927b:-2010780423,bb5ecb77548730109387578a156856b5:-1209343744,ca1e8fb3fa87301078f41b227358ef5a:872977994,04fa07337c8730108b6a174657f1d17a:461609457,330987ff54473010b103cd08003b6711:1233523042,265607bf01473010357befe0b13e87d6:-582136325,53e4c3bbd1473010d173c0c41ea7b444:1941002858,4297163b210330102fad94b8beee213c:1325434101,09b320d3ad03b010e3517a09fc0ff350:358490808,823a74876f4770106a0cb4e7fb2b96b1:-1501252599,f62970878d47701042c7446ceb2bdb9b:-1521908045,6ffc5c4f84037010832adb7acd1ad8bd:-762000402,26cfb7fa0e0f30102f599a6e4dbc22b5:658461248,2c6f6ffec5cb301010f4a6f83510aee7:564891251,4db22fbe870b3010660b1eb3632ed6fa:-120087928,68326b7a254b30106b1158420cfa9b88:-1145961286,a56e977ef70b3010e56a97dbdc551aa0:663017488,50a1784619873010a99b309a3bc773aa:1526442245,c28178c21087301037d0a45f85f7e728:-1159804267,3eccf08ab8c33010071b13873ef22513:-1145961286,d86a90a57ebe3010508b226e2bab1920:409325012,6e7a8059ffbef01077e0bd6012eebc69:-1572446163,690a8815debef0105e10e242c9b7ebd9:932758705,b6534d3cc372b010fc39fe17ed2f8f7a:393841677,2e9fc41cee7a3010f67836b5157391f9:258672790,962e22e26ea67010f8f9a7bd7a8e267a:1827917398,37412edc0eeab010f79ba31c7dc62919:-84269191,d8d165d267a2f0107e5b00380d1194af:-374573469,5a4e0c8a8b2a301079e0a444a2ba9fbc:1889581950,7bd80c06b62a3010698a1ed79d29a106:-150168476,802880063c2a301082b6d789df45ecce:-126795519,60478006112a3010b8c9709215a672c5:-477448563,55bea9d84ca27010d0621b02630dee14:1172023067,7f4ca954d2a27010e840cf7b0c0f3ca3:-727312091,cd489910a4627010f6027367f2e9a876:1643192907,740d70c01e2630102d24b087566017af:2145624869,593bb440e0263010c85f57d5b45aa6b3:-819869057,54a9413a529af41054d917c2e337f0d1:-335986668,43b74872d192f41067fb52dfa61763f1:462730292,00247f228f52f41064b13896dbae2996:-1254368604,0b51fb2a7e12f41094e5607e03d57eee:682042963,ec0b6fa62412f410ab867d27a71f12c8:256853256,1fc827e28012f410faf73968d86e8fe7:1730618909,699a1b620fdeb41060bbd142e7aae9c0:382769039,6a61bb1ed1da74108696ef1664039c3a:-2015507746,764bb8d79f4230108b0a7bea55a7503b:1240786352,51e9e89be3023010a9db317ad1455fe7:304575975,93e3c0db304630107fc5ca8d803e5e78:-230389499,c5a363f0aa8674101b5fa29d4eb6767d:1335374726,a91e5144784eb01037203f98e2ceb1ad:786994458,fbbf184cb0c63010b683d7c073e118d4:942722367,2d9dbbfb1c7530104a80f73451dc7b41:-1295704493,6a01ca5b33353010f70009f8fdbe1a9e:1088082811,933925d34af13010ecb40f5c065bd642:1948496571,7028428a44d53010c1b87755ecd15b1b:942722367,618b714211d5301041ae84b418fae96d:-1942728233,e0b1c10ad4d130101fe6a69ab93e3447:-1009747617,397c3c06c3d13010d882e5dd68bd05be:-1605575298,4f5cb80651d13010ed4f002e566844f0:-1353169315,0afb44b4535530107384f27ecc8f103d:-57606340,ae5a44749b553010c4fee518bba3d982:-1067315875,1deff768c215301051e956e35af960c0:1535536410,1a673fa0ac153010d9fe858fae4d71d4:1111149809,acfa020815d53010d8c0856b81547229:710172544,ed9a024871d5301029d97d9dcead9732:-810970093,b5684244e8d530103e8a132df66793ee:-1110566222,a345b9c0a89530102f409eda80e2a69a:-148746295,730d610870553010f2ac30ea2b80f31e:1189553387,a6f72d08845530109fa71c1d1f3c4751:465295556,bfefa8bf9d01b0106ee8eb9096994906:184489179,569e7ba3f4c970108cce95fe44f1b77f:815448707,8e53632753cdb410117032dadf28f8b4:-1586753179,0635852fee09b4102f0f6d8db631801a:1083306717,d282c16b5a09b4109080414cc7049fa9:-1292438715,785ef4a73e09b4107ce93dacd54f9568:-730310953,122d3c67d809b41002982eceae7fb701:1528106518,02bab3938245b410cfd5d6c875e1ec33:-294932510,3fc58179f5c5701009b9a23d4b9f4a66:-64071947,4f35413503c57010df31491561b8773b:610240660,c91c35e5f08d3010770c1c093b5eeb9d:-1110779083,37ebb1e5a48d30107216f3615989f6f5:-1157056010,dc3ba86d7b89301087bc52abb4de56d8:-2067725401,02ccff1dc80530107fff432a0191c988:978993168,d9dc2fd24fb3a410fe9fcc9d62222f50:-1469873954,fd93ce5f8fe36010f8c94281d1e907cc:160055078,4b51ce9bbee36010b6f82541f72a287f:-575326538,ef8fb55b2be36010bd6ddeae5169c0b0:1366020,2eac399752e360106fa3c126a7b8dbd0:-1988079278,ca2bf197a3e3601010653a38e39a8bba:1949172809,e41fa95fcca3601087110000b30cae81:1624193497,41a9e5d701a360109fe99f4c0e48f69a:118896578,db88e646215328502a302a7ba650c4d7:-968929448,2be66282185328501e4c31f3dfd9855f:-978935699,dd13059913dfe01048ab85fed9a8b407:2130190675,e2db7c99fe1fe010052d4c603789092c:1175978801,ae6e9bc9a6df24501b2d6d924f56cdb1:-815861837,d0691fc9d6dba010a42a58717226f2ba:-359754939,c11e1788fa5f24508ed093a3684ca2e3:-1096120895,ea0917445d5f24505fa91859ed7e5637:1614014441,2d1487440a1f2450cd31913520a38d15:148956159,26b4c6fa7acf205001d442dcb2e5e35c:-1822618430,0f193ae25bcbac107a3437976f9e8f50:1576682166,3c9d577498cfe4101a45a013dda6b794:2018940530,9cfa97bca58fe410696adb3330839baf:106374574,03b817bc628fe410186ba17a476dc778:1741628813,a9be433ce04fe4108e955b93ee172e89:-1764988119,645b03b0318fe410ac2c3fbdf7a5ed09:-1159529184,74f703b0d88fe4104ce63bdf59e96201:302834688,bdcf363cdf4fe410a5c2ad1cfe263f54:120077110,2c6f3238954fe410ec13af9440db65b4:-2087249129,f104f2b05b4fe4102598b192f3d6f9dd:1780587574,bf613abca20fe4102413f9bbb06fd252:-1728770921,0d603ebcac0fe4106fa127ea9beab149:-324153062,6709d270730fe410251987f1abf5b097:846296896,f48892303a0fe410049b833e6779627e:-22190541,e522563c49cbe4105c25970c37a60ff2:-1617558480,f5f1c134400be410fc78212be6757903:1443369704,868bccfc3307e410ba754bd463b37f23:860664901,edf356ec674fa4100078e74afd17c072:1152600773,39455c20880ba410a804ba4d27132eea:-1999482427,5ef4dc24520ba41029393b3fdec119df:88895795,8bcfd65c0d83a410cfdbb3a7d375ef7e:142322403,e09e921c4983a410b8a36c83f2512565:-176275878,aa2cde988283a410606c08b8502ef47e:1683341362,e2269214c183a4100b1d716544355dae:-1085842769,92359a541783a41009b85fb2563db52c:423638413,85f7cc8da595649049a5f92a39515a38:-1671888124,a50cc04d0304a010d9e06307ee334b0a:-1435386113,20e7800d5304a010e25bf925369f0997:2069133929,9a314da67e6f54106849e7642e6e92b6:175809751,a799715618675410d72ca6b5433c3031:2114252140,8d25cdd630a35410a9c4b394f93d421c:634838339,025ab502246b141092561d35ebcf395f:-1070049925,249214c250e31410c0f5c7cc8b582da8:1541575440,13d75efdd3a750109bd9a5857eef766d:2140628624,66c52031d12bd0107741bda29317207b:812274704,a5f46c312b2bd010a9324c1a97cb6a79:-2088715855,d7fbd4b5e6e7d010977039698d86385a:-1845678258,fdba54f573e7d010d0fbc3255a827352:1712006664,b0990c39bda7d0106693c68f6285ad93:163655485,ada4f3259267d010e307908d3856c9f0:745814570,5a158204172b9010f0ef7bb83ba779b6:869112296,247dc508e6679010115cd078465f1a9d:-1108733538,8d56a101f41750102e39357d41da928a:-993732319,cf04e84d01135010dd3401cc9cd40f56:-947411583,c33a1c056213501027b75accf99002b4:1592620463,46c75c055a1350101aaebed65445e27c:1471297535,b40bf9706ad710103440c5aaae477384:1933924403,53022024d21350109bdc074d55bd8bf6:350800390,479294284bdf1010b37ded70cf7c21fc:1105798470,369f0864a4df10109a37324f02e536ac:1151522099,3d8a8f10df1f101058d18586073f1b69:-1687325504,08b89c0163c75c908290bf7147f54842:901634930,66786d50ee83d89027e982b625aa6619:-1217183196,443319949f87d0104c96842f47285f5d:-804901250,fc25415c1147d010cfde50e1cad46aef:-1852353262,8cf14d98ee47d01073d2af49e4e581fa:1481362477,3351c5987347d0109e0071da0819f5de:-50525092,1c9db094ec47d010f3dc881df45e612c:-1874550043,66e7b410a547d0104b11948a9abb313d:849508809,d033f4106947d010ba51dd0066299872:2052980060,061f68909407d010d07bdfc3bde72dfb:-276613048,f5bbe4dcefc3d0107eb2e582eea2a0a3:927928773,df96a4d818c3d0106955cd2460128be0:-805653090,8c25a45896c3d010bd40cf31680e6ed2:-2091770536,a983ec582cc3d010aa1842bafb8a9b60:1328227568,06c1189c3e83d0107fc9cff8189b52d2:-1901943432,3bdf4018b483d01064c13aa922d1dc1c:934422790,d60b059fb7ba5010e540b304a8d9f10e:1500667199,fb790d5b4c7a50100ec0a46114923695:806665422,1a2ac2cffbb25010655dd9a7144de1a7:1521625119,32b1e16f972298503552fe8fefd8b8d9:-551997769,c76b1f26783b84101699a4e185cba18b:-753688393,097b64f2a41100103d297aa02e5c1a8d:-912298074,470bb568d71908104151472ef344ea38:-741977356,e8b97d2867190810ced38c88647e1927:867468443,72bd17fe6c41041045fca46ec9ce8b74:1563531241,c694e3b73c7f330077f703ee6df280c0:907140764,af00f5aefd3bb300d33393d88e1ec300:-931762699,9c8795a61ff7b3009da79fc6d24e2fe4:909114287,80b9f06670b7b300a0dc0713f4a1201c:-1866674801,d143b8eacebb3300a9b26b1f21873d8d:-1840373311,9fd0b82689bb3300e81365b9698843c5:210928253,8fd9a0e215bb330064f496ab81075243:-630791341,a70df396e43b330039398af0d931612b:1631528564,2f9aa6da0f37330088be1cd81c61cf6b:185703213,127aa6daff373300429261ee6d857564:-1848709098,cf3aaa9abf3733000042c1b2f32cb215:-304031332,ff2aae9a5a3733002a5c8c2a06ec8ccf:344153237,e5e4a696e0373300423e76365a56f98c:-2078374087,18a6d25a95f33300e3097677b4d030d3:489118318,8c96521e2ff33300a084c7c921fc9116:-2111722977,562196d63fb33300c2baf2d26a8f0b75:-896639251,a4f2ca96dbb33300ac3ce7d0e49b826a:-1385597839,25c1429257b333000e63959788a73a41:-940423726,4ab1b95a3e333300409bc2c1f0615602:546104125,b920355a5f7333006d2374e3d4d84234:527834964,60642d1afa333300deab36de8709c65a:-1575383558,fdfad51693333300f0aba0a5886da3cc:612375769,c709d5928d333300db64d85c27324fef:-548422816,f71bda4abb37730041004c07e4f84ef4:-293315480,40159a4666f37300332d5ff896b245f7:2037898708,e9f30e4a26f373007bbfe229bc083bc9:-1598826147,45152dce777373007b61d0fd0d7b6348:1031060289,034269424db373000478953c57913805:574640253,57b1a1428fb373003e7f8a5c292ce8b4:-1118767405,3ea1614251b37300ce5fd7d09f82f6fa:-81791376,46afd1ce8f737300fe6c21326add9110:-1812907213,c7ee5542777373009ce66e45d66d3cb4:1275437037,0f8acd0a7e3373009915d4ad8a677bff:81599683,763bf0427f3373004bc5657665a53663:616933246</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_transform_script_0903532837252300fdfc097973990e0c</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_transform_script"&gt;&lt;sys_transform_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;map display_value="Nutanix Transform MarketPlaceItems"&gt;5228bcc3db91230084249235ca961967&lt;/map&gt;&lt;order&gt;100&lt;/order&gt;&lt;script&gt;&lt;![CDATA[(function runTransformScript(source, map, log, target /*undefined onStart*/ ) {
    try {
		
        var appUtil = new Nutanix_Calm_Utils();
        var logger = new Nutanix_Calm_Logger();
        if (source.type + '' == 'runbook') {
			var create_variable = new Nutanix_CreateCatalogVariables();
            create_variable._createDefaultVariables(target.sys_id);
			
			var runbook_variable = [];
			
			var resource = JSON.parse(source.runbook_template_info);
			                                 
			var runbook = resource.runbook_template.spec.resources.runbook.variable_list;		
			var variable_list = runbook.variable_list;
			gs.info("on after ====== "+JSON.stringify(runbook));
            var temp_json = {
                "uuid": 'runbook',
                "name": 'runbook',
                "variable_list": runbook
            };
			runbook_variable.push(temp_json);
			var appBody = {
                "parameter": target.sys_id + '',
                "payload": runbook_variable ,
                "type": 'runbook'
            };
			var call = new Nutanix_ImportApplicationProfiles();
            call.processRunbookVariable(appBody);

        }else {


            var blueprintTemplate = JSON.parse(source.app_blueprint_template);
            blueprintTemplate = blueprintTemplate.status.resources;

            var iconReference = source.icon_reference_list + '';

            if (blueprintTemplate.default_credential_local_reference &amp;&amp; blueprintTemplate.credential_definition_list) {
                var defaultCredentialBody = {
                    'type': 'blueprint',
                    'default_credential_local_reference': blueprintTemplate.default_credential_local_reference,
                    'sys_id': target.sys_id + ''
                };
                appUtil.insertIntoQueue("ProcessingCredentials", '', JSON.stringify(defaultCredentialBody), JSON.stringify(blueprintTemplate.credential_definition_list), 'Process credentials', 'This job processes the imported credentials.');
            }
            if (target.template_type == "Single Vm") {

                var service_body = [{
                    "uuid": "singleVm-default-service-uuid",
                    "name": "Single Vm Configuration"
                }];

                var catVariableBody = {
                    "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                    "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                    "service_definition_list": service_body,
                    "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                };
                //gs.error("Single categories :: "+JSON.stringify(catVariableBody));
                appUtil.insertIntoQueue("processCatalogVariables", '', target.sys_id + '', JSON.stringify(catVariableBody), 'Process catalog variables', 'This job processes the imported catalog variables.');

            } else if (blueprintTemplate.package_definition_list &amp;&amp; blueprintTemplate.substrate_definition_list &amp;&amp; blueprintTemplate.app_profile_list &amp;&amp; blueprintTemplate.service_definition_list) {

                var catVariableBody = {
                    "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                    "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                    "service_definition_list": (blueprintTemplate.service_definition_list) ? blueprintTemplate.service_definition_list : "",
                    "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                };
                //gs.error("Multi categories :: "+JSON.stringify(catVariableBody));
                appUtil.insertIntoQueue("processCatalogVariables", '', target.sys_id + '', JSON.stringify(catVariableBody), 'Process catalog variables', 'This job processes the imported catalog variables.');

            }

            var profile = JSON.stringify(blueprintTemplate.app_profile_list);

            if (iconReference)
                appUtil.insertIntoQueue("processingIcon", '', target.sys_id + '', iconReference, 'Process icons', 'This job processes the icons of imported marketplace items.');


            //appUtil.insertIntoQueue("ProcessApplicationProfiles", '', target.sys_id+'', profile+'');
            var appBody = {
                "parameter": target.sys_id + '',
                "payload": profile + '',
                "substrate": JSON.stringify(blueprintTemplate.substrate_definition_list)
            };
            var call = new Nutanix_ImportApplicationProfiles();
            call.processApplicationProfiles(appBody);
		}
            appUtil.insertIntoQueue("MapCatItemToProject", '', target.sys_id + ',' + target.version_mpi, source.project_reference_list + '', 'Map catalog items to project', 'This job maps the catalog items to their respective projects.');
       
        //	appUtil.insertIntoQueue("createUserCriteria", '', '', JSON.stringify(body));
    } catch (e) {
        this.logger.error("OnAfter Error "+e);
    }

})(source, map, log, target);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_transform_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-31 12:50:26&lt;/sys_created_on&gt;&lt;sys_id&gt;0903532837252300fdfc097973990e0c&lt;/sys_id&gt;&lt;sys_mod_count&gt;57&lt;/sys_mod_count&gt;&lt;sys_name&gt;onAfter&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_transform_script_0903532837252300fdfc097973990e0c&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-01-22 13:54:14&lt;/sys_updated_on&gt;&lt;when&gt;onAfter&lt;/when&gt;&lt;/sys_transform_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>1269347249</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>92ab0533c3d4569064971612b4013154</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2fdd0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>onAfter</target_name>
<type>Transform Script</type>
<update_domain>global</update_domain>
<update_guid>4ae4a60f33f77550002721afc9d15e06</update_guid>
<update_guid_history>4ae4a60f33f77550002721afc9d15e06:1269347249,1e4c964a3a4970d037bc78e01452243a:-1465707234,909f3ccef6ada11049c1301a39c7871f:752322346,1e4c964a3a4970d037bc78e01452243a:-1465707234,38b9fa61b46d61104023f49cc5f79319:752322346,1e4c964a3a4970d037bc78e01452243a:-1465707234,9fe1598c44a9e910afdb174254e96296:752322346,1e4c964a3a4970d037bc78e01452243a:-1465707234,dd2c164ac64970d05bd42dc75ffbec46:1008121876,fbe670a7efbc3890f1cf43598d46b51e:651667082,1135f86319bc38908706f8e9cd2d21a1:-1037002625,1671f8639abc38907dc47efebe159086:-1074886453,9630ece3f0b838905acd25449777a28a:1103243753,f62c10e380b8389048481ef4491166b0:1661544927,efab98a3aab838903c88dcf015daec3a:-1100276957,2dba9863edb83890b6778e6dbdcc5189:-86013526,632ad0237cb83890dd848081a0aee99e:1915531427,4d43dc9bcb7cf4905e42afeb1f342c9d:-484808682,9db214d7797cf490013207420b26f048:1791518560,03ac4c57187cf490522afd86e0eda47c:1723253019,a13b0813477cf4906cd3c189a18c9436:-1692328630,5eee3fcb74b4f49096cec664c113d29c:-1250231122,5204afcb3634f490fb8ec6b7c9ae9f38:-1647759102,17a51b727938b4902deecf34a3c75d23:2130073484,dc7512fef1f0b4903368c9c3f499ff11:1423536647,f5ce8ebea1b0b490e21c99a7150d21e2:147351297,f2a68e1da37870904c95bc757317dc8f:-1776548793,a3ed999de13470904885455efdc84833:-894065858,221599ced3287c107c58c6a6c5963434:-522716287,57da6608b56b6300f60c416cae5c5945:1722390465,dfd4a01625532300d220e025ac1b7d2b:789825469,f65d071cebe263009731dadfc3aeca67:574005978,491d56cc82662300ff220abbf5299345:-91810059,7c896d08cde223004f3ec73b53cba89d:-170519576,fdde49089b622300d97e0024e93236a4:432706953,f22ec5086f6223008c26708966773cb8:-948915139,b94ff865b616e300c92a3facf3c1c474:269163145,7350699ba271e30004cbae0b261b2139:1482524781,3da0520f3579a30007b5e6ed6c7ffb59:151899373,22cf8acb9779a30035bb737ecc80b1a3:354906457,526e4e4bf079a30065cf2cce53fb38ff:1382697094,724cc6470e79a30056f1f64ac7cb5967:-1613732272,7146ca8f5c39a300417f880765f6bcaf:-1762704722,5106428f5f39a300b69c28968f50132b:103749848,b39b75871c39a300e5e51504a34188b7:1963946772,e58af1475d39a30022a5be11cce83a5a:2004177816,b9e6f943df39a300cb6c95029a76da0c:-1205100210,7c9531836e39a300fd8ef5a5a5b554b8:2120643887,36d27503d339a3006ffe3a23864e79d2:1601142629,16af694ffff5a30049e2b0d625e75267:-1019748089,384be18b15f5a30007c0ea6e0efea007:-1496530157,e1df518f71b5a300daad1f6c307b9975:-1585417485,be575d4757b5a300d0767bf1a410229a:-197666267,9659818be775a300bc3a09a7c395fe1d:-923703024,276446bd0775e3007e7993ed1074c9dc:-1842167487,0e530eb95075e300b19471614ee6e891:-179078894,ba820eb91075e3005cc6429434045e88:31876726,7db3a0b5c571e3004cff2953518b3fba:-1222665046,1e6e92254c3da300bc5727caae810c02:-626044799,fdad64a5cff5a30024e3ae9e9bcfb8e7:1537081719,57d56c61e5f5a300278ca92506679f07:1356556026,4be06b458fb96300fb45f5a686bf8b06:2066859751,0609a019056d2300ba8f4e0500f0f4df:-338883097,570977a093a52300f9a8938e366be392:-688324159,3535a7acec2523005cd324392cccdb79:642312132,6e431be41c25230056bb1f6728c800de:-556996061</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_subnet_subnet_vpc_type</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="subnet_vpc_type" table="x_nuta2_nutanix_ca_subnet"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {
	var cal_value = '';
if(current.subnet_type == 'OVERLAY'){
	cal_value = current.name+" | "+current.vpc_name+" | "+current.subnet_type;
}
else if(current.subnet_type == 'VLAN'){
	cal_value = current.name+" | "+current.cluster_name+" | "+current.subnet_type;
}
	return cal_value;  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;Subnet VPC Type&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;subnet_vpc_type&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;formula/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value="String"&gt;string&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;250&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_subnet&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;users.midserver&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-05-06 10:01:04&lt;/sys_created_on&gt;&lt;sys_id&gt;1f2e9a7c938e8e5090acfa497bba10ae&lt;/sys_id&gt;&lt;sys_name&gt;Subnet VPC Type&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_subnet_subnet_vpc_type&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-05-06 10:12:59&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;true&lt;/virtual&gt;&lt;virtual_type&gt;script&lt;/virtual_type&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1693156897</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>92ab4133c3d4569064971612b4013122</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c310b0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_subnet</table>
<target_name>Subnet.Subnet VPC Type</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>3431aa7453ce8e50b33728223e9d40ea</update_guid>
<update_guid_history>3431aa7453ce8e50b33728223e9d40ea:-1693156897,412f9a7cb58e8e50aeeb65aebef71e2f:-21439388,9e7e52bce68e8e501c20248d79928675:1894135919</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_properties_2b43b4bb93ca8e1090acfa497bba1025</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>Migration sytem property for v1.7</description><ignore_cache>true</ignore_cache><is_private>false</is_private><name>x_nuta2_nutanix_ca.1_7</name><read_roles/><suffix>x_nuta2_nutanix_ca.1_7</suffix><sys_class_name>sys_properties</sys_class_name><sys_created_by>subuhee.fathima</sys_created_by><sys_created_on>2024-05-15 09:55:05</sys_created_on><sys_id>2b43b4bb93ca8e1090acfa497bba1025</sys_id><sys_mod_count>7</sys_mod_count><sys_name>x_nuta2_nutanix_ca.1_7</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_properties_2b43b4bb93ca8e1090acfa497bba1025</sys_update_name><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-05-22 10:06:15</sys_updated_on><type>string</type><value>0</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=2b43b4bb93ca8e1090acfa497bba1025"/></record_update>]]></payload>
<payload_hash>-1361957047</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>96ab0533c3d4569064971612b401314d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c31740000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.1_7</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>d219f8065356c6d03d709c683e95eb41</update_guid>
<update_guid_history>d219f8065356c6d03d709c683e95eb41:-1361957047,6e8fecc68e16c6d06bf9cf75042d3a43:-1341619672,315f2c0a5016c6d02501c18f9991577f:-1361957047,4ff54ba19f1646d0c4aa7e2e41cb55a4:-1341619672,76a54721441646d070187b6b135f9557:-1361957047,8bdc3aed7e9246d00a2ae49834849ce2:-1341619672,d993b0fb96ca8e105e8cbc1128df8570:-1361957047,2663f4fbc2ca8e10f456fbf0f4ef9f0c:46256780</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_92e8017f37112300fdfc097973990e33</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_FetchConfigureSettingDropdown&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_FetchConfigureSettingDropdown&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_FetchConfigureSettingDropdown = Class.create();
Nutanix_FetchConfigureSettingDropdown.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();

        this.disabledFields = gs.getProperty('x_nuta2_nutanix_ca.disabled.fields') + '';
    },

    _insertIntoOptions: function(var_json) {
        try {

            var sys_id = var_json.sys_id + "";
            var grQuestionChoice = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
            grQuestionChoice.addQuery('variable', sys_id + "");
            grQuestionChoice.query();
            grQuestionChoice.deleteMultiple();

            for (var i = 0; i &lt; var_json.options.length; i++) {
                var grQuestionChoice = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
                grQuestionChoice.initialize();
                grQuestionChoice.variable = sys_id + "";
                grQuestionChoice.name = var_json.options[i] + "";
                grQuestionChoice.value = var_json.options[i] + "";
                grQuestionChoice.insert();
            }
        } catch (e) {
            gs.info("In _insertIntoOptions:" + e);
        }
    },

    _sysIdToValue: function(values) {
        var sys_id_arr = values.split(",");
        var val_arr = [];
        for (var i = 0; i &lt; sys_id_arr.length; i++) {
            var grQuestionChoice = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
            if (grQuestionChoice.get(sys_id_arr[i] + "")) {
                val_arr.push(grQuestionChoice.value + "");
            } else {
                this.logger.info("error in Nutanix_FetchConfigureSettingDropdown._sysIdToValue - couldnt find a record using getmethod()");
            }
        }
        return val_arr.toString();
    },

    variableArrayParser: function(type, parent_uuid, var_array, field, profile_name, env_uuid) {
        //this.logger.debug("++++variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);	
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.variableArrayParser." + profile_name + env_uuid);
            if (field != "onLoad") {
                var grItem = new GlideRecord("item_option_new");
                field = field.replace("IO:", "");
                if (grItem.get(field)) {
                    field = grItem.name + "";
                } else {
                    this.logger.info("error in Nutanix_FetchConfigureSettingDropdown.variableArrayParser - couldnt find a record using getmethod()");
                }
            }
            var cat_launch = false;
            if (type + "" == 'catalog') {
                cat_launch = true;
                var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
                gr.addQuery("item_name", parent_uuid);
                gr.query();
                if (gr.next()) {
                    parent_uuid = gr.blueprint.uuid + "";
                    type = "blueprints";
                    if ("" + gr.item_name.category.title == "Blueprint") {
                        type = "blueprints";
                    }
                    if ("" + gr.item_name.category.title == "Marketplace Blueprint") {
                        type = "published";
                    }
                    if ("" + gr.item_name.category.title == "Marketplace Runbook" || "" + gr.item_name.category.title == "Runbook") {
                        type = "runbooks";
                    }
                }
            }
            //gs.info("Var array"+var_array);
			this.logger.debug("Return of Var array Inside Nutanix_FetchConfigureSettingDropdown.variableArrayParser"+var_array);	
            var parsed_var_array = JSON.parse(var_array);
            var pre_map = {};
            var extApiFlag = false;
            var str = [];
            for (var i = 0; i &lt; parsed_var_array.length; i++) {
                var var_data = parsed_var_array[i];
                var hasMacros = (this.appUtil._createMacroArray(var_data.def_val + "").length != 0);
                if (hasMacros)
                    var_data.value = var_data.def_val;
                var depends_on = this.appUtil.getMacroDependencies(JSON.stringify(var_data));
                if (field != "onLoad") {
                    if (depends_on.all_dep.indexOf(field) != -1) {
                        str.push(var_data.name);
                    }
                }
                //Amit Kolkar	
                //if (hasMacros == true) {	
                pre_map[var_data.name] = {
                    "depends_on": depends_on,
                    "value": (hasMacros) ? var_data.def_val + "" : var_data.value + "",
                    "uuid": var_data.uuid,
                    "type": var_data.type,
                    "data_type": var_data.data_type,
                    "name": var_data.name,
                    "sys_id": (var_data.sys_id) ? var_data.sys_id : "",
                    "catalog_launch": cat_launch
                };
                if (var_data.type == 'EXEC_LOCAL' || var_data.type == 'HTTP_LOCAL' || var_data.type == 'EXEC_SECRET' || var_data.type == 'HTTP_SECRET') {
                    pre_map[var_data.name].requiresApiCall = true;
                } else {
                    if (var_data.options &amp;&amp; var_data.options.choices &amp;&amp; var_data.options.choices.length != 0) {
                        pre_map[var_data.name].options = var_data.options.choices;
                        pre_map[var_data.name].data_type = "LIST_SINGLE";
                    }
                    if (var_data.data_type + "" == 'LIST') {
                        if (cat_launch)
                            pre_map[var_data.name].value = this._sysIdToValue(var_data.value);
                        pre_map[var_data.name].data_type = var_data.data_type;
                    }
                }
                //}	
            }
            gs.info("Pre Map" + JSON.stringify(pre_map));
            //this.logger.debug("====variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);	
            //var result = this.getHttpValues(type, parent_uuid, JSON.stringify(pre_map), str);
            var result = this.getHttpValues(type, parent_uuid, JSON.stringify(pre_map), str, profile_name, '', env_uuid);
            this.logger.debug("Result of variableArrayParser Inside Nutanix_FetchConfigureSettingDropdown.variableArrayParser "+result);
            return result;
        } catch (e) {
            this.logger.error("Exception caught Inside Nutanix_FetchConfigureSettingDropdown.variableArrayParser . Error : - " + e);
        }
    },

    fetchSnapshotPolicy: function(profile, envUUID, catSysID) {
        try {
            var snapshotPolicy = [];
            var blueprintType = '';
            this.logger.debug("Inside Nutanix_ClientServerScriptBridge.fetchSnapshotPolicy.");
            var bp_uuid;
            var bp_sysID;
            var profile_uuid;
            var snapshot_uuid;
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.addQuery("item_name.sys_id", catSysID);
            gr.query();
            if (gr.next()) {
                bp_uuid = gr.blueprint.uuid + '';
                bp_sysID = gr.blueprint.sys_id + '';
                blueprintType = gr.type_of_blueprint + '';
            }
            gs.info(bp_sysID + "gs.info : " + catSysID + profile);
            var gr = new GlideRecord("x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation");
            gr.addQuery("catalog_item.sys_id", bp_sysID);
            gr.addQuery("application_profile.name", profile);
            gr.query();
            if (gr.next()) {
                profile_uuid = gr.application_profile.uuid + '';
            }
            if (blueprintType == 'unpublished') {
                var getBlueprintDetails = this.appUtil.makeCalmApiCall('GET', '/blueprints/' + bp_uuid, '');
            } else
                var getBlueprintDetails = this.appUtil.makeCalmApiCall('GET', '/calm_marketplace_items/' + bp_uuid, '');
            if (getBlueprintDetails.getStatusCode() == '200' || getBlueprintDetails.getStatusCode() == '201') {
                var BlueprintDetails = JSON.parse(getBlueprintDetails.getBody());
                if (blueprintType == 'unpublished') {
                    var profileList = BlueprintDetails.status.resources.app_profile_list;
                } else {
                    var profileList = BlueprintDetails.status.resources.app_blueprint_template.status.resources.app_profile_list;
                }
                for (var i in profileList) {
                    if ((profile_uuid == profileList[i].uuid + '') &amp;&amp; (profileList[i].environment_reference_list[0] + '' == envUUID)) {
                        var snapshotList = profileList[i].snapshot_config_list;
                        for (var j in snapshotList) {
                            snapshot_uuid = snapshotList[j].uuid + '';
                            var getSnapshotPolicy = this.appUtil.makeCalmApiCall('POST', '/blueprints/' + bp_uuid + '/app_profile/' + profile_uuid + '/config_spec/' + snapshot_uuid + '/app_protection_policies/list', '{"length":250,"offset":0,"filter":"environment_references==' + envUUID + '"}');
                            if (getSnapshotPolicy.getStatusCode() == '200' || getSnapshotPolicy.getStatusCode() == '201') {
                                var SnapshotPolicyList = JSON.parse(getSnapshotPolicy.getBody());
                                snapshotPolicy.push({
                                    "uuid": snapshotList[j].uuid + '',
                                    "name": snapshotList[j].name + '',
                                    "list": SnapshotPolicyList
                                });
                            }
                        }
                    }
                }
            }
            gs.info("fetchSnapshotPolicy: " + JSON.stringify(snapshotPolicy));
            return JSON.stringify(snapshotPolicy);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fetchSnapshotPolicy. Error:- " + e);
        }
    },

    fetchLaunchVars: function(catSysId, profile) {

        var varJSON = {
            "profile": {},
            "service": {}
        };
        var grProfile = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        grProfile.addQuery('application_profile.name', profile + "");
        grProfile.addQuery('catalog_item', catSysId + "");
        grProfile.addQuery('isprofilevariable', true);
        grProfile.orderBy('variable.name');
        grProfile.query();
        while (grProfile.next())
            varJSON.profile[grProfile.variable.sys_id + ""] = grProfile.field_json + "";
        var grService = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        grService.addQuery('catalog_item', catSysId);
        grService.addQuery('isservicevariable', true);
        grService.orderBy('variable.name');
        grService.query();
        while (grService.next()) {
            varJSON.service[grService.service_name.question_text + ""] = {};
        }

        grService.query();
        while (grService.next()) {
            varJSON.service[grService.service_name.question_text + ""][grService.variable.sys_id + ""] = grService.field_json + "";
        }

        //[grService.sys_id] = {"field_json": grService.field_json + ""};
        //varJSON["service"][grService.service_name] = {"sys_id": grService.sys_id, "field_json": grService.field_json};
        return JSON.stringify(varJSON);
    },

    fieldValidation: function(catSysId, fieldValueMap) {
        try {
            this.logger.debug("Inside Nutanix_ClientServerScriptBridge.fieldValidation.");
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addEncodedQuery('catalog_item=' + catSysId + '^isprofilevariable=true^ORisservicevariable=true^ORfield_regexISNOTEMPTY');
            gr.query();

            var fieldValReg = {};
            while (gr.next()) {

                var listRegex = {};
                if (gr.type + '' == 21) {
                    var filter = (gr.variable.reference_qual + '').substr(9, (gr.variable.reference_qual + '').length);
                    var genTable = new GlideRecord('x_nuta2_nutanix_ca_generic_table_for_dropdown');
                    genTable.addQuery('variable', filter);
                    genTable.query();
                    while (genTable.next()) {
                        listRegex[genTable.sys_id + ''] = genTable.value + '';
                    }


                }
                fieldValReg[gr.variable.name + ''] = {
                    "status": false,
                    "regex": gr.field_regex + '',
                    "type": gr.type + '',
                    "data_type": gr.data_type + '',
                    "listRegex": listRegex
                };
            }
            return JSON.stringify(fieldValReg);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ClientServerScriptBridge.fieldValidation. Error:- " + e);
        }

    },


    hideAccessLocalGroupOption: function() //hide the option
    {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.hideAccessLocalGroupOption.");

            var lg = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
            lg.addQuery();
            lg.query();
            while (lg.next()) {
                return lg.use_local_groups;

            }
        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.hideAccessLocalGroupOption:" + e);
        }
    },

    supportStatusMPI: function(bpSysID) {
        try {
            //             gs.info(bpSysID);
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.supportStatusMPI.");
            var ss = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
            if (ss.get(bpSysID)) {
                return ss.support_status;
            }
        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.supportStatusMPI: " + e);
        }
    },

    advanceVariableDynamicOptions: function(catSysId, fieldValueMap) {
        try {

            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.advanceVariableDynamicOptions.");
            /*var launch_set_json = {};
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties+'');
            gr.addEncodedQuery('catalog_item='+catSysId+'^isprofilevariable=true^ORisservicevariable=true');//^data_typeINEXEC_SECRET,HTTP_SECRET,EXEC_LOCAL,HTTP_LOCAL');

            gr.query();


            var catalog =  new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            catalog.addQuery('item_name',catSysId);
            catalog.query();

            var profile_json = {};
            var service_json = {};
            while(gr.next()) {
                var type = gr.data_type + "";
                var requires_api_call = false;

                if(type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')
                    requires_api_call = true;

                if(gr.isprofilevariable + "" == "true") {
                    profile_json[gr.variable.question_text + ""] = {
                        "sys_id" : gr.sys_id+'',
                        "value" : gr.default_value + "",
                        "depends_on" : JSON.parse(gr.field_json + ""),
                        "uuid": gr.uuid + "",
                        "type": type,
                        "requiresApiCall": requires_api_call,
                        "name": gr.variable.name+'',
                        "question_text": gr.variable.question_text+''
                    };

                }
                if(gr.isservicevariable + "" == "true") {
                    service_json[gr.variable.question_text+''] = {
                        "sys_id" : gr.sys_id+'',
                        "value" : gr.default_value + "",
                        "depends_on" : JSON.parse(gr.field_json + ""),
                        "uuid": gr.uuid + "",
                        "type": type,
                        "requiresApiCall": requires_api_call,
                        "name": gr.variable.name+'',
                        "question_text": gr.variable.question_text+''
                    };
                }
            }
            launch_set_json = {"profile_json": profile_json, "service_json": service_json};
            gs.info("Launch Page:"+JSON.stringify(launch_set_json));

            launch_set_json.profile_json = JSON.parse(this.getHttpValues('blueprints', catalog.blueprint.uuid + "" , JSON.stringify(launch_set_json.profile_json)));
            launch_set_json.service_json = JSON.parse(this.getHttpValues('blueprints', catalog.blueprint.uuid + "" , JSON.stringify(launch_set_json.service_json)));

            gs.info("Result:"+JSON.stringify(launch_set_json));
            return;*/
            var advanceFields = [];
            advanceFields[0] = {};
            advanceFields[1] = JSON.parse(this.fieldValidation(catSysId));
            return JSON.stringify(advanceFields);

        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.advanceVariableDynamicOptions:" + e);
        }
    },

    _substituteMacroEscript: function(value, all_values) {

        var macro_split = value.split("@@{");
        for (var i = 0; i &lt; macro_split.length; i++) {
            if (macro_split[i].includes("}@@")) { //@@{Prince}@@
                var internal_split = macro_split[i].split("}@@");
                if (!all_values[internal_split[0]])
                    return '';
                internal_split[0] = (all_values[internal_split[0]].value + "").replace(/\n/g, "");
                macro_split[i] = internal_split.join('');
            }
        }
        return macro_split.join('');
    },

    _substituteMacro: function(value, all_values) {

        var macro_split = value.split("@@{");
        for (var i = 0; i &lt; macro_split.length; i++) {
            if (macro_split[i].includes("}@@")) { //@@{Prince}@@
                var internal_split = macro_split[i].split("}@@");
                if (!all_values[internal_split[0]])
                    return '';

                //code changes by Prince ...
                // 				if((all_values[internal_split[0]].value).contains("\n")){
                // 					var res =  all_values[internal_split[0]].split("\n");
                // 					internal_split[0] = res.join();
                // 				}else{
                internal_split[0] = unescape(all_values[internal_split[0]].value + "");
                //}
                macro_split[i] = (internal_split.join('')).replace(/\n/g, "");
            }
        }

        return macro_split.join('');
    },

    _createOverrideVarBody: function(all_values, variable_json) {

        try {
            var type = variable_json.type + "";
            var override_array = [];

            if (type == "EXEC_LOCAL" || type == "EXEC_SECRET") {
                override_array.push({
                    "key": "script",
                    "value": this._substituteMacroEscript(variable_json.depends_on.script.value, all_values)
                });
            }

            if (type == "HTTP_LOCAL" || type == "HTTP_SECRET") {
                var supported_fields = {
                    "content_type": "",
                    "url": "",
                    "request_body": "",
                    "response_paths": ""
                };
                for (var i in supported_fields) {

                    var val = (variable_json.depends_on[i].value) ? variable_json.depends_on[i].value + "" : "";

                    if (i == "response_paths") {
                        val = (variable_json.depends_on[i].value) ? variable_json.depends_on[i].value : {};
                        var var_name = {};
                        for (var k in val)
                            var_name[k] = this._substituteMacro(val[k] + "", all_values);
                        override_array.push({
                            "key": i,
                            "value": var_name
                        });
                    } else {
                        override_array.push({
                            "key": i,
                            "value": this._substituteMacro(val, all_values)
                        });
                    }
                }

            }

            return JSON.stringify(override_array);
        } catch (e) {
            gs.info("override_array er" + e);
        }
    },

    getHttpValues: function(type, parent_uuid, pre_map, str, profile_sysid, env_profile, env_sysid) {
        try {

            gs.info("Pre Value Map :: " + JSON.stringify(pre_map));
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getHttpValues. type : " + type + " parent_uuid : " + parent_uuid + " pre_map : " + pre_map);
            if (type == 'runbook') {
                type = 'runbooks';
                var unpub_runbook = new GlideRecord('x_nuta2_nutanix_ca_runbooks');
                if (unpub_runbook.get(parent_uuid)) {
                    parent_uuid = unpub_runbook.uuid + '';
                }
            }
            if (type == 'published_runbook') {
                type = 'runbooks';
                var pub_runbook = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
                if (pub_runbook.get(parent_uuid)) {
                    parent_uuid = pub_runbook.uuid + '';
                }
            }

            var post_value_map = {};
            pre_map = JSON.parse(pre_map);
            var top_pre_map = {};
            for (var i in pre_map) {
                top_pre_map[i] = this.appUtil.createPreMap(pre_map[i].depends_on, pre_map[i].type);
            }

            var top_post_map = this.appUtil.createDependencyMap(top_pre_map);
            var dependency_array = top_post_map.Dep_array;
            var error_array = top_post_map.error_map;
            var mpi_uuid, bp_name, project_uuid, environment_uuid;

            if (type == 'unpublished') {
                var table_name = (type == 'unpublished') ? this.appUtil.configuration.table.Blueprint + '' : 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                if (grBlueprint.get(parent_uuid)) {
                    parent_uuid = grBlueprint.uuid + '';
                    type = 'blueprints';
                }
            }
            if (type == 'published') {

                var table_name = (type == 'unpublished') ? this.appUtil.configuration.table.Blueprint + '' : 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                if (grBlueprint.get(parent_uuid)) {
                    mpi_uuid = grBlueprint.uuid + '';
                    bp_name = grBlueprint.name;
                    if (grBlueprint.bp_type == 'runbook')
                        type = 'runbooks';
                    else
                        type = 'blueprints';


                    var bp_project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
                    bp_project.addEncodedQuery('catalog_item.sys_id=' + parent_uuid);
                    bp_project.query();
                    while (bp_project.next()) {
                        project_uuid = bp_project.projects.uuid;
                        environment_uuid = bp_project.projects.environment_uuid;
                    }
                    parent_uuid = this.mpiPatchingBp(mpi_uuid, bp_name, project_uuid, environment_uuid, profile_sysid, env_profile, env_sysid);
                    //parent_uuid = mpi_uuid;
                    gs.info('mpiPatchingBp parent_uuid:: ' + parent_uuid);

                } else {
                    var grBlueprint = new GlideRecord(table_name);
                    grBlueprint.addEncodedQuery('uuidLIKE' + parent_uuid);
                    grBlueprint.query();
                    if (grBlueprint.next()) {
                        mpi_uuid = grBlueprint.uuid + '';
                        bp_name = grBlueprint.name;
                        var bp_project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
                        bp_project.addEncodedQuery('catalog_item.sys_id=' + grBlueprint.sys_id);
                        bp_project.query();
                        while (bp_project.next()) {
                            project_uuid = bp_project.projects.uuid;
                            environment_uuid = bp_project.projects.environment_uuid;
                        }
                        parent_uuid = this.mpiPatchingBp(mpi_uuid, bp_name, project_uuid, environment_uuid, profile_sysid, env_profile, env_sysid);
                        //parent_uuid = mpi_uuid;
                        type = 'blueprints';
                        gs.info('mpiPatchingBp parent_uuid:: ' + parent_uuid);

                    }
                }
            }


            for (var pos = 0; pos &lt; dependency_array.length; pos++) {

                var var_json = pre_map[dependency_array[pos]];
                this.logger.debug("!!!!! var_json \n" + JSON.stringify(var_json));
                if (!var_json) {
                    this.logger.error('Dependent variable "' + dependency_array[pos] + '" not found.');
                    continue;
                }


                if (!var_json.requiresApiCall) {
                    if (var_json.data_type + "" == "LIST_SINGLE" || var_json.data_type + "" == 'LIST') {
                        var_json.options = this._substituteMacro(var_json.options.toString(), pre_map).split(',');
                        var_json.value = this._substituteMacro(var_json.value, pre_map); //2,33,44
                    } else
                        var_json.value = this._substituteMacro(var_json.value, pre_map);

                    if (var_json.depends_on.all_dep.length != 0 &amp;&amp; var_json.data_type + "" == "LIST" &amp;&amp; var_json.catalog_launch) {
                        this._insertIntoOptions(var_json);
                    }
                    if (str.length == 0 || ((str.length &gt; 0 &amp;&amp; str.indexOf(var_json.name) != -1) &amp;&amp; var_json.depends_on.all_dep.length != 0))
                        post_value_map[dependency_array[pos]] = var_json;
                    continue;
                }
                //	if(!var_json.value){
                if (str.length == 0 || (str.length &gt; 0 &amp;&amp; str.indexOf(var_json.name) != -1)) {
                    var var_uuid = var_json.uuid;

                    var options = {
                        "state": "",
                        "values": []
                    };

                    var request_body = JSON.stringify({
                        "requestId": "",
                        "overridden_field": this._createOverrideVarBody(pre_map, var_json)
                    });

                    var sendValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', request_body + "");

                    if (!sendValuesBody) {
                        continue;
                    }
                    var parsedSendValueBody = JSON.parse(sendValuesBody.getBody());
                    var valPollBody = {
                        "requestId": parsedSendValueBody.request_id,
                        "trlId": parsedSendValueBody.trl_id
                    };

                    var getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));


                    if (!getValuesBody) {

                        continue;
                    }
                    var parsedValueBody = JSON.parse(getValuesBody.getBody());
                    var execState = parsedValueBody.state + "";


                    while (execState == 'RUNNING' || execState == 'running') {

                        getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));

                        parsedValueBody = JSON.parse(getValuesBody.getBody());
                        execState = parsedValueBody.state + "";
                    }

                    gs.info('API Parameters ::Type: ' + type + ' parent_uuid: ' + parent_uuid + ' var_uuid: ' + var_uuid);

                    if (parsedValueBody.state == 'SUCCESS') {
                        var_json.state = parsedValueBody.state;
                        var_json.default_value = var_json.value + "";
                        var_json.value = [];
                        for (var i in parsedValueBody.values)
                            var_json.value[i] = parsedValueBody.values[i];
                    } else {

                        var_json.state = parsedValueBody.state;

                        var_json.error = [];
                        for (var j in parsedValueBody.message_list)
                            var_json.error[j] = parsedValueBody.message_list[j].message;
                    }

                    //if(str.length == 0 || ( str.length &gt; 0  &amp;&amp; str.indexOf(var_json.name) != -1))
                    post_value_map[dependency_array[pos]] = var_json;
                }
            }

            gs.info("Post Value Map :: " + JSON.stringify(post_value_map));
            return JSON.stringify(post_value_map);

        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.getHttpValues:" + e);
        }
    },



    getSubnet: function(catalog) {
        try {
            var clusterJson = {};
            var catalogSysid;
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getSubnet");
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addQuery('item_name', catalog);
            gr.query();
            if (gr.next()) {
                var grProject = new GlideRecord(this.appUtil.configuration.table.Project + '');
                grProject.addQuery('sys_id', gr.project + '');
                grProject.query();
                if (grProject.next()) {
                    if (grProject.subnet + '' != '') {
                        var subnetList = grProject.subnet.split(',');
                        for (var x in subnetList) {
                            var grSubnet = new GlideRecord(this.appUtil.configuration.table.subnet + '');
                            grSubnet.addQuery('sys_id', subnetList[x]);
                            grSubnet.query();
                            if (grSubnet.next()) {
                                if (!clusterJson[grSubnet.cluster_name + '']) {
                                    clusterJson[grSubnet.cluster_name + ''] = {};
                                    clusterJson[grSubnet.cluster_name + '']['uuid'] = grSubnet.cluster_uuid + '';
                                    clusterJson[grSubnet.cluster_name + '']['subnet'] = {};
                                }

                                clusterJson[grSubnet.cluster_name + '']['subnet'][grSubnet.uuid + ''] = grSubnet.name + '';
                            }

                        }
                    }
                }

            }
            /*setting session*/
            var grCat = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
            grCat.addQuery('sys_id', catalog);
            grCat.query();
            if (grCat.next()) {
                var gr = new GlideRecord('item_option_new');
                gr.addQuery('cat_item.name', grCat.name + '');
                gr.query();
                var catalog_clusterJSON = {};
                while (gr.next()) {
                    if ((gr.name + '').endsWith('cluster_name') &amp;&amp; gr.question_text == 'Cluster Name') {
                        catalog_clusterJSON[gr.sys_id + ''] = {};
                        catalog_clusterJSON[gr.sys_id + '']['name'] = gr.name + '';
                        catalog_clusterJSON[gr.sys_id + '']['label'] = gr.question_text + '';
                        catalog_clusterJSON[gr.sys_id + '']['value'] = gr.default_value + '';
                    }
                }

                for (var k in catalog_clusterJSON) {
                    var serviceName = (catalog_clusterJSON[k].name + '').slice(0, (catalog_clusterJSON[k].name).length - 12);
                    catalog_clusterJSON[k]['nics'] = {};
                    var gr = new GlideRecord('item_option_new');
                    gr.addQuery('cat_item.name', grCat.name + '');
                    gr.query();
                    while (gr.next()) {
                        if ((gr.name + '').indexOf(serviceName) != -1 &amp;&amp; (gr.name + '').indexOf('_nic_') != -1) {
                            catalog_clusterJSON[k]['nics'][gr.sys_id + ''] = gr.name + '';
                        }
                    }
                }
            }

            /**/


            var catNicJson = {
                "catalog_data": catalog_clusterJSON,
                "cluster_info": clusterJson
            };
            return (JSON.stringify(catNicJson));

        } catch (e) {
            this.logger.error("Inside Nutanix_FetchConfigureSettingDropdown.getSubnet." + e);
        }
    },

    getNutanixSubnetList: function(projects) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getNutanixSubnetList.");
            var subnetListJSON = {};
            var project_array = projects.split(',');
            var project_subnet = [];
            for (var i = 0; i &lt; project_array.length; i++) {
                var projectSubnet = new GlideRecord(this.appUtil.configuration.table.Project);
                if (projectSubnet.get(project_array[i] + '')) {
                    if (projectSubnet.subnet != '') {
                        var subnetList = projectSubnet.subnet.split(',');
                        for (var k in subnetList) {
                            if ((project_subnet.indexOf(subnetList[k])) == -1)
                                project_subnet.push(subnetList[k]);
                        }
                    }
                }
            }

            for (var j in project_subnet) {
                var subnetListGR = new GlideRecord(this.appUtil.configuration.table.subnet);
                subnetListGR.addQuery('sys_id', subnetList[j] + '');
                subnetListGR.query();
                if (subnetListGR.next()) {
                    subnetListJSON[subnetListGR.uuid + ''] = {
                        "name": subnetListGR.name + '',
                        "cluster_name": subnetListGR.cluster_name + '',
                        "cluster_uuid": subnetListGR.cluster_uuid + ''
                    };
                }
            }

            return subnetListJSON;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getNutanixSubnetList. Error:- " + e);
        }
    },

    getServiceVariableDetails: function(projects, blueprint, profiles, type, bpType) {

        try {
            var subnet_info = this.getNutanixSubnetList(projects);
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails.");
            var project_array = projects.split(',');
            var profile_array = profiles.split(',');
            var project = project_array[0];
            var profile = profile_array[0];

            var variables = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
            if (variables.get(profile)) {
                this.logger.info("Fetching variables associated with profile " + variables.name);
            }
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profile);
            gr.addQuery('catalog_item', blueprint);
            gr.addQuery('isprofilevariable', false);
            gr.orderBy('variable.order');
            gr.query();

            var answer = {};

            var i = 0;

            while (gr.next()) {

                if (!answer[gr.service_name.name + ''])
                    answer[gr.service_name.name + ''] = {};

                var categoryName = gr.category_name.name + '';

                if (gr.category_name.name + '' == gr.variable.name + '') {

                    if (!answer[gr.service_name.name + ''][gr.category_name.name + ''])
                        answer[gr.service_name.name + ''][gr.category_name.name + ''] = {};

                    if (bpType == "published" &amp;&amp; type == "new") {

                        var ans = (this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + ''));
                        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        answer[gr.service_name.name + ''][gr.category_name.name + '']['new_' + gr.sys_id + ''] = (ans) ? JSON.parse(ans) : [];
                        answer[gr.service_name.name + ''][gr.category_name.name + '']['new_' + gr.sys_id + ''].notCmplx = false;


                    } else {
                        answer[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''] = (gr.default_value + '') ? JSON.parse(gr.default_value + '') : {};
                        answer[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].notCmplx = false;
                    }

                } else {

                    /*if (gr.is_hidden == true)
                        continue;*/


                    if (!answer[gr.service_name.name + ''][gr.category_name.name + ''])
                        answer[gr.service_name.name + ''][gr.category_name.name + ''] = {};
                    var catname = (gr.category_name.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var varname = (gr.variable.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var default_value = "";
                    var runtime_config = gr.runtime_config + '';
                    var isdisabled = gr.isdisabled + '';
                    var ans, parsedAns;
                    if (catname == "ssh_keys" &amp;&amp; bpType == "published") {
                        var hasKey;
                        var gr_ssh = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                        gr_ssh.addQuery('application_profile', profile);
                        gr_ssh.addQuery('catalog_item', blueprint);
                        gr_ssh.addQuery('isprofilevariable', false);
                        gr_ssh.addQuery('variable.name', 'CONTAINS', 'key_0');
                        gr_ssh.orderBy('variable.order');
                        gr_ssh.query();
                        if (gr_ssh.next()) {
                            hasKey = "true";
                        }
                        if (hasKey != "true") {
                            ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '', "true");
                            parsedAns = (ans) ? JSON.parse(ans) : {};
                            answer[gr.service_name.name + ''][gr.category_name.name + ''] = parsedAns;
                        }

                    }
                    if ((!gr.default_value) &amp;&amp; bpType == "published") {
                        ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '');
                        parsedAns = (ans) ? JSON.parse(ans) : "";
                        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        if (parsedAns) {
                            default_value = parsedAns.value + '';
                            var isSupported = (default_value + '' == 'Cloud-init' || default_value + '' == 'Sysprep' || (varname + '').startsWith('key_') || (this.disabledFields.includes(varname) &amp;&amp; varname + '' != 'name' &amp;&amp; varname + '' != 'type')) ? false : true;
                            //runtime_config = (parsedAns.runtime+'') ? parsedAns.runtime+'' : gr.runtime_config+'';
                            runtime_config = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? false : (parsedAns.runtime + '') ? parsedAns.runtime + '' : gr.runtime_config + '';
                            isdisabled = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? true : (runtime_config + '' == 'true') ? false : true; // ((default_value+'').indexOf('@@') != -1 || (this.disabledFields.includes(varname) &amp;&amp; varname+''!='name' &amp;&amp; varname+''!='type')) ? true : (runtime_config+'' == 'true') ? false : true;
                            // 							
                        }
                    }

                    /*Advanced Variable*/
                    var opt = [];
                    if (gr.variable.type + '' == 5 &amp;&amp; gr.isservicevariable == true) {
                        var optionRec = new GlideRecord("question_choice");
                        optionRec.addQuery('question', gr.variable + '');
                        optionRec.query();
                        while (optionRec.next()) {

                            opt.push(optionRec.value + '');

                        }


                    } else if (gr.variable.type + '' == 21 &amp;&amp; gr.isservicevariable == true) {
                        if (gr.variable.getRefRecord()) {
                            var varRefRec = gr.variable.getRefRecord().reference_qual + '';
                            varRefRec = varRefRec.substr(9, varRefRec.length);
                            var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                            optionRec.addQuery('variable', varRefRec);
                            optionRec.query();
                            while (optionRec.next()) {

                                opt.push(optionRec.value + '');
                            }
                        }


                    }

                    answer[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''] = {
                        'name': gr.variable.name + '',
                        'question_text': gr.variable.question_text + '',
                        'value': (gr.default_value + '') ? gr.default_value + '' : default_value,
                        'runtime_config': (gr.default_value + '') ? gr.runtime_config + '' : runtime_config,
                        'type': gr.variable.type + '',
                        'isprofilevariable': gr.isprofilevariable + '',
                        'uuid': gr.uuid + '',
                        'isdisabled': (gr.default_value + '') ? gr.isdisabled + '' : isdisabled,

                        'isSupported': gr.issupported + '',
                        'isservicevariable': gr.isservicevariable + '',

                        'notCmplx': true,

                        'val_type': gr.value_type + '',
                        'description': gr.variable.help_text + '',
                        'mandatory': gr.variable.mandatory + '',
                        'regex': gr.field_regex + '',
                        'options': opt,
                        'data_type': gr.data_type + '',
                        'serviceField': (gr.isprofilevariable + '' == 'false' &amp;&amp; gr.isservicevariable + '' == 'false') ? true : false,
                        "field_json": (gr.isservicevariable + '' == 'true') ? this.appUtil.getMacroDependencies(gr.field_json + "") : {},
                        "field": (gr.isservicevariable + '' == 'true') ? gr.field_json + "" : "{}",
                        "isHidden": gr.is_hidden + ""
                    };
                }
                i++;
            }

            this.logger.debug("Final answer" + i + " :: " + JSON.stringify(answer));
            var returnJSON = {};
            returnJSON['service_configuration'] = answer;
            returnJSON['subnet_list'] = subnet_info;
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails. return : " + JSON.stringify(returnJSON));
            return JSON.stringify(returnJSON);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getServiceVariableDetails. Error:- " + e);
        }

    },

    getVariablePatchedValue: function(type, value, grSysid, varname, categoryName, categoryNameText, sshFlag) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getVariablePatchedValue for variable :: " + varname + ",Category Name :: " + categoryNameText + ",SSh flag :: " + sshFlag);
            if ((!value || (varname == categoryName) || categoryNameText == "SSH Keys")) {
                var ans = {
                    "value": "",
                    "runtime": false
                };
                var session = gs.getSession();
                var bpResponse1 = JSON.parse(session.getClientData('Cloned_bp_response'));
                for (var p = 0; p &lt; bpResponse1.length; p++) {
                    var bpResponse = bpResponse1[p];

                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                    gr.addQuery("sys_id", grSysid);
                    gr.query();
                    if (gr.next()) {
                        var profileUUID = "";
                        for (var i in bpResponse) {
                            var serviceJSON = bpResponse[i];
                            if (serviceJSON.name.toLowerCase() + '' == gr.service_name.name + '') {

                                for (var k in serviceJSON.profile) {
                                    var profile = serviceJSON.profile[k];
                                    if (profile.name == gr.application_profile.name + '') {
                                        profileUUID = profile.uuid + '';
                                        break;
                                    }
                                }

                                if (serviceJSON.substrate[profileUUID]) {
                                    this.logger.debug("Patching :: Found profile :: " + gr.application_profile.name + '');
                                    var substrateJSON = serviceJSON.substrate[profileUUID];
                                    var categoryJSON = "";
                                    var insideCategoryJSON = "";
                                    switch (gr.category_name.question_text + '') {

                                        case "Connection":
                                            categoryJSON = "readiness_probe";
                                            break;

                                        case "VM Configuration": //categoryJSON = "create_spec";
                                            //break;

                                        case "Storage": //categoryJSON = "create_spec";
                                            //break;
                                        case "Network Adapters":

                                        case "Network Profiles":

                                        case "OS Profile":

                                        case "OS Profile Script":

                                        case "Management Optional":

                                        case "Storage Profile":

                                        case "Disks":

                                        case "Networking":

                                        case "Categories":

                                        case "API ACCESS":

                                        case "Blank Disks":

                                        case "Images":

                                        case "SSH Keys":

                                        case "Storage Profile Data Disks":

                                        case "Guest Customization":

                                        case "VDisks":
                                            categoryJSON = "create_spec";
                                            break;

                                    }
                                    var runtime = "";
                                    var field;
                                    var fieldName;
                                    var editables = substrateJSON.editables[categoryJSON];
                                    for (var l in substrateJSON) {

                                        if (l + '' == categoryJSON) {

                                            //this.logger.debug("Patching :: Category :: "+categoryJSON);

                                            if (categoryJSON == "create_spec") {
                                                fieldName = varname.substring(serviceJSON.name.length + 1);
                                                // 												if((categoryName) &amp;&amp; categoryName == "categories"){
                                                // 													var ansCat = {};var q=1;
                                                // 													var edit = (editables.categories) ? editables.categories : "false";
                                                // 													var disable = (edit == "true") ?  "false" : "true";
                                                // 													for( var b in substrateJSON[l].categories ){

                                                // 														ansCat['category_'+q] =	{
                                                // 																				  "name":  serviceJSON.name+'_'+b,
                                                // 																				  "question_text": b+'',
                                                // 																				  "value": substrateJSON[l].categories[b],
                                                // 																				  "runtime_config": edit,
                                                // 																				  "type": "6",
                                                // 																				  "isprofilevariable": "false",
                                                // 																				  "uuid": "",
                                                // 																				  "isdisabled": disable,
                                                // 																				  "notCmplx": true
                                                // 																				};
                                                // 													}

                                                // 													return JSON.stringify(ansCat);
                                                // 												}
                                                if (categoryNameText == "VM Configuration") {
                                                    for (var b in substrateJSON[l]) {
                                                        if (b == fieldName) {
                                                            ans.value = (substrateJSON[l][b]) ? substrateJSON[l][b] : '';
                                                            if (fieldName != "template" &amp;&amp; fieldName != "datastore" &amp;&amp; fieldName != "host") ans.runtime = (editables[b]) ? (editables[b]) : false;
                                                            return JSON.stringify(ans);
                                                        }
                                                    }
                                                }

                                                for (var s in substrateJSON[l].resources) {

                                                    var varServiceName = serviceJSON.name.toLowerCase() + '_' + s + '';

                                                    if (categoryNameText == "SSH Keys" &amp;&amp; sshFlag == "true" &amp;&amp; s == "sshKeys") {

                                                        var ansSSH = {};
                                                        var q = 0;
                                                        var edit = "false";
                                                        var disable = "true";
                                                        for (var b in substrateJSON[l].resources.sshKeys) {

                                                            for (var w in editables.resources.sshKeys) {
                                                                if (b == w)
                                                                    edit = editables.resources.sshKeys[w] + '';
                                                            }
                                                            ansSSH['new_ssh_key_' + q] = {
                                                                "name": serviceJSON.name + '_key_' + b,
                                                                "question_text": 'key ' + b + '',
                                                                "value": substrateJSON[l].resources.sshKeys[b],
                                                                "runtime_config": edit,
                                                                "type": "6",
                                                                "isprofilevariable": "false",
                                                                "uuid": "",
                                                                "isdisabled": (edit == "true") ? "false" : "true",
                                                                "isSupported": "true",
                                                                "isservicevariable": "false",
                                                                "notCmplx": true
                                                            };
                                                            q++;

                                                        }

                                                        return JSON.stringify(ansSSH);
                                                    } else if (categoryNameText == "Management Optional" &amp;&amp; s == "guestCustomization") {
                                                        if (fieldName == "startup_script") {
                                                            ans.value = (substrateJSON[l].resources[s].startupScript) ? substrateJSON[l].resources[s].startupScript : '';
                                                            ans.runtime = (editables.resources.guestCustomization &amp;&amp; editables.resources.guestCustomization.startupScript) ? editables.resources.guestCustomization.startupScript : false;
                                                            return JSON.stringify(ans);
                                                        } else if (fieldName == "security_groups") {
                                                            var groups = (substrateJSON[l].resources.tags.items &amp;&amp; substrateJSON[l].resources.tags.items[0]) ? substrateJSON[l].resources.tags.items[0] : '';
                                                            for (var p = 1; p &lt; substrateJSON[l].resources.tags.items.length; p++)
                                                                groups = groups + ',' + substrateJSON[l].resources.tags.items[i];
                                                            ans.value = groups;
                                                            ans.runtime = (editables.resources.tags &amp;&amp; editables.resources.tags.items) ? editables.resources.tags.items : false;

                                                            return JSON.stringify(ans);
                                                        }

                                                    } else if (categoryNameText == "API ACCESS" &amp;&amp; s == "serviceAccounts") {
                                                        ans.value = (substrateJSON[l].resources[s][0].email) ? substrateJSON[l].resources[s][0].email : "";
                                                        ans.runtime = (editables.resources.serviceAccounts[0] &amp;&amp; editables.resources.serviceAccounts[0].email) ? editables.resources.serviceAccounts[0].email : false;
                                                        return JSON.stringify(ans);
                                                    } else if (categoryNameText == "Disks" &amp;&amp; s == "disks") {
                                                        for (var j in substrateJSON[l].resources[s]) {
                                                            substrateJSON[l].resources[s][j].runtime = {};
                                                            substrateJSON[l].resources[s][j].disabled = {};
                                                            for (var x in editables.resources.disks)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s][j].runtime = (editables.resources.disks[x]) ? (editables.resources.disks[x]) : {};
                                                                    substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                                }
                                                        }

                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (categoryNameText == "Networking" &amp;&amp; s == "networkInterfaces") {
                                                        for (var j in substrateJSON[l].resources[s]) {
                                                            substrateJSON[l].resources[s][j].runtime = {};
                                                            substrateJSON[l].resources[s][j].disabled = {};
                                                            for (var x in editables.resources.networkInterfaces)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s][j].runtime = (editables.resources.networkInterfaces[x]) ? (editables.resources.networkInterfaces[x]) : {};
                                                                    substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                                }
                                                        }
                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (categoryNameText == "Blank Disks" &amp;&amp; s == "blankDisks") {
                                                        for (var j in substrateJSON[l].resources[s]) {
                                                            substrateJSON[l].resources[s][j].runtime = {};
                                                            substrateJSON[l].resources[s][j].disabled = {};
                                                            for (var x in editables.resources.blankDisks)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s][j].runtime = (editables.resources.blankDisks[x]) ? editables.resources.blankDisks[x] : {};
                                                                    substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                                }
                                                        }

                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (categoryNameText == "Images" &amp;&amp; s == "disk_list") {
                                                        var bootIndex = (substrateJSON[l].resources.boot_config &amp;&amp; substrateJSON[l].resources.boot_config.boot_device &amp;&amp; substrateJSON[l].resources.boot_config.boot_device.disk_address &amp;&amp; substrateJSON[l].resources.boot_config.boot_device.disk_address.device_index + '') ? substrateJSON[l].resources.boot_config.boot_device.disk_address.device_index : -1;
                                                        for (var j in substrateJSON[l].resources[s]) {
                                                            substrateJSON[l].resources[s][j].runtime = {};
                                                            substrateJSON[l].resources[s][j].disabled = {};
                                                            substrateJSON[l].resources[s][j].bootable = (bootIndex == j) ? true : false;
                                                            for (var x in editables.resources.disk_list)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s][j].runtime = (editables.resources.disk_list[x]) ? editables.resources.disk_list[x] : {};
                                                                    substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                                }
                                                        }

                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (categoryNameText == "Storage Profile Data Disks" &amp;&amp; s == "storage_profile") {
                                                        for (var j in substrateJSON[l].resources[s].data_disk_list) {
                                                            substrateJSON[l].resources[s].data_disk_list[j].runtime = {};
                                                            substrateJSON[l].resources[s].data_disk_list[j].disabled = {};
                                                            for (var x in editables.resources.storage_profile.data_disk_list)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s].data_disk_list[j].runtime = (editables.resources.storage_profile &amp;&amp; editables.resources.storage_profile.data_disk_list[x]) ? editables.resources.storage_profile.data_disk_list[x] : {};
                                                                    substrateJSON[l].resources[s].data_disk_list[j].disabled = substrateJSON[l].resources[s].data_disk_list[j].runtime;
                                                                }
                                                        }

                                                        return JSON.stringify(substrateJSON[l].resources[s].data_disk_list);
                                                    } else if (categoryNameText == "OS Profile" &amp;&amp; s == "os_profile") {
                                                        for (var j in substrateJSON[l].resources[s].secrets) {
                                                            substrateJSON[l].resources[s].secrets[j].runtime = {};
                                                            substrateJSON[l].resources[s].secrets[j].disabled = {};
                                                            for (var x in editables.resources.os_profile.secrets)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s].secrets[j].runtime = (editables.resources.os_profile &amp;&amp; editables.resources.os_profile.secrets[x]) ? editables.resources.os_profile.secrets[x] : {};
                                                                    substrateJSON[l].resources[s].secrets[j].disabled = substrateJSON[l].resources[s].secrets[j].runtime;

                                                                }
                                                        }

                                                        return JSON.stringify(substrateJSON[l].resources[s].secrets);
                                                    } else if (categoryNameText == "OS Profile Script" &amp;&amp; s == "os_profile") {

                                                        ans.value = (substrateJSON[l].resources[s].linux_config &amp;&amp; substrateJSON[l].resources[s].linux_config.custom_data + '') ? substrateJSON[l].resources[s].linux_config.custom_data + '' : "";
                                                        ans.runtime = (editables.resources.os_profile &amp;&amp; editables.resources.os_profile.linux_config &amp;&amp; editables.resources.os_profile.linux_config.custom_data) ? editables.resources.os_profile.linux_config.custom_data : false;

                                                        return JSON.stringify(ans);

                                                    } else if (categoryNameText == "Guest Customization" &amp;&amp; s == "guest_customization") {
                                                        varname = varname.substring(serviceJSON.name.length + 1);
                                                        for (var j in substrateJSON[l].resources[s].linux_data) {
                                                            if (varname == "dns_search_path" &amp;&amp; j == varname) {
                                                                ans.value = (substrateJSON[l].resources[s].linux_data.dns_search_path[0] + '') ? substrateJSON[l].resources[s].guest_customization.linux_data.dns_search_path[0] + '' : "";
                                                                ans.runtime = (editables.resources.guest_customization &amp;&amp; editables.resources.guest_customization.linux_data &amp;&amp; editables.resources.guest_customization.linux_data.dns_search_path[0]) ? editables.resources.guest_customization.linux_data.dns_search_path[0] : false;
                                                                return JSON.stringify(ans);
                                                            } else if (j == varname) {
                                                                ans.value = substrateJSON[l].resources[s].linux_data[j] + '';
                                                                for (var x in editables.resources.guest_customization.linux_data) {
                                                                    if (x == varname) {
                                                                        ans.runtime = editables.resources.guest_customization.linux_data[x] + '';
                                                                        return JSON.stringify(ans);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (fieldName == "script") {

                                                            ans.value = (substrateJSON[l].resources[s].cloud_init &amp;&amp; substrateJSON[l].resources[s].cloud_init.user_data) ? substrateJSON[l].resources[s].cloud_init.user_data : ((substrateJSON[l].resources[s].sysprep &amp;&amp; substrateJSON[l].resources[s].sysprep.unattend_xml) ? substrateJSON[l].resources[s].sysprep.unattend_xml : (substrateJSON[l].resources[s].cloud_init) ? substrateJSON[l].resources[s].cloud_init : '');
                                                            ans.runtime = (editables.resources.guest_customization &amp;&amp; editables.resources.guest_customization.cloud_init) ? (editables.resources.guest_customization.cloud_init) : false;
                                                            return (JSON.stringify(ans));
                                                        } else if (fieldName == "install_type") {
                                                            ans.value = (substrateJSON[l].resources[s].sysprep &amp;&amp; substrateJSON[l].resources[s].sysprep.install_type) ? substrateJSON[l].resources[s].sysprep.install_type : "";
                                                            ans.runtime = false;
                                                            return (JSON.stringify(ans));
                                                        } else if (fieldName == "type") {
                                                            ans.value = (substrateJSON[l].resources[s].sysprep) ? 'Sysprep' : 'Cloud-init';
                                                            ans.runtime = false;
                                                            return (JSON.stringify(ans));
                                                        }
                                                    } else if (varname == (serviceJSON.name.toLowerCase() + '_' + 'storage') &amp;&amp; s == "block_device_map") {

                                                        substrateJSON[l].resources[s].root_disk.runtime = "";
                                                        substrateJSON[l].resources[s].root_disk.disabled = "";
                                                        substrateJSON[l].resources[s].root_disk.runtime = (editables.resources.block_device_map.root_disk.size_gb) ? editables.resources.block_device_map.root_disk.size_gb + '' : 'false';
                                                        substrateJSON[l].resources[s].root_disk.disabled = substrateJSON[l].resources[s].root_disk.runtime;
                                                        for (var j in substrateJSON[l].resources[s].data_disk_list) {

                                                            substrateJSON[l].resources[s].data_disk_list[j].runtime = 'false';
                                                            substrateJSON[l].resources[s].data_disk_list[j].disabled = 'false';
                                                            if (editables &amp;&amp; editables.resources &amp;&amp; editables.resources.block_device_map &amp;&amp; editables.resources.block_device_map.data_disk_list[j] &amp;&amp; editables.resources.block_device_map.data_disk_list[j].size_gb) {
                                                                var runtime_data = editables.resources.block_device_map.data_disk_list[j].size_gb;
                                                                substrateJSON[l].resources[s].data_disk_list[j].runtime = (runtime_data) ? runtime_data + '' : 'false';
                                                                substrateJSON[l].resources[s].data_disk_list[j].disabled = substrateJSON[l].resources[s].data_disk_list[j].runtime;
                                                            }
                                                        }
                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (varname == (serviceJSON.name.toLowerCase() + '_vdisks') &amp;&amp; s == "disk_list") {
                                                        for (var j in substrateJSON[l].resources[s]) {
                                                            substrateJSON[l].resources[s][j].runtime = {};
                                                            substrateJSON[l].resources[s][j].disabled = {};
                                                            for (var x in editables.resources.disk_list) {
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s][j].runtime = editables.resources.disk_list[j];
                                                                    substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                                }
                                                            }
                                                        }
                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (varname == (serviceJSON.name.toLowerCase() + '_network_adapters') &amp;&amp; s == "nic_list") {
                                                        for (var j in substrateJSON[l].resources[s]) {
                                                            substrateJSON[l].resources[s][j].runtime = {};
                                                            substrateJSON[l].resources[s][j].disabled = {};
                                                            for (var x in editables.resources.nic_list)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s][j].runtime = (editables.resources.nic_list[j]) ? (editables.resources.nic_list[j]) : {};
                                                                    substrateJSON[l].resources[s][j].disabled = substrateJSON[l].resources[s][j].runtime;
                                                                }
                                                        }
                                                        return JSON.stringify(substrateJSON[l].resources[s]);
                                                    } else if (categoryNameText == "Storage Profile" &amp;&amp; s == "storage_profile") {
                                                        for (var j in substrateJSON[l].resources[s].image_details) {
                                                            varServiceName = serviceJSON.name.toLowerCase() + '_' + j;
                                                            if (varname == varServiceName) {
                                                                ans.value = (substrateJSON[l].resources[s].image_details[j]) ? (substrateJSON[l].resources[s].image_details[j] + '') : "";
                                                                ans.runtime = (editables.resources.storage_profile.image_details &amp;&amp; editables.resources.storage_profile.image_details[j]) ? (editables.resources.storage_profile.image_details[j]) : false;
                                                                if ((varname.indexOf("use_custom_image") != -1) &amp;&amp; !ans.value) ans.value = "false";
                                                                return JSON.stringify(ans);
                                                            }

                                                        }
                                                        for (var j in substrateJSON[l].resources[s].os_disk_details) {
                                                            varServiceName = serviceJSON.name.toLowerCase() + '_' + substrateJSON[l].resources[s].image_details[j];
                                                            if (varname == varServiceName) {
                                                                ans.value = (substrateJSON[l].resources[s].os_disk_details[j]) ? (substrateJSON[l].resources[s].os_disk_details[j]) : "";
                                                                ans.runtime = (editables.resources.storage_profile.os_disk_details[j]) ? (editables.resources.storage_profile.os_disk_details[j]) : false;
                                                                return JSON.stringify(ans);
                                                            }
                                                        }
                                                        if (varname.indexOf("use_managed_disks") != -1) {
                                                            ans.value = (substrateJSON[l].resources[s].is_managed) ? (substrateJSON[l].resources[s].is_managed) : "";
                                                            ans.runtime = (editables.resources.storage_profile.is_managed) ? (editables.resources.storage_profile.is_managed) : false;
                                                            return JSON.stringify(ans);
                                                        }
                                                    } else if (categoryNameText == "Network Profiles" &amp;&amp; s == "nw_profile") {
                                                        for (var j in substrateJSON[l].resources[s].nic_list) {
                                                            substrateJSON[l].resources[s].nic_list[j].runtime = {};
                                                            substrateJSON[l].resources[s].nic_list[j].disabled = {};
                                                            for (var x in editables.resources.nw_profile.nic_list)
                                                                if (x == j) {
                                                                    substrateJSON[l].resources[s].nic_list[j].runtime = (editables.resources.nw_profile.nic_list[j]) ? editables.resources.nw_profile.nic_list[j] : {};
                                                                    substrateJSON[l].resources[s].nic_list[j].disabled = substrateJSON[l].resources[s].nic_list[j].runtime;
                                                                }
                                                        }
                                                        return JSON.stringify(substrateJSON[l].resources[s].nic_list);
                                                    } else if (varname + '' == varServiceName + '') {
                                                        field = substrateJSON[l].resources[s];
                                                        if (!(field.constructor == Object || field.constructor == Array)) {
                                                            ans.value = substrateJSON[l].resources[s] + '';
                                                            ans.runtime = this.checkEditable(editables, varname, categoryJSON, serviceJSON.name.toLowerCase() + '_') + '';
                                                            return JSON.stringify(ans);
                                                        } else if (s == "security_group_list") {
                                                            var sec = field[0].security_group_id + '';
                                                            for (var m = 1; m &lt; field.length; m++) {
                                                                sec += "," + field[m].security_group_id + '';
                                                            }
                                                            ans.value = sec + '';
                                                            ans.runtime = this.checkEditable(editables, varname, categoryJSON, serviceJSON.name.toLowerCase() + '_') + '';
                                                            return JSON.stringify(ans);
                                                        }
                                                    } else if (categoryNameText == "VM Configuration" &amp;&amp; s == "hw_profile" &amp;&amp; varname.indexOf("hardware_profile") != -1) {
                                                        ans.value = (substrateJSON[l].resources[s].vm_size) ? substrateJSON[l].resources[s].vm_size : '';
                                                        ans.runtime = (editables.resources.hw_profile.vm_size) ? (editables.resources.hw_profile.vm_size) : false;
                                                        return JSON.stringify(ans);
                                                    } else if (categoryNameText == "SSH Keys" &amp;&amp; fieldName == "block_project_wide_ssh_key" &amp;&amp; s == "metadata" &amp;&amp; sshFlag != "true") {
                                                        var blockValue = false;
                                                        for (var data in substrateJSON[l].resources[s]) {
                                                            if (substrateJSON[l].resources[s][data].key + '' == 'block-project-ssh-keys') {
                                                                blockValue = substrateJSON[l].resources[s][data].value + '';
                                                                ans.runtime = (editables.resources.metadata.items[data]) ? (editables.resources.metadata.items[data]) : false;
                                                            }
                                                        }
                                                        ans.value = blockValue;
                                                        return JSON.stringify(ans);
                                                    }
                                                }
                                            } else if (categoryJSON == "readiness_probe") {
                                                for (var s in substrateJSON[l]) {
                                                    var varServiceName = serviceJSON.name.toLowerCase() + '_' + s;
                                                    if (varname + '' == varServiceName + '') {
                                                        ans.value = substrateJSON[l][s] + '';
                                                        if (varname.indexOf("disable_readiness_probe") != -1)
                                                            ans.value = (substrateJSON[l][s] == 'true') ? false : true;
                                                        ans.runtime = this.checkEditable(editables, varname, categoryJSON, serviceJSON.name.toLowerCase() + '_') + '';
                                                        return JSON.stringify(ans);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }
                }
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getVariablePatchedValue. Error:- " + e);
        }
    },
    //Ptaching of MPI
    //Ptaching of MPI
    mpiPatching: function(projects, blueprint) {

        var logger = new Nutanix_Calm_Logger();
        var utils = new Nutanix_Calm_Utils();
        var reqUtils = new Nutanix_RequestUtil();
        var blueprintTemplate = "";
        var catVariableBody = {};
        var bpVariablesJSON = {};
        var parseResp = {};

        try {
            logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mpiPatching.");

            var project = projects.split(',');
            project = project[0];

            var bp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
            bp.addQuery('sys_id', blueprint);
            bp.query();

            var mpi_uuid = (bp.next()) ? bp.uuid : "";

            var response = utils.makeCalmApiCall('GET', '/calm_marketplace_items/' + mpi_uuid);

            if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                response = JSON.parse(response.getBody());

                var environment_uuid = ' ';
                var project_uuid = '';

                var projectRecord = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                projectRecord.addQuery('sys_id', project);
                projectRecord.query();

                if (projectRecord.next()) {
                    project_uuid = projectRecord.uuid + '';
                    environment_uuid = projectRecord.environment_uuid + '';
                }

                var name = bp.name + '';
                var app_bp_name = ((name + GlideSecureRandomUtil.getSecureRandomString(8) + mpi_uuid).replaceAll('-', ' ').trim().replaceAll(' ', '_')).substring(0, 64);
                var tmpbody = {
                    "status": response.status.resources.app_blueprint_template.status,
                    "spec": response.spec.resources.app_blueprint_template.spec
                };

                var body = {
                    "api_version": "3.0", //response.api_version,
                    "metadata": {
                        "kind": "blueprint",
                        "project_reference": {
                            "kind": "project",
                            "uuid": project_uuid + ''
                        },
                        "categories": response.metadata.categories //changes
                    },
                    "spec": {
                        "description": response.spec.resources.app_blueprint_template.spec.description, //response.spec.description,
                        "app_blueprint_name": app_bp_name + '',
                        "source_marketplace_version": response.spec.resources.version, //"1.0.0", //changes
                        "source_marketplace_name": name + '',
                        "resources": response.spec.resources.app_blueprint_template.spec.resources

                        //reqUtils.makeResourceBody(tmpbody, tmpbody.status.resources, current)
                        //response.spec.resources.app_blueprint_template.spec.resources
                    }
                };

                body.spec.environment_uuid = environment_uuid + '';

                //gs.error("MPI payload send: "+JSON.stringify(body));
                //	return "MPI Launch Body "+JSON.stringify(body);

                var response = utils.makeCalmApiCall('POST', '/blueprints/marketplace_launch', JSON.stringify(body));
                // 			return "post marketplace launch  call "+response.getStatusCode();
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                    var session = gs.getSession();
                    session.putClientData('non_filtered_cloned_bp_response', response.getBody());

                    parseResp = JSON.parse(response.getBody());
                    blueprintTemplate = (parseResp.status.resources) ? parseResp.status.resources : "";
                    var clonedBpUuid = parseResp.metadata.uuid;

                    //gs.error("Patching : "+response.getBody());

                } else {
                    logger.error("API call to '/blueprints/marketplace_launch' failed with name : " + app_bp_name + ":-" + response.getBody());
                    //gs.error("Errorr :: "+(JSON.parseresponse.getBody()).message_list[0].message);
                    return JSON.stringify({
                        "errMess": JSON.parse(response.getBody()).message_list[0].message,
                        "status": false
                    });
                }

                var bpVariables = new Nutanix_CreateCatalogVariables();
                if (bp.template_type == "Single Vm") {

                    var service_body = [{
                        "uuid": "singleVm-default-service-uuid",
                        "name": "single_vm_configuration"
                    }];

                    catVariableBody = {
                        "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                        "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                        "service_definition_list": service_body,
                        "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                    };
                    bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                } else if (blueprintTemplate.package_definition_list &amp;&amp; blueprintTemplate.substrate_definition_list &amp;&amp; blueprintTemplate.app_profile_list &amp;&amp; blueprintTemplate.service_definition_list) {
                    catVariableBody = {
                        "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                        "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                        "service_definition_list": (blueprintTemplate.service_definition_list) ? blueprintTemplate.service_definition_list : "",
                        "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                    };

                    bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                }

                bpVariablesJSON.uuid = parseResp.metadata.uuid + '';
                bpVariablesJSON.name = parseResp.metadata.name + '';

                var session = gs.getSession();
                session.putClientData('Cloned_bp_response', JSON.stringify(bpVariablesJSON));
                var clientData = session.getClientData('Cloned_bp_response');
                logger.debug("MPI cloned Blueprint response ::" + clientData);
                return JSON.stringify({
                    "errMess": "Successfull",
                    "status": true
                }); //JSON.parse(clientData).uuid+'';
            } else {
                logger.error("API call to '/calm_marketplace_items/uuid' failed: " + response.getBody());
                var result = {
                    "errMess": (response.getBody()).message_list[0].message,
                    "status": false
                };
                return JSON.stringify(result);
            }
        } catch (e) {
            logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.mpiPatching. Error:- " + e);
            return "false";
        }
    },

    fetchBlueprints: function(projectUUID, blueprintType) {

        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchBlueprints.");

            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + '');
            gr.addQuery('projects.uuid', projectUUID);

            if (blueprintType == 'unpublished')
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            else
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));

            gr.orderBy('catalog_item.name');
            gr.query();

            var ans = {};
            var i = 0;

            while (gr.next()) {
                if ((blueprintType == 'unpublished' &amp;&amp; (gr.catalog_item.state + '' == 'ACTIVE' || gr.catalog_item.state + '' == 'published')) || (blueprintType != 'unpublished' &amp;&amp; (gr.catalog_item.state + '' == 'active' || gr.catalog_item.state + '' == 'published'))) {
                    ans[i] = {
                        'sys_id': gr.catalog_item + '',
                        'name': gr.catalog_item.name + '' + " " + gr.version + ''
                    };
                    i++;
                }
            }

            this.logger.debug("Fetched " + i + " blueprints.");

            return JSON.stringify(ans);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchBlueprints. Error:- " + e);
        }

    },

    fetchApplicationProfiles: function(blueprintSysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchApplicationProfiles.");

            var blueprint = new GlideRecord(this.appUtil.configuration.table.Blueprint + '');
            if (blueprint.get(blueprintSysId)) {
                this.logger.info("Fetching profiles associated with blueprint " + blueprint.name);
            }
            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
            gr.addQuery('catalog_item', blueprintSysId);
            gr.addQuery('state', 'active');
            //gr.addEncodedQuery('providersNOT LIKEaws^providersNOT LIKEazure^providersNOT LIKEgcp');
            gr.orderBy('application_profile.name');
            gr.query();

            var ans = {};
            var i = 0;
            while (gr.next()) {
                ans[i] = {
                    'sys_id': gr.application_profile + '',
                    'name': gr.application_profile.name + ''
                };
                i++;
            }

            this.logger.debug("Fetched " + i + " profiles.");

            return JSON.stringify(ans);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchApplicationProfiles. Error:- " + e);
        }
    },

    fetchProviderIcons: function(catSysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchProviderIcons.");

            var grBp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
            if (grBp.get(catSysId)) {
                var bpSysId = grBp.blueprint_name;
            }
            if (bpSysId != '') {
                var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
                gr.addQuery('catalog_item', bpSysId);
                gr.addQuery('state', 'active');
                gr.orderBy('application_profile.name');
                gr.query();

                var entities = [];
                var i = 0;
                while (gr.next()) {
                    entities[i] = {
                        'profile': gr.application_profile.name + '',
                        'providers': gr.providers + ''
                    };
                    i++;
                }

                this.logger.debug("Fetched " + i + " profiles.");

                return JSON.stringify(entities);
            } else {
                var grReq = new GlideRecord('sc_req_item');
                grReq.addQuery('sys_id', catSysId);
                grReq.query();
                if (grReq.next()) {
                    var grBp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
                    if (grBp.get(grReq.cat_item)) {
                        var bpSysId = grBp.blueprint_name;
                    }
                    if (bpSysId != '') {
                        var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
                        gr.addQuery('catalog_item', bpSysId);
                        gr.orderBy('application_profile.name');
                        gr.query();

                        var entities = [];
                        var i = 0;
                        while (gr.next()) {
                            entities[i] = {
                                'profile': gr.application_profile.name + '',
                                'providers': gr.providers + ''
                            };
                            i++;
                        }

                        this.logger.debug("Fetched " + i + " profiles.");

                        return JSON.stringify(entities);
                    }
                }
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchProviderIcons. Error:- " + e);
        }
    },

    getProfileVariableDetails: function(project, blueprint, profile) {

        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getProfileVariableDetails.");

            var variables = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
            if (variables.get(profile)) {
                this.logger.info("Fetching variables associated with profile " + variables.name);
            }

            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profile);
            gr.addQuery('catalog_item', blueprint);
            gr.addQuery('isprofilevariable', true);
            gr.orderBy('variable.name');
            gr.query();

            var answer = {};
            var i = 0;
            while (gr.next()) {

                /*if (gr.is_hidden == true)
                    continue;*/

                var opt = [];
                if (gr.variable.type + '' == 5) {
                    var optionRec = new GlideRecord("question_choice");
                    optionRec.addQuery('question', gr.variable + '');
                    optionRec.query();
                    while (optionRec.next()) {

                        opt.push(optionRec.value + '');

                    }

                } else if (gr.variable.type + '' == 21) {
                    if (gr.variable.getRefRecord()) {
                        var varRefRec = gr.variable.getRefRecord().reference_qual + ''
                        varRefRec = varRefRec.substr(9, varRefRec.length);
                        var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                        optionRec.addQuery('variable', varRefRec);
                        optionRec.query();
                        while (optionRec.next()) {
                            opt.push(optionRec.value + '');
                        }
                    }

                }
                // 				else if(gr.variable.type+'' == 10 || gr.variable.type+'' == 9){
                // 					var dtVal = gr.default_value+'';
                // 					if( gr.variable.type+'' == 9 ){
                // 						var gdt = new GlideDate() ;
                // 						gdt.setValue(dtVal);
                // 						gr.default_value = gdt.getByFormat("yyyy-MM-dd");
                // 					}

                // 					else{
                // 						var gdt = new GlideDateTime() ;
                // 						gdt.setValue(dtVal);
                // 						gr.default_value = gdt.getDate().getByFormat("yyyy-MM-dd")+' '+gdt.getTime().getByFormat("HH:mm:ss");
                // 					}

                // 				}

                answer[gr.sys_id + ''] = {
                    'name': gr.variable.name + '',
                    'question_text': gr.variable.question_text + '',
                    'value': gr.default_value + '',
                    'runtime_config': gr.runtime_config + '',
                    'type': gr.variable.type + '',
                    'isprofilevariable': gr.isprofilevariable + '',
                    'uuid': gr.uuid + '',
                    'isdisabled': gr.isdisabled + '',
                    "val_type": gr.value_type + '',
                    "description": gr.variable.help_text + '',
                    "mandatory": gr.variable.mandatory + '',
                    "regex": gr.field_regex + '',
                    "options": opt,
                    "data_type": gr.data_type + '',
                    "field_json": this.appUtil.getMacroDependencies(gr.field_json + ""),
                    "field": gr.field_json + "",
                    "isHidden": gr.is_hidden + ""
                };
                i++;
            }

            this.logger.debug("Fetched " + i + " variables.");

            return JSON.stringify(answer);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getProfileVariableDetails. Error:- " + e);
        }

    },



    checkEditable: function(editables, varname, categoryJSON, serviceJSON) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.checkEditable.");
            if (categoryJSON == "create_spec") {

                for (var i in editables.resources) {
                    var varServiceName = serviceJSON + i;
                    if (varname == varServiceName) {
                        return editables.resources[i] + '';
                    }
                }

            } else if (categoryJSON == "readiness_probe") {
                for (var i in editables) {
                    var varServiceName = serviceJSON + i;
                    if (varname == varServiceName) {
                        return editables[i] + '';
                    }
                }
            }

        } catch (e) {
            this.logger.error("Inside Nutanix_FetchConfigureSettingDropdown.checkEditable. " + e);
        }

    },

    getCrendentialsDetails: function(project, blueprint, profile) {

        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getCrendentialsDetails.");

            var gr = new GlideRecord(this.appUtil.configuration.table.Credentials + '');
            gr.addQuery('catalog_item', blueprint);
            gr.orderBy('name');
            gr.query();

            var answer = {};
            var i = 0;

            while (gr.next()) {
                answer[gr.name + ''] = {};

                answer[gr.name + ''].credential_name = {
                    "name": 'credential_name',
                    "question_text": 'Credential Name',
                    "value": gr.name + ''
                };

                answer[gr.name + ''].username = {
                    "name": 'username',
                    "question_text": 'Username',
                    "value": gr.username + '',
                    "runtime_config": gr.username_editable + ''
                };

                answer[gr.name + ''].secret_type = {
                    "name": 'secret_type',
                    "question_text": 'Secret Type',
                    "value": gr.type + ''
                };

                if (gr.type + '' == 'KEY') {
                    answer[gr.name + ''].ssh_private_key = {
                        "name": 'ssh_private_key',
                        "question_text": 'SSH Private Key',
                        "value": gr.ssh_private_key + '',
                        "runtime_config": gr.secret_editable + ''
                    };

                    answer[gr.name + ''].passphrase = {
                        "name": 'passphrase',
                        "question_text": 'Passphrase',
                        "value": gr.passphrase + '',
                        "runtime_config": gr.passphrase_editable + ''
                    };
                } else {
                    answer[gr.name + ''].password = {
                        "name": 'password',
                        "question_text": 'Password',
                        "value": gr.password + '',
                        "runtime_config": gr.secret_editable + ''
                    };
                }

                answer[gr.name + ''].uuid = gr.uuid + '';
                answer[gr.name + ''].description = gr.description + '';
                answer[gr.name + ''].is_default = gr.is_default + '';
                answer[gr.name + ''].is_secret_modified = gr.is_secret_modified + '';
                answer[gr.name + ''].name = gr.name + '';
                answer[gr.name + ''].state = gr.state + '';

                answer[gr.name + ''].username_isdisabled = gr.username_isdisabled + '';
                answer[gr.name + ''].secret_isdisabled = gr.secret_isdisabled + '';
                answer[gr.name + ''].ssh_private_key_isdisabled = gr.ssh_private_key_isdisabled + '';
                answer[gr.name + ''].passphrase_isdisabled = gr.passphrase_isdisabled + '';

                answer[gr.name + ''].credential_reference = {
                    "value": gr.credential_reference + '',
                    "label": gr.credential_reference.name + ''
                };

                answer[gr.name + ''].runtime = gr.runtime + '';

                i++;
            }
            gs.info('getRowCount ' + i);
            this.logger.debug("Fetched " + i + " credentials.");

            return JSON.stringify(answer);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getCrendentialsDetails. Error:- " + e);
        }

    },

    /*fetchEnvironmentCredentials: function( credSysId ){
                                                try{
                                                    this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.fetchEnvironmentCredentials.");

                                                    var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
                                                    gr.get(credSysId);

                                                    var answer = {};
                                                        var i = 0;

                                                        if(gr){
                                                            answer[gr.name+''] = {};

                                                                answer[gr.name+''].credential_name = {
                                                                    "name": 'credential_name',
                                                                    "question_text": 'Credential Name',
                                                                    "value": gr.name+''
                                                                };

                                                                answer[gr.name+''].username = {
                                                                    "name": 'username',
                                                                    "question_text": 'Username',
                                                                    "value": gr.username+'',
                                                                    "runtime_config": gr.username_editable+''
                                                                };

                                                                answer[gr.name+''].secret_type = {
                                                                    "name": 'secret_type',
                                                                    "question_text": 'Secret Type',
                                                                    "value": gr.type+''
                                                                };

                                                                if(gr.type+'' == 'KEY'){
                                                                    answer[gr.name+''].ssh_private_key = {
                                                                        "name": 'ssh_private_key',
                                                                        "question_text": 'SSH Private Key',
                                                                        "value": gr.ssh_private_key+'',
                                                                        "runtime_config": gr.ssh_private_key_editable+''
                                                                    };

                                                                    if(gr.passphrase+'')
                                                                        answer[gr.name+''].passphrase = {
                                                                        "name": 'passphrase',
                                                                        "question_text": 'Passphrase',
                                                                        "value": gr.passphrase+'',
                                                                        "runtime_config": gr.passphrase_editable+''
                                                                    };
                                                                }else{
                                                                    answer[gr.name+''].password = {
                                                                        "name": 'password',
                                                                        "question_text": 'Password',
                                                                        "value": gr.password+'',
                                                                        "runtime_config": gr.secret_editable+''
                                                                    };
                                                                }

                                                                answer[gr.name+''].uuid = gr.uuid+'';
                                                                answer[gr.name+''].description = gr.description+'';
                                                                answer[gr.name+''].is_default = gr.is_default+'';
                                                                answer[gr.name+''].is_secret_modified = gr.is_secret_modified+'';
                                                                answer[gr.name+''].name = gr.name+'';
                                                                answer[gr.name+''].state = gr.state+'';

                                                                answer[gr.name+''].environment = gr.environment+'';
                                                                answer[gr.name+''].project = gr.project+'';

                                                                answer[gr.name+''].username_isdisabled = gr.username_isdisabled+'';
                                                                answer[gr.name+''].secret_isdisabled = gr.secret_isdisabled+'';
                                                                answer[gr.name+''].ssh_private_key_isdisabled = gr.ssh_private_key_isdisabled+'';
                                                                answer[gr.name+''].passphrase_isdisabled = gr.passphrase_isdisabled+'';

                                                                i++;
                                                            }

                                                            this.logger.debug("Fetched " + i + " credentials.");

                                                            return JSON.stringify(answer);

                                                        }catch(e){
                                                            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchEnvironmentCredentials. Error:- "+e);
                                                        }

                                                    },*/

    mappedCredentials: function(projects, bpType, environments) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mappedCredentials.\n projects " + projects + "\n bpType" + bpType + "\n environment" + environments);
            var project_array = projects.split(',');
            var env_array = environments.split(',');
            var arr = [];

            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_credential');
            if (bpType == 'runbook' || bpType == 'published_runbook') {
                //gr.addQuery('catalog_item', runbook + '');
            } else {
                for (var i = 0; i &lt;= project_array.length; i++) {
                    if (i == 0)
                        var gsr = gr.addQuery('project.sys_id', project_array[i] + '');
                    else
                        gsr.addOrCondition('project.sys_id', project_array[i] + '');
                }
                gr.query();
                var recordCount = 0;
                while (gr.next()) {
                    if (env_array.indexOf(gr.environment.sys_id + '') != -1) {
                        arr.push({
                            'label': gr.name + '',
                            'value': gr.sys_id + '',
                            'type': gr.type + '',
                            'username': gr.username + ''
                        });
                    }
                    recordCount++;
                }
                this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mappedCredentials.\n projects " + projects + "\n bpType" + bpType + "\n environment" + environments + " rowcount " + recordCount);
            }

            return JSON.stringify(arr);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.mappedCredentials. Error:- " + e);
        }
    },

    getCatalogInfo: function(sysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getCatalogInfo.");

            var catalogItem = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            catalogItem.addQuery('item_name', sysId);
            //catalogItem.get(sysId);
            //this.logger.info("Fetching Catalog Details for "+blueprint.name);
            catalogItem.query();

            if (catalogItem.next()) {
                var rtn = {};
                if (catalogItem.item_name.getRefRecord()) {
                    var item = catalogItem.item_name.getRefRecord();
                    rtn = {
                        "itemName": item.name + '',
                        "description": item.description_markdown + '',
                        "usersName": catalogItem.user_criteria.user.getDisplayValue() + '',
                        "groupsName": catalogItem.user_criteria.group.getDisplayValue() + '',
                        "usersSysId": catalogItem.user_criteria.user + '',
                        "groupsSysId": catalogItem.user_criteria.group + ''
                    };
                }

                return JSON.stringify(rtn);
            }

            return '';

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getCatalogInfo. Error:- " + e);
        }

    },

    getRealtedCatalogItems: function(sysId) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getRealtedCatalogItems.");

            var catalogItem = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            catalogItem.addQuery('blueprint', sysId);
            //catalogItem.get(sysId);
            //this.logger.info("Fetching Catalog Details for "+blueprint.name);
            catalogItem.query();
            var answer = {};

            var k = 0;

            while (catalogItem.next()) {
                answer[k] = {
                    'name': catalogItem.item_name.name + '',
                    'sys_id': catalogItem.item_name + ''
                };

                k++;
            }

            return JSON.stringify(answer);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getRealtedCatalogItems. Error:- " + e);
        }

    },

    getBlueprintInfo: function(sysId) {
        try {

            this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.getBlueprintInfo.");

            var catalogItem = new GlideRecord(this.appUtil.configuration.table.catItem + '');
            if (catalogItem.get(sysId)) {
                catalogItem = new GlideRecord(catalogItem.sys_class_name + '');
                if (catalogItem.get(sysId)) {
                    var rtn = {
                        "itemName": catalogItem.name + '',
                        "description": catalogItem.description_markdown + '',
                    }
                    return JSON.stringify(rtn);
                }
            }

            return '';

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getBlueprintInfo. Error:- " + e);
        }

    },

    fetchRuntimeVariablesValue: function(sysId) {
        try {
            this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.fetchRuntimeVariablesValue.");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            if (gr.get(sysId)) {
                var arr = {};
                if (gr &amp;&amp; gr.blueprint.getRefRecord()) {
                    arr = {
                        "application_profile": {
                            "sys_ids": gr.multiple_application_profile + ''
                        },
                        "environments": {
                            "sys_ids": gr.environments + '',
                        },
                        "endpoint": {
                            "sys_ids": gr.endpoint + '',
                        },
                        "blueprint": {
                            "name": gr.blueprint.name + ' ' + ((gr.blueprint.getRefRecord().version_mpi) ? gr.blueprint.getRefRecord().version_mpi : ''),
                            "sys_id": gr.blueprint + '',
                            "class": gr.blueprint.sys_class_name + ''
                        },
                        "project": {
                            "sys_ids": gr.multiple_projects + ''
                        },
                        "type_of_blueprint": gr.type_of_blueprint + '',
                        "item_name": gr.item_name + ''
                    };
                    return JSON.stringify(arr);
                }

                return '';
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchRuntimeVariablesValue. Error:- " + e);
        }
    },

    checkDuplicate: function(catName, catSysId) {
        try {
            this.logger.debug("Inside x_nuta2_nutanix_ca_nutanix_runtime_configuration.checkDuplicate.");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            if (catSysId)
                gr.addEncodedQuery('item_name.name=' + catName + '^item_name!=' + catSysId);
            else
                gr.addEncodedQuery('item_name.name=' + catName);
            gr.query();

            if (gr.next())
                return 'yes';

            return 'no';
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.checkDuplicate. Error:- " + e);
        }

    },
    fetchMultipleBlueprints: function(blueprintType) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleBlueprints." + blueprintType);
            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + '');
            if (blueprintType == 'unpublished') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            }
            if (blueprintType == 'runbook') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_runbook_sysId'));
            }
            if (blueprintType == 'published_runbook') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_published_runbook_sysId'));
            }
            if (blueprintType == 'published') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));
            }
            gr.orderBy('catalog_item.name');
            gr.query();

            var ans = {};
            var i = 0;

            while (gr.next()) {
                if ((blueprintType == 'unpublished' &amp;&amp; (gr.catalog_item.state + '' == 'ACTIVE' || gr.catalog_item.state + '' == 'published')) || (blueprintType != 'unpublished' &amp;&amp; (gr.catalog_item.state + '' == 'active' || gr.catalog_item.state + '' == 'published')) || (blueprintType != 'unpublished' &amp;&amp; (gr.catalog_item.state + '' == 'ACTIVE' || gr.catalog_item.state + '' == 'published'))) {
                    ans[i] = {
                        'sys_id': gr.catalog_item + '',
                        'name': gr.catalog_item.name + '' + " " + gr.version + ''
                    };
                    i++;
                }
            }
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleBlueprints." + blueprintType + " rowcount" + i);
            this.logger.debug("Fetched " + i + " blueprints.");
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleBlueprints. Error:- " + e);
        }
    },
    fetchMultipleProjects: function(blueprint, blueprintType) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.fetchBlueprints. blueprint ");
            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + '');
            gr.addQuery('catalog_item', blueprint);

            if (blueprintType == 'unpublished') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            }
            if (blueprintType == 'runbook') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_runbook_sysId'));
            }
            if (blueprintType == 'published_runbook') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_published_runbook_sysId'));
            }
            if (blueprintType == 'published') {
                gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));
            }

            //             if (blueprintType == 'unpublished')
            //                 gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_unpublishedBP_sysId'));
            //             if (blueprintType == 'runbook')
            //                 gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_runbook_sysId'));
            //             else
            //                 gr.addQuery('catalog_item.category', gs.getProperty('x_nuta2_nutanix_ca.nutanix_category_sysId'));

            gr.orderBy('catalog_item.name');
            gr.query();
            var ans = {};
            var i = 0;
            while (gr.next()) {
                if ((gr.catalog_item.state + '').toUpperCase() == 'ACTIVE' || (gr.catalog_item.state + '').toUpperCase() == 'PUBLISHED') {
                    ans[i] = {
                        'name': gr.catalog_item.name + '' + " " + gr.version + '',
                        'project_sys_id': gr.projects + ''
                    };
                    i++;
                }
            }
            this.logger.debug("Fetched " + i + " project.");
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.fetchMultipleProjects. Error:- " + e);
        }
    },
    getMultipleProfileVariableDetails: function(projects, blueprint, profiles, cat_item, delta_profiles, type) {
        try {
            this.logger.debug("####Inside Nutanix_FetchConfigureSettingDropdown.getMultipleProfileVariableDetails.\n projects " + projects + "\n blueprint " + blueprint + "\n profiles " + profiles + "\n cat_item " + cat_item + "\n delta_profiles " + delta_profiles + "\n type " + type);

            var answer = {};
            if (type == "update") {
                answer = this.getProfileVariableData(profiles, cat_item, JSON.stringify(answer));
                if (delta_profiles != '')
                    answer = this.getProfileVariableData(delta_profiles, blueprint, answer);
            } else {
                answer = this.getProfileVariableData(profiles, blueprint, JSON.stringify(answer));
            }

            this.logger.debug("####Inside Nutanix_FetchConfigureSettingDropdown.getMultipleProfileVariableDetails." + answer);
            return answer;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.getMultipleProfileVariableDetails. Error:- " + e);
        }

    },
    getMultipleServiceVariableDetails: function(projects, blueprint, profiles, type, bpType, cat_item, delta_profiles) {
        try {
            this.logger.debug("--Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails.Projects " + projects + " Blueprint " + blueprint + " Profiles " + profiles + " Type " + type + " BpType " + bpType);

            var multipleService = [];
            if (type == 'update') {
                multipleService = this.getServiceVariableData(projects, cat_item, profiles, type, bpType, JSON.stringify(multipleService));
                multipleService = this.getServiceVariableData(projects, blueprint, delta_profiles, type, bpType, multipleService);
            } else {
                multipleService = this.getServiceVariableData(projects, blueprint, profiles, type, bpType, JSON.stringify(multipleService));
            }

            this.logger.debug("Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails final array. return : " + JSON.stringify(multipleService));
            return multipleService;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. Error:- " + e);
        }
    },

    noProfileVariableDetails: function(projects, blueprint, profiles) {
        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails.");
        try {
            var project = projects.split(',');
            var profile = profiles.split(',');
            var answer = [];
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. project : " + JSON.stringify(project) + " profile " + JSON.stringify(profile) + ' answer ' + JSON.stringify(answer));
            for (var i in profile) {
                var gr = new GlideAggregate(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('catalog_item', blueprint);
                gr.addQuery('isprofilevariable', true);
                gr.addQuery('application_profile', profile[i]);
                gr.addAggregate('COUNT');
                gr.query();

                if (gr.next()) {
                    var count = gr.getAggregate('COUNT');

                }
                if (count == 0 || count &lt; 1) {
                    answer.push(profile[i]);

                }

            }
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. answer : " + JSON.stringify(answer));
            return JSON.stringify(answer);
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.noProfileVariableDetails. Error:- " + e);
        }
    },
    getProjectSubnet: function(catalog, project_uuid) {
        try {
            var clusterJson = {};
            var catalogSysid;
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getProjectSubnet. catalog : " + catalog + " project_uuid : " + project_uuid);
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
            gr.addQuery('item_name', catalog);
            gr.query();
            if (gr.next()) {
                var grProject = new GlideRecord(this.appUtil.configuration.table.Project + '');
                grProject.addQuery('uuid', project_uuid + '');
                grProject.query();
                if (grProject.next()) {
                    if (grProject.subnet + '' != '') {
                        var subnetList = grProject.subnet.split(',');
                        for (var x in subnetList) {
                            var grSubnet = new GlideRecord(this.appUtil.configuration.table.subnet + '');
                            grSubnet.addQuery('sys_id', subnetList[x]);
                            grSubnet.query();
                            if (grSubnet.next()) {
                                if (!clusterJson[grSubnet.cluster_name + '']) {
                                    clusterJson[grSubnet.cluster_name + ''] = {};
                                    clusterJson[grSubnet.cluster_name + '']['uuid'] = grSubnet.cluster_uuid + '';
                                    clusterJson[grSubnet.cluster_name + '']['subnet'] = {};
                                }

                                clusterJson[grSubnet.cluster_name + '']['subnet'][grSubnet.uuid + ''] = grSubnet.name + '';
                            }

                        }
                    }

                }
            }
            /*setting session*/
            var grCat = new GlideRecord('x_nuta2_nutanix_ca_nutanix_catalog_items');
            grCat.addQuery('sys_id', catalog);
            grCat.query();
            if (grCat.next()) {
                var gr = new GlideRecord('item_option_new');
                gr.addQuery('cat_item.name', grCat.name + '');
                gr.query();
                var catalog_clusterJSON = {};
                while (gr.next()) {
                    if ((gr.name + '').endsWith('cluster_name') &amp;&amp; gr.question_text == 'Cluster Name') {
                        catalog_clusterJSON[gr.sys_id + ''] = {};
                        catalog_clusterJSON[gr.sys_id + '']['name'] = gr.name + '';
                        catalog_clusterJSON[gr.sys_id + '']['label'] = gr.question_text + '';
                        catalog_clusterJSON[gr.sys_id + '']['value'] = gr.default_value + '';
                    }
                }

                for (var k in catalog_clusterJSON) {
                    var serviceName = (catalog_clusterJSON[k].name + '').slice(0, (catalog_clusterJSON[k].name).length - 12);
                    catalog_clusterJSON[k]['nics'] = {};
                    var gr = new GlideRecord('item_option_new');
                    gr.addQuery('cat_item.name', grCat.name + '');
                    gr.query();
                    while (gr.next()) {
                        if ((gr.name + '').indexOf(serviceName) != -1 &amp;&amp; (gr.name + '').indexOf('_nic_') != -1) {
                            catalog_clusterJSON[k]['nics'][gr.sys_id + ''] = gr.name + '';
                        }
                    }
                }
            }

            /**/


            var catNicJson = {
                "catalog_data": catalog_clusterJSON,
                "cluster_info": clusterJson
            };
            this.logger.debug("**Inside Nutanix_FetchConfigureSettingDropdown.getProjectSubnet. final answer : " + JSON.stringify(catNicJson));
            return (JSON.stringify(catNicJson));

        } catch (e) {
            this.logger.error("Inside Nutanix_FetchConfigureSettingDropdown.getProjectSubnet." + e);
        }
    },

    getProfileVariableData: function(profiles, blueprint, answers) {
        gs.info("Profile Var details profiles " + profiles + " blueprint  " + blueprint + " answers " + answers);

        var profile = profiles.split(',');
        var answer = JSON.parse(answers);

        var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        for (var i in profile) {
            if (i == 0)
                var qc = gr.addQuery('application_profile', profile[i]);
            else
                qc.addOrCondition('application_profile', profile[i]);
        }
        gr.addQuery('catalog_item', blueprint);
        gr.addQuery('isprofilevariable', true);
        gr.orderBy('variable.name');
        gr.query();

        var i = 0;
        while (gr.next()) {


            /*if (gr.is_hidden == true)
                continue;*/

            var opt = [];
            if (gr.variable.type + '' == 5) {
                var optionRec = new GlideRecord("question_choice");
                optionRec.addQuery('question', gr.variable + '');
                optionRec.query();
                while (optionRec.next()) {

                    opt.push(optionRec.value + '');

                }

            } else if (gr.variable.type + '' == 21) {
                if (gr.variable.getRefRecord()) {
                    var varRefRec = gr.variable.getRefRecord().reference_qual + '';
                    varRefRec = varRefRec.substr(9, varRefRec.length);
                    var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                    optionRec.addQuery('variable', varRefRec);
                    optionRec.query();
                    while (optionRec.next()) {
                        opt.push(optionRec.value + '');
                    }
                }
            }


            answer[gr.sys_id + ''] = {
                'name': gr.variable.name + '',
                'question_text': gr.variable.question_text + '',
                'value': gr.default_value + '',
                'runtime_config': gr.runtime_config + '',
                'type': gr.variable.type + '',
                'isprofilevariable': gr.isprofilevariable + '',
                'uuid': gr.uuid + '',
                'isdisabled': gr.isdisabled + '',
                "val_type": gr.value_type + '',
                "description": gr.variable.help_text + '',
                "mandatory": gr.variable.mandatory + '',
                "regex": gr.field_regex + '',
                "options": opt,
                "data_type": gr.data_type + '',
                "uuid": gr.uuid + '',
                "application_profile": gr.application_profile + '',
                "field_json": this.appUtil.getMacroDependencies(gr.field_json + ""),
                "field": gr.field_json + "",
                "isHidden": gr.is_hidden + ""
            };
            i++;
        }

        return JSON.stringify(answer);
    },
    getServiceVariableData: function(projects, blueprint, profiles, type, bpType, multipleService) {
        var project_array = projects.split(',');
        var profile_array = profiles.split(',');
        var multipleService = JSON.parse(multipleService);
        for (var pro = 0; pro &lt; profile_array.length; pro++) {
            var profile = profile_array[pro];
            var variables = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
            if (variables.get(profile)) {
                this.logger.info("Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails Feach ServiceVariable of " + variables.name + " Profile.");
            }
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profile_array[pro]);
            gr.addQuery('catalog_item', blueprint);
            gr.addQuery('isprofilevariable', false);
            gr.orderBy('variable.order');
            gr.query();

            //             this.logger.info("Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails Feach ServiceVariable of " + variables.name + " Profile. Feached " + i + " Count");
            var answer = {};
            var i = 0;
            while (gr.next()) {

                if (gr.getDisplayValue('variable') == "Connection Protocol") {
                    continue;
                }

                if (!answer[variables.name + '_' + gr.service_name.name + ''])
                    answer[variables.name + '_' + gr.service_name.name + ''] = {};
                var categoryName = gr.category_name.name + '';
                if (gr.category_name.name + '' == gr.variable.name + '') {
                    if (!answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''])
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''] = {};
                    if (bpType == "published") {
                        var ans = (this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + ''));
                        this.logger.debug("--Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + '']['new_' + gr.sys_id + ''] = (ans) ? JSON.parse(ans) : [];
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + '']['new_' + gr.sys_id + ''].notCmplx = false;
                    } else {
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''][gr.sys_id + ''] = (gr.default_value + '') ? JSON.parse(gr.default_value + '') : {};
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].notCmplx = false;
                    }
                } else {
                    /*if (gr.is_hidden == true)
                        continue;*/
                    if (!answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''])
                        answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''] = {};
                    var catname = (gr.category_name.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var varname = (gr.variable.name + '').substring(((gr.service_name.name + '').length) + 1);
                    var default_value = "";
                    var runtime_config = gr.runtime_config + '';
                    var isdisabled = gr.isdisabled + '';
                    var ans, parsedAns;
                    if (catname == "ssh_keys" &amp;&amp; bpType == "published") {
                        var hasKey;
                        var gr_ssh = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                        gr_ssh.addQuery('application_profile', profile);
                        gr_ssh.addQuery('catalog_item', blueprint);
                        gr_ssh.addQuery('isprofilevariable', false);
                        gr_ssh.addQuery('variable.name', 'CONTAINS', 'key_0');
                        gr_ssh.orderBy('variable.order');
                        gr_ssh.query();
                        if (gr_ssh.next()) {
                            hasKey = "true";
                        }
                        if (hasKey != "true") {
                            ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '', "true");
                            parsedAns = (ans) ? JSON.parse(ans) : {};
                            answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''] = parsedAns;
                        }
                    }
                    if ((!gr.default_value) &amp;&amp; bpType == "published") {
                        ans = this.getVariablePatchedValue(type + '', gr.default_value + '', gr.sys_id, gr.variable.name + '', gr.category_name.name + '', gr.category_name.question_text + '');
                        parsedAns = (ans) ? JSON.parse(ans) : "";
                        this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails.Patched Value for " + gr.variable.name + " :: " + ans);
                        if (parsedAns) {
                            default_value = parsedAns.value + '';
                            var isSupported = (default_value + '' == 'Cloud-init' || default_value + '' == 'Sysprep' || (varname + '').startsWith('key_') || (this.disabledFields.includes(varname) &amp;&amp; varname + '' != 'name' &amp;&amp; varname + '' != 'type')) ? false : true;
                            runtime_config = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? false : (parsedAns.runtime + '') ? parsedAns.runtime + '' : gr.runtime_config + '';
                            isdisabled = ((default_value + '').indexOf('@@') != -1 || isSupported + '' == 'false') ? true : (runtime_config + '' == 'true') ? false : true;
                        }
                    }

                    /*Advanced Variable*/
                    var opt = [];
                    if (gr.variable.type + '' == 5 &amp;&amp; gr.isservicevariable == true) {
                        var optionRec = new GlideRecord("question_choice");
                        optionRec.addQuery('question', gr.variable + '');
                        optionRec.query();
                        while (optionRec.next()) {
                            opt.push(optionRec.value + '');
                        }
                    } else if (gr.variable.type + '' == 21 &amp;&amp; gr.isservicevariable == true) {
                        if (gr.variable.getRefRecord()) {
                            var varRefRec = gr.variable.getRefRecord().reference_qual + '';
                            varRefRec = varRefRec.substr(9, varRefRec.length);
                            var optionRec = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                            optionRec.addQuery('variable', varRefRec);
                            optionRec.query();
                            while (optionRec.next()) {
                                opt.push(optionRec.value + '');
                            }
                        }
                    }
                    answer[variables.name + '_' + gr.service_name.name + ''][variables.name + '_' + gr.category_name.name + ''][gr.sys_id + ''] = {
                        'name': gr.variable.name + '',
                        'question_text': gr.variable.question_text + '',
                        'value': (gr.default_value + '') ? gr.default_value + '' : default_value,
                        'runtime_config': (gr.default_value + '') ? gr.runtime_config + '' : runtime_config,
                        'type': gr.variable.type + '',
                        'isprofilevariable': gr.isprofilevariable + '',
                        'uuid': gr.uuid + '',
                        'isdisabled': (gr.default_value + '') ? gr.isdisabled + '' : isdisabled,
                        'isSupported': gr.issupported + '',
                        'isservicevariable': gr.isservicevariable + '',
                        'notCmplx': true,
                        'val_type': gr.value_type + '',
                        'description': gr.variable.help_text + '',
                        'mandatory': gr.variable.mandatory + '',
                        'regex': gr.field_regex + '',
                        'options': opt,
                        'data_type': gr.data_type + '',
                        'serviceField': (gr.isprofilevariable + '' == 'false' &amp;&amp; gr.isservicevariable + '' == 'false') ? true : false,
                        "field_json": (gr.isservicevariable + '' == 'true') ? this.appUtil.getMacroDependencies(gr.field_json + "") : {},
                        "field": (gr.isservicevariable + '' == 'true') ? gr.field_json + "" : "{}",
                        "isHidden": gr.is_hidden + ""
                    };
                }
                i++;
            }
            this.logger.info("Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails Feach ServiceVariable of " + variables.name + " Profile. Feached " + i + " Count");

            this.logger.debug("--Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails. all service variable value answer" + variables.name + " :: " + JSON.stringify(answer));
            if (i &gt; 0) {
                var returnJSON = {};
                returnJSON['profile'] = variables.name + '';
                returnJSON['service_configuration'] = answer;
                returnJSON['profile_sys_id'] = variables.sys_id + '';
                if (pro == 0)
                    returnJSON['subnet_list'] = this.getNutanixSubnetList(projects);
                this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getMultipleServiceVariableDetails " + JSON.stringify(returnJSON));
                multipleService.push(returnJSON);
            }
        }
        gs.info("test to check if the ✅]]&gt;🚫&lt;![CDATA[" + JSON.stringify(multipleService));
        return JSON.stringify(multipleService);
    },
    mpiPatchingBp: function(mpi_uuid, bp_name, project_uuid, environment_uuid, profile_sysid, env_profile, env_sysid) {
        try {
            gs.info("!! mpi_uuid : " + mpi_uuid + " bp_name : " + bp_name + " project_uuid : " + project_uuid + " environment_uuid : " + environment_uuid + " profile_sysid : " + profile_sysid + " env_profile : " + env_profile + " env_sysid : " + env_sysid);
            var logger = new Nutanix_Calm_Logger();
            var utils = new Nutanix_Calm_Utils();
            var reqUtils = new Nutanix_RequestUtil();
            var response = utils.makeCalmApiCall('GET', '/calm_marketplace_items/' + mpi_uuid);
            if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                response = JSON.parse(response.getBody());
                var name = bp_name + '';
                var app_bp_name = ((name + GlideSecureRandomUtil.getSecureRandomString(8) + mpi_uuid).replaceAll('-', ' ').trim().replaceAll(' ', '_')).substring(0, 64);
                var tmpbody = {
                    "status": response.status.resources.app_blueprint_template.status,
                    "spec": response.spec.resources.app_blueprint_template.spec
                };
                var body = {
                    "api_version": "3.0", //response.api_version,
                    "metadata": {
                        "kind": "blueprint",
                        "project_reference": {
                            "kind": "project",
                            "uuid": project_uuid + ''
                        },
                        "categories": response.metadata.categories //changes
                    },
                    "spec": {
                        "description": response.spec.resources.app_blueprint_template.spec.description, //response.spec.description,
                        "app_blueprint_name": app_bp_name + '',
                        "source_marketplace_version": response.spec.resources.version, //"1.0.0", //changes
                        "source_marketplace_name": name + '',
                        "resources": response.spec.resources.app_blueprint_template.spec.resources
                    }
                };





                /*var obj = new Object();
                for(var pair in env_profile) {
                    var envuuid = env_profile[pair].key;
                    var environment_id = new GlideRecord('x_nuta2_nutanix_ca_nutanix_environment');
                    if(environment_id.get(envuuid))
                        envuuid = environment_id.getValue('uuid')+'';
                    var all_profile_arr = JSON.parse(env_profile[pair].value);
                    for(var prof in all_profile_arr) {
                         var profile_name = all_profile_arr[prof];
                         if(profile_arr.indexOf(all_profile_arr[prof])!=-1) {
                            obj["environment"] = {
                                "uuid": envuuid
                            };
                            obj["app_profile"] = {
                                "name": profile_name
                            };
                            env_template.push(obj);
                         }

                    }
                }*/
                var env_template = [];
                var env_uuid = [];
                var profile_arr = [];
                if (env_profile != '') {
                    env_profile = JSON.parse(env_profile);
                    var profile_str = profile_sysid.split(',');
                    for (var pro in profile_str) {
                        var profile = new GlideRecord('x_nuta2_nutanix_ca_catalog_item_and_application_profile_relation');
                        profile.addEncodedQuery('application_profile.sys_id=' + profile_str[pro]);
                        profile.query();
                        if (profile.next())
                            profile_arr.push(profile.application_profile.name + '');
                    }
                    var environment_sysid = env_sysid.split(',');
                    gs.info('profile_arr: ' + profile_arr[0] + ' profile_sysid: ' + profile_sysid);


                    for (var env in environment_sysid) {
                        var environment_id = new GlideRecord('x_nuta2_nutanix_ca_nutanix_environment');
                        if (environment_id.get(environment_sysid[env]))
                            env_uuid.push(environment_id.getValue('uuid') + '');
                    }
                    //new code
                    var obj = new Object();
                    var env_check = 0;
                    for (var pair in env_profile) {
                        var envuuid = env_profile[pair].key;
                        var environment_id = new GlideRecord('x_nuta2_nutanix_ca_nutanix_environment');
                        if (environment_id.get(envuuid))
                            envuuid = environment_id.getValue('uuid') + '';
                        if (env_profile[0].value == '')
                            continue;
                        var all_profile_arr = JSON.parse(env_profile[0].value);
                        for (var prof in all_profile_arr) {
                            var profile_name = all_profile_arr[prof];
                            if (profile_arr.indexOf(all_profile_arr[prof]) != -1) {
                                obj["environment"] = {
                                    "uuid": envuuid
                                };
                                obj["app_profile"] = {
                                    "name": profile_name
                                };
                                env_template.push(obj);
                                env_check++;
                                break;
                            }
                        }
                        if (env_check &gt; 0) {
                            break;
                        }
                    }
                } else {
                    env_uuid.push(env_sysid);
                    profile_arr.push(profile_sysid);
                    //new code
                    var obj = new Object();
                    var env_template = [];
                    //	for(var i = 0; i &lt; env_uuid.length; i++) {
                    var envuuid = env_uuid[0] + '';
                    for (var j = 0; j &lt; profile_arr.length; j++) {
                        var profile_name = profile_arr[j] + '';
                        obj["environment"] = {
                            "uuid": envuuid
                        };
                        obj["app_profile"] = {
                            "name": profile_name
                        };
                        env_template.push(obj);
                    }
                    //} 

                }
                /*var obj = new Object();
                var env_template = [];
                for(var i = 0; i &lt; env_uuid.length; i++) {
                    var envuuid = env_uuid[i]+'';
                    for (var j = 0; j &lt; profile_arr.length; j++) {
                        var profile_name = profile_arr[j]+'';
                        obj["environment"] = {
                            "uuid": envuuid
                        };
                        obj["app_profile"] = {
                            "name": profile_name
                        };
                        env_template.push(obj);
                    }
                }*/
                body.spec.environment_profile_pairs = env_template;
                gs.info('makeCalmCall:: ' + JSON.stringify(body));
                var response = utils.makeCalmApiCall('POST', '/blueprints/marketplace_launch', JSON.stringify(body));
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                    parseResp = JSON.parse(response.getBody());
                    gs.info('mpiPatching_response: ' + JSON.stringify(parseResp));
                    var clonedBpUuid = parseResp.metadata.uuid;
                    return clonedBpUuid + '';
                } else {
                    logger.info('/blueprints/marketplace_launch POST call Error:: ' + JSON.stringify(response.getBody()));
                }

            } else {
                logger.info('/calm_marketplace_items/ POST call Error:: ' + JSON.stringify(response.getBody()));
            }
        } catch (e) {
            logger.error("Exception caught inside mpiPatching. Error:- " + e);
            return "false";
        }
    },

    copyMpiPatching: function(projects, blueprint, profile1, environment) {

        var logger = new Nutanix_Calm_Logger();
        var utils = new Nutanix_Calm_Utils();
        var reqUtils = new Nutanix_RequestUtil();


        try {
            logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.mpiPatching.");
            gs.info("RV mpipatching: " + projects + blueprint + profile1 + environment);
            environment = JSON.parse(environment);
            var output = [];

            for (var i = 0; i &lt; environment.length; i++) {
                var profilesArray = JSON.parse(environment[i].value);
                gs.info("Env ::" + profilesArray.length + " Result" + (profilesArray.length == 0));
                if (profilesArray.length == 0) {
                    continue;
                }

                var blueprintTemplate = "";
                var catVariableBody = {};
                var bpVariablesJSON = {};
                var parseResp = {};
                var envSys = environment[i].key;

                var environment_uuid = ' ';
                var project_uuid = '';

                var grEnv = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
                if (grEnv.get(envSys)) {
                    environment_uuid = grEnv.uuid + '';
                    project_uuid = grEnv.project ? grEnv.project.uuid + '' : '';
                } else {
                    this.logger.info("error in Nutanix_FetchConfigureSettingDropdown.copyMpiPatching - couldnt find a record using getmethod()");
                }

                var bp = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
                bp.addQuery('sys_id', blueprint);
                bp.query();

                var mpi_uuid = (bp.next()) ? bp.uuid : "";

                var response = this.appUtil.makeCalmApiCall('GET', '/calm_marketplace_items/' + mpi_uuid);
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                    response = JSON.parse(response.getBody());

                    var name = bp.name + '';
                    var app_bp_name = ((name + GlideSecureRandomUtil.getSecureRandomString(8) + mpi_uuid).replaceAll('-', ' ').trim().replaceAll(' ', '_')).substring(0, 64);
                    var tmpbody = {
                        "status": response.status.resources.app_blueprint_template.status,
                        "spec": response.spec.resources.app_blueprint_template.spec
                    };


                    var body = {
                        "api_version": "3.0", //response.api_version,
                        "metadata": {
                            "kind": "blueprint",
                            "project_reference": {
                                "kind": "project",
                                "uuid": project_uuid + ''
                            },
                            "categories": response.metadata.categories //changes
                        },
                        "spec": {
                            "description": response.spec.resources.app_blueprint_template.spec.description, //response.spec.description,
                            "app_blueprint_name": app_bp_name + '',
                            "source_marketplace_version": response.spec.resources.version, //"1.0.0", //changes
                            "source_marketplace_name": name + '',
                            "resources": response.spec.resources.app_blueprint_template.spec.resources

                            //reqUtils.makeResourceBody(tmpbody, tmpbody.status.resources, current)
                            //response.spec.resources.app_blueprint_template.spec.resources
                        }
                    };


                    var env_template = [];
                    for (var j = 0; j &lt; profilesArray.length; j++) {
                        var obj = new Object();
                        obj["environment"] = {
                            "uuid": environment_uuid
                        };
                        obj["app_profile"] = {
                            "name": profilesArray[j]
                        };
                        env_template.push(obj);
                    }

                    body.spec.environment_profile_pairs = env_template;

                    gs.info("CalmMPI call:: " + JSON.stringify(body));
                    var response = utils.makeCalmApiCall('POST', '/blueprints/marketplace_launch', JSON.stringify(body));
                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                        var session = gs.getSession();
                        session.putClientData('non_filtered_cloned_bp_response', response.getBody());

                        parseResp = JSON.parse(response.getBody());
                        blueprintTemplate = (parseResp.status.resources) ? parseResp.status.resources : "";
                        var clonedBpUuid = parseResp.metadata.uuid;

                        //gs.error("Patching : "+response.getBody());

                    } else {
                        logger.error("API call to '/blueprints/marketplace_launch' failed with name : " + app_bp_name + ":-" + response.getBody());
                        //gs.error("Errorr :: "+(JSON.parseresponse.getBody()).message_list[0].message);
                        return JSON.stringify({
                            "errMess": JSON.parse(response.getBody()).message_list[0].message,
                            "status": false
                        });
                    }

                    var bpVariables = new Nutanix_CreateCatalogVariables();
                    if (bp.template_type == "Single Vm") {

                        var service_body = [{
                            "uuid": "singleVm-default-service-uuid",
                            "name": "single_vm_configuration"
                        }];

                        catVariableBody = {
                            "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                            "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                            "service_definition_list": service_body,
                            "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                        };
                        bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                    } else if (blueprintTemplate.package_definition_list &amp;&amp; blueprintTemplate.substrate_definition_list &amp;&amp; blueprintTemplate.app_profile_list &amp;&amp; blueprintTemplate.service_definition_list) {
                        catVariableBody = {
                            "substrate_definition_list": (blueprintTemplate.substrate_definition_list) ? blueprintTemplate.substrate_definition_list : "",
                            "app_profile_list": (blueprintTemplate.app_profile_list) ? blueprintTemplate.app_profile_list : "",
                            "service_definition_list": (blueprintTemplate.service_definition_list) ? blueprintTemplate.service_definition_list : "",
                            "package_definition_list": (blueprintTemplate.package_definition_list) ? blueprintTemplate.package_definition_list : ""
                        };

                        bpVariablesJSON = bpVariables._filterJSONDatatoService(catVariableBody);
                    }

                    bpVariablesJSON.uuid = parseResp.metadata.uuid + '';
                    bpVariablesJSON.name = parseResp.metadata.name + '';
                    bpVariablesJSON.envUUID = environment_uuid + "";

                    output.push(bpVariablesJSON);

                    var clientData = session.getClientData('Cloned_bp_response');
                    logger.debug("MPI cloned Blueprint response ::" + clientData);

                } else {
                    logger.error("API call to '/calm_marketplace_items/uuid' failed: " + response.getBody());
                    var result = {
                        "errMess": (response.getBody()).message_list[0].message,
                        "status": false
                    };
                    return JSON.stringify(result);
                }
            }
            var session = gs.getSession();
            session.putClientData('Cloned_bp_response', JSON.stringify(output));
            return JSON.stringify({
                "errMess": "Successful",
                "status": true
            });
        } catch (e) {
            logger.error("Exception caught inside Nutanix_FetchConfigureSettingDropdown.mpiPatching. Error:- " + e);
            return "false";
        }
    },

    variableArrayParser_client_script: function(type, parent_uuid, var_array) {
        //this.logger.debug("++++variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);
        var cat_launch = false;
        if (type == 'catalog') {
            cat_launch = true;
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.addQuery("item_name", parent_uuid);
            gr.query();
            if (gr.next()) {
                parent_uuid = gr.blueprint.uuid + "";
                type = "blueprints";
                if ("" + gr.item_name.category.title == "Blueprint") {
                    type = "blueprints";
                }
                if ("" + gr.item_name.category.title == "Marketplace Blueprint") {
                    type = "published";
                }

            }
        }

        var parsed_var_array = JSON.parse(var_array);
        var pre_map = {};
        var extApiFlag = false;
        for (var i = 0; i &lt; parsed_var_array.length; i++) {
            var var_data = parsed_var_array[i];
            var hasMacros = (this.appUtil._createMacroArray(var_data.def_val + "").length != 0);
            var depends_on = this.appUtil.getMacroDependencies(JSON.stringify(var_data));
            pre_map[var_data.name] = {
                "depends_on": depends_on,
                "value": (hasMacros) ? var_data.def_val + "" : var_data.value + "",
                "uuid": var_data.uuid,
                "type": var_data.type,
                "data_type": var_data.data_type,
                "name": var_data.name,
                "sys_id": (var_data.sys_id) ? var_data.sys_id : "",
                "catalog_launch": cat_launch
            };
            if (var_data.type == 'EXEC_LOCAL' || var_data.type == 'HTTP_LOCAL' || var_data.type == 'EXEC_SECRET' || var_data.type == 'HTTP_SECRET') {
                pre_map[var_data.name].requiresApiCall = true;
            } else {
                if (var_data.options &amp;&amp; var_data.options.choices &amp;&amp; var_data.options.choices.length != 0) {
                    pre_map[var_data.name].options = var_data.options.choices;
                    pre_map[var_data.name].data_type = "LIST_SINGLE";
                }
                if (var_data.data_type + "" == 'LIST') {
                    if (cat_launch)
                        pre_map[var_data.name].value = this._sysIdToValue(var_data.value);
                    pre_map[var_data.name].data_type = var_data.data_type;
                }
            }

        }
        //this.logger.debug("====variableArrayParser type" + type + " parent_uuid," + parent_uuid + " var_array" + var_array);
        var result = this.getHttpValues_client_script(type, parent_uuid, JSON.stringify(pre_map));

        return result;
    },
    getHttpValues_client_script: function(type, parent_uuid, pre_map) {
        try {
            this.logger.debug("Inside Nutanix_FetchConfigureSettingDropdown.getHttpValues. type : " + type + " parent_uuid : " + parent_uuid + " pre_map : " + pre_map);

            var post_value_map = {};
            pre_map = JSON.parse(pre_map);
            var top_pre_map = {};
            for (var i in pre_map) {
                top_pre_map[i] = this.appUtil.createPreMap(pre_map[i].depends_on, pre_map[i].type);
            }

            var top_post_map = this.appUtil.createDependencyMap(top_pre_map);

            var dependency_array = top_post_map.Dep_array;
            var error_array = top_post_map.error_map;
            var mpi_uuid, bp_name, project_uuid, environment_uuid;

            if (type == 'unpublished') {

                var table_name = (type == 'unpublished') ? this.appUtil.configuration.table.Blueprint + '' : 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                if (grBlueprint.get(parent_uuid)) {
                    parent_uuid = grBlueprint.uuid + '';
                    type = 'blueprints';
                }
            }
            if (type + '' == 'published') {

                var table_name = 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                var grBlueprint = new GlideRecord(table_name);
                grBlueprint.addEncodedQuery('uuidLIKE' + parent_uuid);
                grBlueprint.query();

                if (grBlueprint.next()) {

                    mpi_uuid = grBlueprint.uuid + '';
                    bp_name = grBlueprint.name;

                    var bp_project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_projects_blueprints_relationship');
                    bp_project.addEncodedQuery('catalog_item.sys_id=' + grBlueprint.sys_id);
                    bp_project.query();
                    while (bp_project.next()) {
                        project_uuid = bp_project.projects.uuid;
                        environment_uuid = bp_project.projects.environment_uuid;
                    }

                    //parent_uuid = this.mpiPatchingBp(mpi_uuid, bp_name, project_uuid, environment_uuid);
                    parent_uuid = mpi_uuid;
                    type = 'blueprints';
                }
            }
            // 			gs.info("!"+JSON.stringify(dependency_array));
            for (var pos = 0; pos &lt; dependency_array.length; pos++) {

                var var_json = pre_map[dependency_array[pos]];

                this.logger.debug("!!!!! var_json \n" + JSON.stringify(var_json));
                if (!var_json) {
                    this.logger.error('Dependent variable "' + dependency_array[pos] + '" not found.');
                    continue;
                }

                if (!var_json.requiresApiCall) {
                    if (var_json.data_type + "" == "LIST_SINGLE" || var_json.data_type + "" == 'LIST') {
                        //gs.info(JSON.stringify(var_json));
                        var_json.options = this._substituteMacro(var_json.options.toString(), pre_map).split(',');
                        var_json.value = this._substituteMacro(var_json.value, pre_map);
                    } else
                        var_json.value = this._substituteMacro(var_json.value, pre_map);
                    post_value_map[dependency_array[pos]] = var_json;
                    continue;
                }

                var var_uuid = var_json.uuid;
                var options = {
                    "state": "",
                    "values": []
                };

                var request_body = JSON.stringify({
                    "requestId": "",
                    "overridden_field": this._createOverrideVarBody(pre_map, var_json)
                });
                //gs.info("Override body: "+request_body);
                //gs.info("Send val body: "+'POST' + '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values' + request_body + "");
                var sendValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', request_body + "");

                var parsedSendValueBody = JSON.parse(sendValuesBody.getBody());
                // 				gs.info(sendValuesBody.getBody());
                var valPollBody = {
                    "requestId": parsedSendValueBody.request_id,
                    "trlId": parsedSendValueBody.trl_id
                };
                //gs.info("valPollBody "+JSON.stringify(valPollBody));
                var getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));
                var parsedValueBody = JSON.parse(getValuesBody.getBody());
                var execState = parsedValueBody.state + "";
                while (execState == 'RUNNING' || execState == 'running') {
                    getValuesBody = this.appUtil.makeCalmApiCall('POST', '/' + type + '/' + parent_uuid + '/variables/' + var_uuid + '/values', JSON.stringify(valPollBody));
                    parsedValueBody = JSON.parse(getValuesBody.getBody());
                    execState = parsedValueBody.state + "";
                }
                //gs.info("Values:"+getValuesBody.getBody());
                //r parsedValueBody = JSON.parse(getValuesBody.getBody());
                if (parsedValueBody.state == 'SUCCESS') {
                    var_json.state = parsedValueBody.state;
                    var_json.default_value = var_json.value + "";
                    var_json.value = [];
                    for (var i in parsedValueBody.values)
                        var_json.value[i] = parsedValueBody.values[i];
                } else {
                    var_json.state = parsedValueBody.state;
                    var_json.error = [];
                    for (var j in parsedValueBody.message_list)
                        var_json.error[j] = parsedValueBody.message_list[j].message;
                }

                post_value_map[dependency_array[pos]] = var_json;
            }

            //gs.info("!!!Pre map:" + JSON.stringify(pre_map));
            gs.info("post_value_map:" + JSON.stringify(post_value_map));
            return JSON.stringify(post_value_map);

        } catch (e) {
            this.logger.error("Error caught in Nutanix_FetchConfigureSettingDropdown.getHttpValues:" + e);
        }
    },
    fetchEndpoint: function(project) {
        var endpoint = new GlideRecord('x_nuta2_nutanix_ca_endpoints');
        endpoint.addQuery('project', project + '');
        endpoint.query();
        var result = [];

        while (endpoint.next()) {
            result.push(endpoint.sys_id);
        }
        return result;
    },

    /**
     * Returns a encoded query for subnet filtering based on the env.
     * 
     * @param {string} envSysId SysId of the env
     */
    getSubnetRefQual: function(envSysId) {
        var subnetList = new GlideRecord('x_nuta2_nutanix_ca_subnet');
        // below sub query will filter out all the subnets which doesn't below to envSysId
        var joinByMtom = subnetList.addJoinQuery('x_nuta2_nutanix_ca_environment_subnet_mtom', 'uuid', 'subnet_uuid');
        joinByMtom.addCondition('environment_uuid', envSysId);

        subnetList.query();
        var subnetRefs = [];
        while (subnetList.next()) {
            subnetRefs.push(subnetList.getValue('sys_id'));
        }
        return 'sys_idIN' + subnetRefs.join(',');
    },
    type: 'Nutanix_FetchConfigureSettingDropdown'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-28 19:21:56&lt;/sys_created_on&gt;&lt;sys_id&gt;92e8017f37112300fdfc097973990e33&lt;/sys_id&gt;&lt;sys_mod_count&gt;1172&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_FetchConfigureSettingDropdown&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_92e8017f37112300fdfc097973990e33&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-06-04 09:41:30&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>1797949117</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>96ab0533c3d4569064971612b4013150</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c319b0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Nutanix_FetchConfigureSettingDropdown</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>9a10338adf660210661f3b27d3432e61</update_guid>
<update_guid_history>9a10338adf660210661f3b27d3432e61:1797949117,f72e6f0e866a4210fffa65e7be647527:-445703363,4716afcaa6260210886c6a0018548135:1464210595,f415a7ca3d260210bff0286ae8df8464:318836822,0ace07348dee4a90f8ad667a1f735e38:-807588183,fb3d4ff8baae4a90b0b2dc4507a49131:1627644413,17afeeb40f2e4a90d8941cda9e4a3c6f:1573171176,c05a2e70ba2e4a90a597fffb3db0a16e:-2048891128,a727a6b810ea4a90cb6a572ca3e4c874:-1437714690,99ec01b9c246c2109482614ea174019b:1883125461,fce48d31ae46c2105d605db0ce368833:-424897041,e06385fd0606c210fe6d5e30ced10c5a:-175850698,edc08d79b806c210178eb2a581b1c8cc:627756587,70404db1f706c210fa4e5eaf0dc87c07:-2027864559,12cf74f9b606c210edb221c04d734c63:758054459,0972703936c2c2104f713ab5f0d0e2d2:-845130271,054ad2e9d5c68210b559fc52ce621598:-2065509402,68c91e69f6c68210006a9c25661daba1:-843162804,18891e69ebc6821054f26404ed810d9d:-1795243170,49295e6952c682100eb48855504ed9df:-1164349420,9b8492e1d8c682104ed372bd50618373:216160193,48635e21d3c6821092a4638c191b86bf:-1074972423,4d92d621c9c6821030c00b3bcf82785f:1568443340,8422122167c6821045404bb37523377a:865124204,8d705ea94d8682102635a6ce432c44fc:1093144730,edabc6e5d68682107395abf76cdac38b:428366766,5efac6a5bf8682108e21ac29f532fdf1:-1674861312,8fe94e25d386821039f7f151445744e7:500343840,17568ee92346821095087d4f016c7836:-5003938,ac2843621ab9c250ee65b1bb692d0bef:671779659,b93ede2574758e103055011fe2e2a3a7:1427308538,7ebc12a135758e10cccfcb1fb44a9936:1328940790,06eb83621d3d0650692d389952505ac4:998527671,122550f315c286d0bac8ef35271719e9:-1426191336,f60da7d502cd421045238a1e15b9190d:-1730037279,10fce319f5cd4210752acec837b26fec:1162577488,ea70dfd1c84d421046526c941e7b1fad:-1730037279,1650fa11f8894210fdfa416b1fee2e01:1220923664,2280f600ec0d02509e22d85326d672ec:1220868985,4e2cc283e2a00210b0e2154a8eaec64f:606454567,8f662e742d3c4210dcd895afe7f7b3a2:-1004851218,c9a56e34723c4210c5389228ae45cb49:39539514,97ab5e34def8421064e411d8ce02b2cc:1356304099,ab10c03e0aad8210839cf751392f03d9:-1615948732,ebcfb32e94ad8210bd532e58cd5c3c43:-903861584,1c8f332619ed82108fba10049c679d98:1321540204,12ae23d0a2200e10cc3b3c78efa4a359:-903861584,280c609041dc0e90a2ca08408f23a956:1903227371,5e7aa85036dc0e9084cf0d3af8576d59:-1212501093,cb58fd036c337550b88958d829fff645:1812914777,bf1269c734bf3550c20261610a11e6c1:1942357440,f502d9cfc23f3550da495097ecaf7811:1812914777,9630d6c6127b31507604f597ecddc56f:-2032321410,2f56b756ed9fb550d3a24aecb47c2795:-2059737639,7536fb568e9fb5504e141e6240c08b84:1942425697,5ec53b564d9fb550f4b4df0fc16ee398:710882995,0b55b756649fb550521b37d1050e8c57:-266133770,83e47f92e49fb5508e65b2b769782da5:1820946902,4f2faf5a3a5fb550c9cf83f4b8ed15ab:-1130720123,48d8fe1efb5bb550d9929e73923f3e6a:-1514365432,7c7732165c5bb550d9744f88e54befc2:-1410690706,3aecfa484ad73d108b9f5fad3a3d3167:-1427275743,b36cfa48abd73d10eca8af4a51f65762:549693973,c5b53488c7c4fd50d7f89a98e257f5b1:-1472555655,ea3dc2ead700311021a15def865ae4f9:849329730,c5b53488c7c4fd50d7f89a98e257f5b1:-1472555655,205e3c4cd0803110d701f2de9a314ddf:849329730,c5b53488c7c4fd50d7f89a98e257f5b1:-1472555655,eb4e3df3fc272d10fe46eaa8a781d4da:849329730,8be494b9dbd3651070060b164c90c5ec:-1616386081,7aef00b5e8d365101fc0e68b236ac8ca:2139554855,b93c984cd6003110e6fd5cf522a93e52:-740260978,4413d15b345b6d10d038672d04fba5a8:-1844986799,16b215d7405b6d10d9fef01730e3e218:970340293,9d92195b735b6d1099f53077fa15ba2b:63503826,72bfc1971f5b6d1060ef4102f2e66f29:-178338002,573bcddfc41b6d103175b515c5e21bb5:950069374,79386ffa62dbe91017cdec8fbf5b16e2:139167716,6c1767fa44dbe9101435cbf6ebd9bffe:255586910,d403588e271fe510a78667fdfe5e92bc:-810825747,a0efc0caa11fe51012673aeb2488b171:612316145,679f488ac91fe51045314f5e68b8b7a3:-1733857724,341fc40aa91fe51006f66463aaef0aca:1078719290,bbadcc0a061fe510aed004213241b795:-1888241445,525c48c61e1fe51028c7a158fd2bb8dd:-1465552824,ec4aff68ca97a11068233aca244e447d:498223880,bbbe572427d3a11088a6be0f3f3a032c:-1509209295,1f0e572404d3a110b6d172d142af9227:838165738,4c4dd3a0cdd3a110febb5fa455fcc773:1716055172,8b748c289697611046253fb03694d083:754086205,54738828a9976110fa4b82b7a61623b9:-1981381082,f4e807178843211000c244ac5db269fd:-2109934040,490344b7c8781110131bc8f3c57326b2:-740260978,0cc142904f43a410b55e01c05af4925d:1022906318,db5182505c43a41094a4fd617c7caeec:-771489008,8e1e3d1cad03a4107ff12f1782975335:1105681002,1ea8651c18cf6410e136ad0f261d9338:-1535919305,e2f625585fcf6410c67501b24f36f3de:-642506237,18ff7c42d9eda110bc53f502a568231b:1794321666,490344b7c8781110131bc8f3c57326b2:-740260978,0f702118c20f6410e286068acc4f1c5d:268562370,6cebcd90718b6410409e39218cfddc55:-1184001241,79d84d10938b6410f2b261c6f95a93c6:372349735,3e89b2218c6d61104367dc206b252808:1794321666,490344b7c8781110131bc8f3c57326b2:-740260978,4fc23b789ae6609054bde04c88b04027:-1741995643,5e729d80c9e9e91087f6e66fea7b4826:1794321666,490344b7c8781110131bc8f3c57326b2:-740260978,42fe172ba1b411108683841b37ccfdbe:-2068073747,cf3e300d4460111039ce35a51ebfcdbb:-1412484845,2071031826ac55108dfb4281070e83a5:9791761,978e3ed0ddac55100ef2345bff258a2d:408703571,ed7eba5464ac5510539549d869c17bfd:-211247343,c9cd7e90f5ac551059a09e09e6ce4205:2119395722,0191999092685510ef7c507e00edcf8a:1083737099,4c4c8ae626101110d05a630f20274bfc:462139545,9d41c1e86ee00110494e713217c77656:-1169937937,21f855521d58c110860fe1829c651188:-1525968271,8049b85ae294c1100d3f14c1c488a7a1:-1943165444,c6b1a8169d54c110b12e95015c28b274:-1690281315,cce687c03c48b010589b8aadc48a3a51:38174229,82fa7cbd8ee56010c06959ba5b54798a:-444326630,b344739ba9fc60103034054d3cef72d1:1058007058,da475079f6482010048ae56cd636e105:2135817944,e58d53d4da2c1410cbd018fd1f0f0f78:523837316,f32d17541c2c1410e483122450d923dc:1501222418,52ac5794fc2c141084970804935080eb:197809562,723cd754202c14108f7d37ffd133069f:39746879,588b1794062c1410c193529af737cf9e:1770578955,fe34a934042b70101bf8ae461123928a:-444486626,c4628d78286770109f2ef96df1632065:306113596,a633f31cc26730108af9f071d8169bce:1350158924,4a6fe398366730103dbb0cf051280c59:-2044169201,771d2394026730106b1ce763423adaa8:1533728105,4a312b987527301027be671b0b44eb50:-2012577752,769d9b949e2730109d2cb36f7924b8ae:120492489,1fcc0684cce77010c1a362ec288a8c27:919800152,ee6c927fa9db3010435e5d1df5ec3851:-1947425621,fc39debb95db3010d6f49bdac4d1eec9:337184920,58c55a77acdb301073f74395aea435d4:-1282096335,040116f3bbdb3010b59e933c3fdcd3d5:500119692,8bce4a3353db30105d8d9d59d0592201:-15011104,45138e3ba99b30104590a6625f7b5f33:1322202534,693dedb3485b30109369a854d02778b4:334911136,f64be9b31b5b3010ce199838aa2b3b63:974990394,26d5e57f771b30100bf0bc88fd709459:-891464518,5901653f26d73010724798ebca48b69a:-676594109,adff81fbb4d730109c23e98babb5c879:630546008,9fc490bfcf533010232f080729378ade:-1665791456,d54394fb725330108a5e186eb7918cdb:-135174421,d47190fb8e53301096a56210829eee09:-666200001,04ffccbb76533010676772045478a7b0:-426019459,df6830674f5b3010143a0da8d8825d83:-666200001,2cc1b42f351b3010c9035dc55844e376:-899913196,8d7fa0abe11b30100e6dcb6e065dbada:-2091169942,201aa8270b1b3010c8c25b6ece3a4079:1466036099,65b004a3a9973010b4fe57ba16053cc0:2144379685,739e37934c97301042a0bf546d200594:-1016296333,302df79f46573010a9693f838e7e7d70:1690780373,ece93b5f055730103b09756670599502:819105838,c7d56fd78a933010885014327b45dfe8:-1619415307,7029deba1adbb0109e2b535ee0f9b395:342974133,5545de76bcdbb010482eb8ab44812e9d:-1278286156,c492de360adbb010e16b7bab4055b448:-145616876,5a4112b280dbb01053b68682d25edde3:-615554271,96609a3219dbb0107b30fd5e0d3eccbc:210784659,c91f8a322bdbb0104e3dd9333d57f72a:434569410,8aec86fe389bb0108347eed755a94e35:257011277,739b8e7e9a9bb010643969b3011409b1:1394541738,efc94efad99bb010133201e011022f6d:948938900,88c802fae39bb010546d64106c25544a:1199897254,b3f34e769c9bb010bd7f84981b73b016:-1561321346,cb720a76139bb01084463b2b40d92ed6:1494981099,d3413576215bb010d9dd1e3508647cdb:464835918,434c6172325bb0102caaee1aaf217405:-709113024,eec92172cd5bb010b1051d46a697c2bf:-1829513966,c9d5e53eb11bb01004f58bb83f949fb4:-622768228,fdd3edba1b1bb010cf49fcfcf4cd28cc:3555729,ef03697a721bb010309c11994be46c2b:-1020478525,fcc02d3a351bb010e7640bcfa78c82e7:-323508452,73af19b6881bb01073a4f4a2940e8afb:477201184,165dd576b61bb01042a742e4948dc14f:1939202395,d4ac5936251bb010e884648aea282b3b:-653657669,241c55b2601bb010e6ca5cdff8dd478b:-1739400341,10fa5572641bb0102b44f7a26a8abc14:-1396435955,a6a115be9a17b0100bde55d9fb320ba7:-1338461847,9577857a6f17b0102926e1bcaffa90d0:-1768556915,4c6341366d17b0104401f37dea2758f2:-1557188629,130efc7e4dd3b010b3a6d5c8a0a98d26:-1633425306,33b8747a59d3b010d2e5385d95f73887:581614605,5210a9e2d79b7010dd267e6dcfe9f9c1:-1685501086,7c915da6785b701030a20089651534f4:1372751514,143e05e2345b7010968b88d3ee18d90d:1164748862,6c535c6ee45770103749d2dd346c63d3:-1491062306,371e6bd2d8177010fd065fbf7b7c7414:1168562462,f68ae71e7fd37010fac2a0d0d12791e5:-1370102497,7723e31a5ad370104453da087dd5fea4:228515426,e82f832446a210505fba885585e4ec8b:-1386638834,bcce0f60caa210504a0ffa6d8dd28754:1503845636,927405bb40cf14d03be43f5cf741cd34:1253164152,8f01c5f7aecf14d0a60716296ececa97:-1307537833,74aeb4775bcf14d0ab77d48ac7ef8d87:-814162685,2849e43b128f14d0686f4f63bb882b72:-1304879588,b7d728f7838f14d072ee824934f62f0c:-1919529937,409424776a8f14d04542fe48964ecb7c:2040717836,d082e0f39e8f14d0e1139a6a4b1e2106:1166596144,32c436afd54b14d02a5f584888621b60:-939698524,55ef66abd74b14d0927a8850214cae04:828884106,81cda66b3d4b14d057837063dbac9437:-1193165360,bbcbaee7f34b14d032b4c2a017e80c8f:-797765290,ba176e23a34b14d06937a73e3b287662:1855970005,a8185e6b9a0b14d06d6c6dcca1565cc4:1432230451,8347d26b750b14d0ffe8e2fc852a9601:-1177732035,ae45d6e7fe0b14d032387caab8a9c1e7:506188180,574906af3ac714d00ae3e490e7a72a9b:600189882,72b50e6ba3c714d0a5f3bebb75a35f89:111868821,36714aa74ec714d051211abc485dbd81:-455019881,85fbb9ef1c8714d08da8be5e63210891:1801941744,2cc7fd2fa68714d07c6d8b731cf6de46:-1158183517,b3d5b92f768714d092c698ac77ba5110:548831125,6cc375ab608714d07632216e6d3fcd7e:1213772012,e34231abba8714d05ac947e04e49491e:-1849435034,4aa03d2b748714d07a9727fcee94e6de:-1623852957,c10f69e71c8714d02c67be097b5c18a2:1315172489,635955a7344714d03ea516ae899052dd:1032076,cb67a0239fc314d0da924ac758344553:-534418883,cff4e2ddffbad090f23ba249f90b0406:1032076,92f3a61df9bad090d2b458092b174cdb:1030026200,6c0066d9b3bad09099eb9de3b78f531c:1032076,447b0ed9c77ad090feffb27e5ccce497:-646180332,ced7507407721090ba5354f095e7fdfc:1032076,90471c7045321090aabef76e55002443:890772602,726ff36c7bb69c50c54fe7a5c8cddb6a:791098952,352f7f2463b69c50f31505b3a8e9ddb7:-663059362,7938ef205cfa5c5020ccb2ab2c8504ba:1310420952,f5ed536ce57a5c503784b2ce79dac9f1:-738625132,0b7bdfa8bd7a5c5037a568bee581ba3d:1752835752,b424052cb6f25c50c50be9f71eb4f040:916064478,6272c1a040f25c5004b5dd9fd8caa65e:1752835752,c630328c947ed850051c283f26eb07b3:-663059362,fefe3d4c9ebad8508859c9bb65b3dd2d:1991454014,daa1085be72a18500e221c8d649fa07d:892773124,4d5b6f8b3ce61850c90f4b6db5824615:2112763808,b5075b0b14a61850d1f05761ed54e80b:-51532318,0ebec30b0ba61850524a930d8060be6a:375975200,de7e86cfe4e21850e8cf0dd4d9fb02e2:1433662399,78102d8f28221850b586d642e242b301:161289538,1fb462b2606ad450dc55f2d7b16418c7:995294380,ebe5c27eaae6d4504bab5180ab9b883f:1242783893,596aadba51a6d450d0fa58e9a4826f06:-984038265,b808297acaa6d450628e946954c0de86:-1529208654,08e465f671a6d4503e837cfd4c3ea7fe:616294025,b21445761826d450d2dcac6a125f4ff0:2026175691,e59b49ca13c73010215d559b17fd1db1:-2105981447,3248050a268730108cf3ac932adbfa08:704567651,97eaf3892f3ef0101da9e1cdb1f7ac47:1151742381,28fc9bcd7dbaf0107f786cd39082d2be:-250966613,a0235eb47a7ab0108d713453e4221411:873704560,805252b46e7ab0108c04c37d26393ff3:-1960630233,d7e15af0e37ab010e772ef70d6101102:-261863267,e455715cbb6ab010521108f395946643:1192269135,c0c4bd1c0d6ab010e763d745a39480c5:921288924,2754fdd8ca6ab01098e2420daebf0046:1192269135,e25c2e637fd23010bca0173b7afb567d:462749930,7611a04888a230103001a1fe1a9afc0f:-552488189,519d8c08b66230104c4ef2586965c338:-426664617,a1378000dc62301064ed4c540b0be4a7:-1051784216,9a1d373bdc12301059b8c0735756603e:-1536045497,e36b736b669a30104a5dff6680b4f98d:2113678893,82a73367849a3010dc6f3f32d89b4f5a:-824565588,d0765e7f03c63010572ec63dfff09541:1319787150,f53bec9b07023010b780dcd646754a8f:1537382062,a5ec701e64c2f010774ef12ed99ddd2c:-668342364,946cf01acbc2f010b149571fbdc5dfec:471912611,fdbd7c9f663130108e935930327551cc:-856290892,f97b3c9f79313010322410999bce70ab:-1080327975,63ddbaee47713010a5b40ac8d5fd238b:7783624,acec3eae3671301042381b091b40a384:728680213,1c7cf2ae08713010a9120a1e410d4293:-101488033,c2672aea61313010c16ed530c7712791:994522260,46d6a6ea41313010a7e11be7fa4a45c2:599996975,7d662eaa7c313010d8052e7c56290f40:4674559,e9d5aeaaff313010991a1a1b858ecf2c:-1685073889,3d83a266ec3130101c755659bb7c25a3:-45896996,efc3be1580b93010043e95f3ae70dd39:1325424792,da82fe911cb9301081f9e9e75c12feb5:2146760924,736feadd777930103937d61d620e87b1:-1020287090,0fdcc1b8f4753010bb266ab7991992be:-1666133018,eea5c134287530106209ebc935b2b267:1806406248,788adc746df13010b95df7502ad662ad:1407253902,2b8e1df9294930d0bcb01930a5f0e281:1920179135,5bda98b5768130d0e5f96e0b00357bb7:2136536376,bae81475938130d025e7f0a07a8a0ccb:1459598236,0b5898759c8130d0df18f7202f7f61e7:632485612,3a191c21efc1fc90a480853bfbe55897:28323489,e004986d9581fc90008d2f0ee05a96f2:-1977693839,6d6a1c180785f8900d6db1c80b565464:-304962801,8d136b08c801f890fd6efd7278fd29eb:2136536376,a21846f64bb0b49021a8f49708e2f6e0:127240431,0aa2d8c0337038502317db3ac8f935ae:1239550653,17fe3d87496034503f8fd41d5f457c11:-1673663318,5765b903ad603450bea8a2e54c7c1db7:1183651816,6cc03d0f322034500a026a83dabd090e:1242596767,855521c3342034501cd9f6dc2b211b19:200474495,7d1fe7b6eba8b050582be6827c2594de:-1102105114,0d2eaf36e6a8b05088c5ff2a59dbeb44:-1555336913,a56ba3b26aa8b0500386dfb31d94cb98:301137909,b659ab7279a8b0500e4492d5eaeb5201:-451636723,1ad4f57e9724b0506a629bb97cd3bd5f:1118639926,a3f3793e6224b05055eb7efaca1849a7:2057474883,64a3f53eb124b050f5dcb3fae13136fc:1138314755,1c013d7a6724b05011e81e7d3912badf:-1724230354,ee507d7a4324b050c27e9bb8218e70d0:957503790,ebbf2df6bb24b0503f1638e05eccaf13:867257339,32ae2df65e24b050394791105b9410cb:205662357,b5a59762aee87050dfaff2c4e0b18ff4:167114965,2624936236e8705025bbcb8572661a47:-1183534734,c1221bee81a87050bad97ac500d8a6cb:-1484761285,0d57b212edac30507d92d5525bc3cdf9:-86596639,6056aad607e830508d2fab9a7b7c5c0b:-305047310,210ef79de72cb810feaa73d1c8d3caff:1177603790,d685cb6cf8621050f2d8ee903a91208d:663072604,58c343e8166210501121c91337b01476:-853603779,26fff92c5daedc1038dde426b5eb03ff:-1386638834,48d169a4fc6edc10df9a737dc9f6128a:-158595156,d1fe7420bd2edc1064bc06925ec5f969:1584855737,3c3befb93896d4106249b5e2ed8e2c86:-741850597,68a354f9251a941035e44fc33dc81c6a:-1551584823,10eb277e6611b0102db4385d0f6af765:1675493364,04cf537ee4dd7010674925d8ded9a7c1:-1199078220,0f5f5f3e93dd70100898fc66bdf08d0b:-1380987901,12b91b36199d70100e79546a7fbea103:-1946415153,1ef65ff29c9d7010b8d144a7a8f96acb:-980841248,2562177a485d701065f0e9568d01617b:1194640238,c86097fadf5d701048981ad0f30a6f06:396222681,a94383328d5d7010645b39621d8d19e3:-1911708472,fe6f7e3e641d7010ef82e56f4bc6ec8c:997084937,4eb254b6335570105c319640f4603e3a:1995015182,ea12dc3629557010f5e2c767134d3352:-45263053,2eb09cfea91570100e0a6552222c811b:-942282625,9820987249557010074ef48c6804230b:2098852659,497f00f264557010ba81d84f28cbda6d:1063776097,f13f40f222557010532cd07bd648459e:633925467,fb1f08fe5d15701004884d6ad514c16a:-662182354,24aac8be7e157010eff686c1afa4467b:1603460464,a679843e42157010b918a812a7d8b3c5:23593315,e236043e3c157010099a9770aaf479ef:1937440259,b5b344ba69157010b6ab9c82380c4a11:1603460464,0571f196541130109834a882edf8c4ff:-511336411,da6039d2c7113010da45815274a9c37f:-43316648,ad480e4af2d530108c1db09c2caf3efb:519547409,657b80f4d9553010019e2965966fd8a1:1483817554,7dde3fa0d01530106b060350605a14bd:-1160137940,6281dfac621130103691860b510d4ead:989132657,fc0910a036d970106bdafd417ce3c686:1023004032,d63c80e4f59970109a595263cfd2b36a:-718598289,97b98024f8997010f8afcaccf507c240:-1035101819,c1874c60c3997010d9d8bb70929c38e1:-2061192699,53474ce072997010ace9b960d6a24ecf:-816318310,914b4a48fdd53010bd2902694309b973:-311660899,bf47f97bb785b01092f706a0336bff57:1313449184,ce75f9f7d385b01019d4e3365a5e36cf:-644527820,6b14f937f385b01086c38678d8f3f210:1127657804,f2a1b9f37985b010fadf58bd2fb8238a:1018747068,30c5f43b4a41b010c91b70acd109039a:1971399477,183ef8673409b4105cfe46a265567670:-1813797782,e9fdf0e7aa85b410cf2a60f2e4be97d1:-1214605052,1675bb533345b410207adeaf8fd08a36:1083601298,db0b44923649b0101bc50b24f27dda60:-676139507,63f648de4b09b010a8a40be462b0793e:-570592153,582d7b0e33c5b010f0ae0da5906583b3:254995622,156c374a11c5b01019bed56673c10ed1:-974123011,86087b4218c5b010575e63898216be98:1350026723,c4f9d342a485b010e5c3a4c201165431:843388546,5d569f4ed445b0102b2cfbceea3fa2f2:1647189228,c502d706d745b01077c362e6df4ed1e2:-173643514,da3a5a02ec81b010b383ff37a71b58d3:-770803244,56c35a0af641b0109e5eded5e4a5f68b:-345274263,0ba6bd4ecb8d7010d42847eef6d934e6:904607225,4d970779e9c57010b36263544418d0a8:1960480476,799b7631a7c57010d8b63aeb2ceabae2:-1374403865,5e473a75a1857010ebeb599d48586421:-537143719,dc1a1af1626368103071190e0cd3ebbd:-2133271558,171070bd822f2810b1cca3b323b0a61b:-1080478846,ef5f647d0d2f2810cb81dfc716aaf8db:144450568,722da07d3ce320105e933a8675af2bc9:1070972202,55ddeee9aa2368100d8f7d9fec627730:1705771107,25b52225eb236810fdc06fcbabb0df1d:-1047691869,851996e558ef2810650ab08963992a6b:877118339,33f896e596ef281048a1847efe3b3cf7:-574231244,4ad61ea5f1ef2810d7ecce55aeae5915:1309898342,10ae8ae96caf2810274c541eb66f47f2:-1771617287,86e886a94daf2810f5531635c01174b9:1371637024,6f57ce29e9af2810e819b97f969eb823:984609344,1b0e53d53ae72810a947651a23a3cb2c:757898459,d64d935553e72810b820716e21f80e97:-416542344,8d0b1b1533e7281089c726711e6fc451:-637335441,0e58d3912fe72810aa11d312ac04b033:-1746639800,b82987d1e8a72810b4612bad36d6c177:-1962918436,f8c58391b7a7281018b6848d33dd63bb:-1814763041,08a36071f7ebe090585a465ea3f591fe:2082505813,6761e43101ebe090c4108d71b574a8b2:-2064383943,74f3d2a97e27e090ce6d48e3aa28eeb4:-2064383943,72d5d515c5e7a850bd1deb02d4bcc27e:-1540792305,30968f89f9af6850273f69925d5c067e:-1312079952,03b18b052daf685034369103718b7cd6:-1646452344,54b77249a16f685073a6d0c2cd872575:474146935,3b9732491e6f6850fff4364971f0df95:-1991824160,9ef57e45ec6f6850b51a5532166af05a:-604152711,90ef2a01126f685074219b4143e8a359:474146935,9d5ea6c95e2f68504cd29f62995301d8:-618774476,c73baac9572f6850ac723f7566748191:1377109895,92c922499f2f6850fb737c271a15faef:-1185166433,bee72a45a02f6850859e6798595f0869:1504318555,f5056e41572f6850e03dfeb352588ef7:-1650406398,3fd3aa41042f68508b80f769b8b83b70:-2090521745,c7a50649022b6850a9e609265c80415a:1329562538,3ad40649822b68509bda9038a8b109ad:-194577971,c9d20a09272b68502aa4b827e504250a:-1753107273,4fa2c609192b68505c5200d470e782b1:-413972342,a6f14e853a2b685024e5b34a89fbd688:-671454806,f0210a456f2b68508121259f76fd0b88:-1046886297,e00c3dcd3de7685038f3ee1997025a40:-854534071,6519bd0d04e76850e8180d487ba0cdd6:2119584952,3557bd892ae76850a30e070e708b92f6:-693808524,2f35b9c5f8e76850e31850a5037f8dab:187274079,889669c9e3a768505fcf07d57dde6719:1643862647,6985ad4948a768507fab5efbf5e7aff9:-1364513586,878269c586a768509c44ae9bf737727e:796188115,4701694528a768509e57d211b19077fc:-466294781,7dff154503a7685006d5c5c758abed78:493005244,704fdd0573a7685089c283ec1c341bbd:-794443354,c62f1d0537a7685060c15b14f8aac073:521568758,b54e91c1daa768507c841f693d91437f:1798092133,2f3d15013ea7685084459aa0d877a967:342509594,0c795109be676850be9561fdd6b84c57:-2034756840,6a5695cdfc276850ce32994d34b5f8fa:384135430,edef05c1732768503145d5aeebe9169f:-855634196,2deb4d4d1ee3685031c142aabb211087:1321120786,b65609816ee368503bf1c3846759c453:-272459592,1e31450daca36850f549bc6bee81a16a:350307520,b838b0414aa36850021ee4b72c186462:-303892314,4c08fc01b1a36850dbf5d7da942359d7:487693920,c6d5bc8949636850079a17618f989fb8:607648500,20e2c0f03aefe450988e16f546df78a1:1788259448,7740887852afe45005b7e88906cb9491:-1819625407,26adbfe01bafe45007045f08832c549d:-526519413,37927ba4782fe450dea991c6fb669a47:-1872006103,792fa36cdfebe450e925ed33ff9909c8:-1335070983,543ceba4baebe450550277700a518748:1636726073,713fb624be67e450094ab4ec3d5b9e3a:1318226497,d9c9df9873eba45071acc9bad8eb115a:-1995709934,b7f6db142aeba45094640bc03aceea1d:1841716886,551b7654b22ba4504275cae174a0e6bf:-1094026851,ecca3e90fe2ba45048f3c5ccca3ccb39:8664761,6fba3ed0af2ba4508d51d4d43a6f603c:-123638791,7379fa90ee2ba4509752760fbdb558db:-2015188203,e1487e502c2ba45093dd1beb079ee185:-1179735463,72673250882ba4507330fe6d356ce2dd:719242598,3d0576dc90e7a450366f6462e5a970b0:1615842571,96e3f69ce6e7a4506222fa2b69006a2a:-1611958917,f023b25cf1e7a4508f58830dedef5f4a:993271905,c3e276d870e7a450d3a127583546463e:1316048017,90c032d8c8e7a450f3e332018c69153d:483615243,225c5a18d067a45058d5dc928f071b83:1445164021,41fbd2d44567a450bfecb6cc7fccca65:111297173,eb211a9cf027a4506c43dac33004d5cf:-530280571,75809a1c7627a450c2b0cfd8eee4a2fc:1054190313,bd3a69d01faf6450dee1ffdea1e2f3fc:-1128233911,b1400de3e81fe050cb178d9313f4f949:-1077121947,0676702fb9dbe050c458766fcb2bb298:-739628381,de83386b11dbe0509a01b9ea4320eb23:1718495943,0f43fc6bfbdbe0506945d696e8ca95af:1458041447,4b4c206f3d9be05006bf768e0ac7b78e:1381829081,bef660e7cf9be0502176f28906ac8925:2045679626,1ef16467cb9be050093b6ed36fb33c11:1541559164,aff0a0270f9be050936aec18f6682e67:-3333430,819f58a3319be0509d94987e04c72287:1541559164,d13c50af4e5be05087582539c4d26fd1:1080183836,1a9ad0aff85be05004da326d2b6faa40:-339965124,428a90afac5be0508cff7abf30c37a53:1573414172,cd8694e7835be0500ae107e043080392:-1591943620,99a49ce38d5be0502dbb909bbd97441f:715077884,4d6394e3015be0508f601a3f8a01df80:1928003638,ec3054230d5be050227f0873b588a4cf:318739150,eae10063cb1be050b965c2f35a10e9a0:-831315305,4a3a33db4bd7e050d779955cc4b907ec:-487482185,a01afbdb97d7e050760ba45b5332ecdf:-246057875,9959bb5b36d7e050267a9fa34f4c2c85:-1776986255,7bb593538c57e050f6d142f1665906d4:-684688587,12249f13ee57e050873dd23c0e5c1789:1693100809,b146321fa193e05038bf5de036e03108:327449037,b2e956d70f13e05038e2fe58b3d11057:-782348691,21501183c113a0501e6ec8f632be6ca2:-1412488403,1591d176d057605000d6828fb93a1c30:1210687098,a35b053280576050896da340d5efe582:-1677172880,c4dd16cb98df2010cd81a77b9cc98353:-849773821,3fc85ac763df201059217e7f36bc5ee2:-1178056937,a8e943c5e89f2410296b3418212fed20:-1114171696,dd2d2a05541f2410948ed524d35080c1:-1323154125,5edbdef0395fe010d49e1890ccbb8c4e:273485267</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>DELETE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_c7484cb82f77a1904627de1a2799b646</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="DELETE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 06:32:32</sys_created_on><sys_id>c7484cb82f77a1904627de1a2799b646</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.user</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_security_acl display_value="x_nuta2_nutanix_ca_environment_subnet_mtom">07484cb82f77a1904627de1a2799b643</sys_security_acl><sys_update_name>sys_security_acl_role_c7484cb82f77a1904627de1a2799b646</sys_update_name><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 06:32:32</sys_updated_on><sys_user_role display_value="x_nuta2_nutanix_ca.user" name="x_nuta2_nutanix_ca.user">3376fd254f452b001200e5201310c717</sys_user_role></sys_security_acl_role></record_update>]]></payload>
<payload_hash>-268693906</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>96ab0533c3d4569064971612b4013153</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30a30000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.user</target_name>
<type>Access Roles</type>
<update_domain>global</update_domain>
<update_guid>4a7ff507446942105d31429f60ac216a</update_guid>
<update_guid_history>4a7ff507446942105d31429f60ac216a:-268693906,5ca34d7c16fba19093eef90745d172ff:407409169,93484cb89777a19008205ed6fac8e848:407409169</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_nutanix_calm_credential_password</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="password" table="x_nuta2_nutanix_ca_nutanix_calm_credential"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;Password&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;password&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;formula/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value=""&gt;password2&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;255&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_nutanix_calm_credential&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-20 23:42:12&lt;/sys_created_on&gt;&lt;sys_id&gt;bfd7a01737fda300fdfc097973990ee9&lt;/sys_id&gt;&lt;sys_name&gt;Password&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_nutanix_calm_credential_password&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-01-08 07:48:49&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;virtual_type&gt;script&lt;/virtual_type&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>51675769</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>96ab4133c3d4569064971612b4013121</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f610000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_calm_credential</table>
<target_name>Credentials.Password</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>a40b89ea56633110b06b5d20b38cac5b</update_guid>
<update_guid_history>a40b89ea56633110b06b5d20b38cac5b:51675769,41486417b0fda3001a29187a173a4d85:876851411,be8f78cec4ada110b7b7459c630efd92:1137444765,41486417b0fda3001a29187a173a4d85:876851411,e1e83ae9a22d611028e0cf5f31820a9e:1137444765,41486417b0fda3001a29187a173a4d85:876851411,06e1958c10a9e910e7ccee74fb735099:1137444765,41486417b0fda3001a29187a173a4d85:876851411</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_documentation_x_nuta2_nutanix_ca_subnet_vpc_reference_uuid_en</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_documentation element="vpc_reference_uuid" label="VPC Reference UUID" language="en" table="x_nuta2_nutanix_ca_subnet"><sys_documentation action="INSERT_OR_UPDATE"><element>vpc_reference_uuid</element><help/><hint/><label>VPC Reference UUID</label><language>en</language><name>x_nuta2_nutanix_ca_subnet</name><plural>VPC Reference UUIDs</plural><sys_class_name>sys_documentation</sys_class_name><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-05-03 06:53:58</sys_created_on><sys_id>9ce69a37933d4a5090acfa497bba106f</sys_id><sys_mod_count>0</sys_mod_count><sys_name>VPC Reference UUID</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_documentation_x_nuta2_nutanix_ca_subnet_vpc_reference_uuid_en</sys_update_name><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-05-03 06:53:58</sys_updated_on><url/><url_target/></sys_documentation></sys_documentation></record_update>]]></payload>
<payload_hash>-982007281</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>96ab4133c3d4569064971612b4013124</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30ec0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_subnet</table>
<target_name>Subnet.VPC Reference UUID</target_name>
<type>Field Label</type>
<update_domain>global</update_domain>
<update_guid>90e69a37763d4a5044e3d1c911b13088</update_guid>
<update_guid_history>90e69a37763d4a5044e3d1c911b13088:-982007281</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_37c15d5f37896300fdfc097973990e1a</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ImportApplicationProfiles&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ImportApplicationProfiles&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ImportApplicationProfiles = Class.create();
Nutanix_ImportApplicationProfiles.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.dateFormat = gs.getProperty('glide.sys.date_format');
        this.timeFormat = gs.getProperty('glide.sys.time_format');
        this.order = 1;
    },


    _invalidateCatalogItem: function(CatSysId) {
        var grCat = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
        grCat.addQuery("blueprint", CatSysId);
        grCat.query();
        while (grCat.next()) {
            grCat.state = "inactive";
            grCat.update();
            this.logger.debug("Nutanix_ImportApplicationProfiles.processApplicationProfiles Deactivated catalog item " + grCat.item_name + "Logic associated profile deleted");
        }
    },

	_updateCatalogItem: function(profileVarArray, CatSysId, profileSysId) {
        try {
			gs.info('profileVarArray✅'+JSON.stringify(profileVarArray));
			gs.info(":catsysid:"+CatSysId+':profileSysId:'+profileSysId);
            var arr_var_updated = {};
            for (var i in profileVarArray) {
                arr_var_updated[profileVarArray[i].uuid] = {
                    "varType": this._returnVarType(profileVarArray[i])
                };
            }
            var grCat = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            grCat.addQuery("blueprint", CatSysId);
            grCat.addQuery('state', 'Active');
            grCat.query();
            while (grCat.next()) {
                gs.info(grCat.item_name.name + '' + "RV: Catalog item: " + grCat.getValue('item_name')+" "); 
                var cat_sys_id = grCat.getValue('item_name')+ '';
                var arr_var_current = {};
                var grCatVar = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                grCatVar.addQuery('application_profile', profileSysId);
                grCatVar.addQuery('type', 'Profile');
                grCatVar.addQuery('catalog_item', CatSysId);
                grCatVar.query();
                while (grCatVar.next()) {
                    var grCatVar2 = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                    grCatVar2.addQuery('uuid', grCatVar.uuid + '');
                    grCatVar2.addQuery('catalog_item', cat_sys_id);
                    grCatVar2.addQuery('isprofilevariable', 'true');
                    grCatVar2.query();
                    if (grCatVar2.next()) {
                        grCatVar2.default_value = grCatVar.default_value + '';
                        grCatVar2.runtime_config = grCatVar.runtime_config + '';
                        grCatVar2.is_hidden = grCatVar.is_hidden + '';
                        grCatVar2.field_regex = grCatVar.field_regex + '';
                        grCatVar2.field_json = grCatVar.field_json + '';
                        grCatVar2.data_type = grCatVar.data_type + '';
                        grCatVar2.value_type = grCatVar.value_type + '';
                        grCatVar2.update();

                        if (grCatVar.variable.question_text != grCatVar2.variable.question_text) { // if profile variable's name is changed
                            var column_fields = {};
                            column_fields.question_text = grCatVar.variable.question_text + '';
                            column_fields.name = grCatVar.variable.name + '';
                            var fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable(grCatVar2.getValue('variable'), column_fields, 'update');
                        }
                        if (grCatVar.variable.mandatory != grCatVar2.variable.mandatory) {
                            var column_fields = {};
                            column_fields.mandatory = grCatVar.variable.mandatory + '';
                            var fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable(grCatVar2.getValue('variable'), column_fields, 'update');
							
                        }
                        if (grCatVar.variable.type != grCatVar2.variable.type) {
                            var column_fields = {};
                            column_fields.type = grCatVar.variable.type + '';
                            var varType = arr_var_updated[grCatVar.uuid].varType;
                            if (varType.type == 21) {
                                column_fields.list_table = this.appUtil.configuration.table.dropDownTable + '';
                                column_fields.attributes = "glide_list";
                            }
                            var fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable(grCatVar2.getValue('variable'), column_fields, 'update');
                            if (varType.type + '' == '5' || varType.type + '' == '21') {
                                this._updateOtions(fieldSysd, varType.opt, varType.type);
                            }
                        }
                    } else {
                        this._invalidateCatalogItem(cat_sys_id);
                    }
                }
            }
        } catch (e) {
            this.logger.error("Error Nutanix_ImportApplicationProfiles._updateCatalogItem: Error:- " + e);
        }
    },
	
    _checkVarNegativeSync: function(profileVarArray, profileSysId, catSysId) {

        var arr_var_current = {};
        var arr_var_updated = {};

        var grCatVar = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        grCatVar.addQuery('application_profile', profileSysId);
        grCatVar.addQuery('type', 'Profile');
        grCatVar.addQuery('catalog_item', catSysId);
        grCatVar.query();
        while (grCatVar.next())
            arr_var_current[grCatVar.uuid] = {
                "variable": grCatVar.variable + "",
                "var_name": grCatVar.variable.question_text + ""
            };

        for (var i in profileVarArray)
            arr_var_updated[profileVarArray[i].uuid] = {
                "var_name": (profileVarArray[i].label &amp;&amp; (profileVarArray[i].label).trim() != "") ? profileVarArray[i].label + '' : profileVarArray[i].name + '',
                "var_value": profileVarArray[i].value + ""
            };

        for (var uuid in arr_var_current) {

            if (!(uuid in arr_var_updated) || (uuid in arr_var_updated &amp;&amp; (arr_var_current[uuid].var_name + "" != arr_var_updated[uuid].var_name + ""))) {

                if (!(uuid in arr_var_updated)) {
                    this.logger.debug("Nutanix_ImportApplicationProfiles._checkVarNegativeSync Deactivated catalog item  associated with blueprint " + catSysId + "as existing variable is deleted");
                    this._invalidateCatalogItem(catSysId);
                }
                var column_fields = {};
                column_fields.cat_item = "";
                var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(arr_var_current[uuid].variable + "", column_fields, 'update');
                var grCatVarDel = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                grCatVarDel.addQuery('catalog_item', catSysId + "");
                grCatVarDel.addQuery('uuid', uuid + "");
                grCatVarDel.query();
                while (grCatVarDel.next())
                    grCatVarDel.deleteRecord();
            }
        }
		for (var uuid in arr_var_updated) {
            if (!(uuid in arr_var_current)) {
                this.logger.debug("Nutanix_ImportApplicationProfiles._checkVarNegativeSync Deactivated catalog item  associated with blueprint " + catSysId + "as new variable is added.");
                this._invalidateCatalogItem(catSysId);
            }
        }
    },

    processApplicationProfiles: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles.processApplicationProfiles");

            var payload = this.appUtil.parse(current.payload);

            var catSysId = current.parameter + '';

            var activeProfiles = [];

            this._createContainer(catSysId);
            if (current.substrate) {
                var substrate = this.appUtil.parse(current.substrate);
                var sub_type_rel = [];

                for (var l = 0; l &lt; substrate.length; l++) {
                    var sub_entity = substrate[l];
                    sub_type_rel[l] = {
                        "uuid": sub_entity.uuid + "",
                        "type": (sub_entity.type + "").replace("_VM", "")
                    };
                }
            }
            for (var i = 0; i &lt; payload.length; i++) {
                this.logger.info("Retrieved Number of Application Profiles " + payload.length);
                var profile = payload[i];

                activeProfiles.push(profile.uuid + '');

                var profileGR = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
                profileGR.addQuery('uuid', profile.uuid + '');
                profileGR.query();

                var profileSysId;

                if (profileGR.next()) {
                    profileSysId = profileGR.sys_id;

                    profileGR.name = profile.name + '';
                    profileGR.description = profile.description + '';
                    profileGR.update();

                } else {
                    profileGR.initialize();
                    profileGR.name = profile.name + '';
                    profileGR.description = profile.description + '';
                    profileGR.uuid = (profile.uuid) ? profile.uuid + '' : '';
                    profileSysId = profileGR.insert();
                }

                this.logger.debug("Successful record insertion in App Profile Table. Record name:- " + profile.name);
                var variablesList = profile.variable_list;

                this._checkVarNegativeSync(variablesList, profileSysId, current.parameter);

                for (var j = 0; j &lt; variablesList.length; j++) {

                    var field = variablesList[j];
                    var fieldSysd = '';

                    var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                    fieldGR.addQuery('description', field.uuid + '');
                    fieldGR.addQuery('cat_item', current.parameter + '');
                    fieldGR.query();

                    var varType = this._returnVarType(field);
                    if (fieldGR.next()) {
                        var column_fields = {};
                        column_fields.type = varType.type + ''; //(field.type+'' == 'SECRET') ? 25 : 6;
                        column_fields.cat_item = current.parameter + '';
                        column_fields.active = true;
                        column_fields.question_text = (field.label &amp;&amp; (field.label).trim() != "") ? field.label + '' : field.name + '';
                        column_fields.name = field.name + '_' + profileSysId;
                        column_fields.tooltip = field.description + '';
                        column_fields.variable_width = '50';
                        column_fields.order = (11+j &lt; 99)? 11+j:98;
                        column_fields.description = field.uuid;
                        column_fields.show_help = true;
                        column_fields.help_text = (field.description + '') ? field.description + '' : '';
                        column_fields.mandatory = (field.is_mandatory + '') ? field.is_mandatory : '';
                        if (varType.type == 21) {
                            column_fields.list_table = this.appUtil.configuration.table.dropDownTable + '';
                            column_fields.attributes = "glide_list";
                        }
                        fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable(fieldGR.sys_id, column_fields, 'update');
                        this.logger.debug("Nutanix_ImportApplicationProfiles.processApplicationProfiles fieldSysd update: " + fieldSysd);
                        if (varType.type + '' == '5' || varType.type + '' == '21') {
                            this._updateOtions(fieldSysd, varType.opt, varType.type);

                        }

                    } else {
                        var column_fields = {};
                        column_fields.type = (varType).type + ''; //(field.type+'' == 'SECRET') ? 25 : 6;
                        column_fields.cat_item = current.parameter + '';
                        column_fields.active = true;
                        column_fields.question_text = (field.label &amp;&amp; (field.label).trim() != "") ? field.label + '' : field.name + '';
                        column_fields.name = field.name + '_' + profileSysId;
                        column_fields.tooltip = field.description + '';
                        column_fields.variable_width = '50';
                        column_fields.order = (11+j &lt; 99)? 11+j:98;
                        column_fields.description = field.uuid;
                        column_fields.show_help = true;
                        column_fields.help_text = (field.description + '') ? field.description + '' : '';
                        column_fields.mandatory = (field.is_mandatory + '') ? field.is_mandatory : '';
                        if (varType.type == 21) {
                            column_fields.list_table = this.appUtil.configuration.table.dropDownTable + '';
                            column_fields.attributes = "glide_list";
                        }
                        fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                        this.logger.debug("Nutanix_ImportApplicationProfiles.processApplicationProfiles insert fieldSysd : " + fieldSysd + " field.label : " + field.label + " field.label : " + field.label + " | " + (field.label &amp;&amp; (field.label).trim() != "") ? field.label + '' : field.name + '');
                        if (varType.type + '' == '5' || varType.type + '' == '21') {
                            this._updateOtions(fieldSysd, varType.opt, varType.type);
                        }
                    }

                    this._insertCatalogVariableProperties(profileSysId, field, fieldSysd, current.parameter + '', field.uuid);
                    this.order++;
                    this.logger.debug("Successful record insertion in App Profile Variable Set. Record Name:- " + field.name);
                }
                
				this._updateCatalogItem(variablesList, current.parameter, profileSysId);
				
                if (profile.deployment_create_list) {
                    var deployment = profile.deployment_create_list;
                    var provider = "";

                    //var len = deployment.length-1;
                    for (var k = 0; k &lt; deployment.length; k++) {
                        var dep_entity = deployment[k];
                        var subs_entity = (dep_entity.substrate_local_reference) ? dep_entity.substrate_local_reference.uuid : "";
                        for (var c = 0; c &lt; sub_type_rel.length; c++) {
                            var subs_rel_entity = sub_type_rel[c];
                            if (subs_rel_entity.uuid == subs_entity &amp;&amp; !provider.includes(subs_rel_entity.type)) {
                                //provider = (k != (deployment.length-1) ) ? provider + subs_rel_entity.type + "," : provider + subs_rel_entity.type + "";
                                provider = (k == 0) ? subs_rel_entity.type : provider + "," + subs_rel_entity.type + "";
                                break;
                            }
                        }
                    }

                }

                ///////
                var setProfileGR = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
                setProfileGR.addQuery('application_profile', profileSysId + '');
                setProfileGR.addQuery('catalog_item', current.parameter + '');
                setProfileGR.query();

                if (!setProfileGR.hasNext()) {
                    setProfileGR.initialize();
                    setProfileGR.application_profile = profileSysId + '';
                    setProfileGR.catalog_item = current.parameter + '';
                    setProfileGR.providers = provider;

                    setProfileGR.state = 'active';

                    setProfileGR.insert();

                    this.logger.info("Nutanix_ImportApplicationProfiles.processApplicationProfiles:" + setProfileGR.sys_id + " record inserted application_profile " + setProfileGR.application_profile + " catalog_item " + setProfileGR.catalog_item + " provider " + setProfileGR.providers + " state " + setProfileGR.state);
                } else if (setProfileGR.next()) {

                    setProfileGR.application_profile = profileSysId + '';
                    setProfileGR.catalog_item = current.parameter + '';
                    setProfileGR.providers = provider;

                    setProfileGR.state = 'active';

                    setProfileGR.update();
                    this.logger.info("Nutanix_ImportApplicationProfiles.processApplicationProfiles:" + setProfileGR.sys_id + " record updated application_profile " + setProfileGR.application_profile + " catalog_item " + setProfileGR.catalog_item + " provider " + setProfileGR.providers + " state " + setProfileGR.state);
                }

            }

            var queryString = 'state=active^catalog_item=' + current.parameter;

            for (var i in activeProfiles)
                queryString += '^application_profile.uuid!=' + activeProfiles[i];

            var inactiveProfileSysID = [];

            var gr = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + "");
            gr.addEncodedQuery(queryString);
            gr.query();

            while (gr.next()) {
                gr.state = 'inactive';
                gr.update();
                inactiveProfileSysID.push(gr.application_profile + '');
                this.logger.info("Nutanix_ImportApplicationProfiles.processApplicationProfiles: Deactivated catalogProfileRelation " + gr.sys_id);
            }

            // 			var inactiveCatItems = [];

            // 			var catGr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig+'');
            // 			catGr.addEncodedQuery('state!=inactive^state!=deleted^multiple_application_profileIN' + inactiveProfileSysID.toString());
            // 			catGr.query();

            // 			while(catGr.next()){

            // 				inactiveCatItems.push(catGr.item_name.name);

            // 				catGr.state = 'inactive';
            // 				catGr.update();			
            // 				this.logger.info("Nutanix_ImportApplicationProfiles.processApplicationProfiles: Deactivated catalog item "+catGr.item_name.name+" logic associated application profile mark inactive");
            // 			}

            // 			this.logger.info("Deactivated " + catGr.getRowCount() + " catalog items (" + inactiveCatItems.toString() + ") as there PRofiles got into a Non-Active State.");

        } catch (e) {
            this.logger.error("Error Nutanix_ImportApplicationProfiles.processApplicationProfiles: Error:- " + e);
        }

    },

    _updateOtions: function(fieldSysid, opt, type) {
        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles._updateOtions");
            if (type == 5) {
                var grQust = new GlideRecord('question_choice');
                grQust.addQuery('question', fieldSysid);
                grQust.query();
                while (grQust.next()) {
                    grQust.setValue('question', '');
                    grQust.update();
                }
                grQust.deleteMultiple();

                for (var i in opt) {
                    grQust = new GlideRecord('question_choice');
                    grQust.initialize();
                    grQust.sys_class_name = "question_choice";
                    grQust.question = fieldSysid + '';
                    grQust.text = opt[i] + '';
                    grQust.value = opt[i] + '';
                    grQust.insert();
                }
            } else if (type == 21) {
                var grQust = new GlideRecord(this.appUtil.configuration.table.dropDownTable);
                grQust.addQuery('variable', fieldSysid);
                grQust.deleteMultiple();

                for (var i in opt) {
                    grQust = new GlideRecord(this.appUtil.configuration.table.dropDownTable);
                    grQust.initialize();
                    grQust.variable = fieldSysid;
                    grQust.name = opt[i];
                    grQust.value = opt[i];
                    grQust.insert();
                }
                var fGR = new GlideRecord('item_option_new');
                fGR.addQuery('sys_id', fieldSysid);
                fGR.query();
                if (fGR.next()) {
                    var column_fields = {};
                    column_fields.reference_qual = "variable=" + fieldSysid;
                    var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(fGR.sys_id, column_fields, 'update');
                }

            }
        } catch (e) {
            this.logger.error("Inside Nutanix_ImportApplicationProfiles._updateOtions " + e);
        }

    },

    _returnVarType: function(field) {
        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles._returnVarType field.data_type " + field.data_type + " field.type " + field.type);
            var options;
            if (field.data_type + '' == "BASE") {
                if (field.type + '' == "EXEC_LOCAL" || field.type + '' == "HTTP_SECRET" || field.type + '' == "EXEC_SECRET" || (field.type + '' == "HTTP_LOCAL"))
                    options = {
                        "type": 5,
                        "opt": []
                    };

                else if (field.type + '' == "LOCAL" &amp;&amp; field.options &amp;&amp; field.options.type + '' == "PREDEFINED" &amp;&amp; field.options.choices &amp;&amp; (field.options.choices).length &gt; 0)
                    options = {
                        "type": 5,
                        "opt": field.options.choices
                    };

                else if (field.type + '' == "SECRET" || field.attrs.type + '' == "SECRET")
                    options = {
                        "type": 25,
                        "opt": []
                    };

                else if (field.val_type + '' == 'MULTILINE_STRING')
                    options = {
                        "type": 2,
                        "opt": []
                    };

                else if (field.val_type + '' == 'DATE')
                    options = {
                        "type": 9,
                        "opt": []
                    };

                else if (field.val_type + '' == 'DATE_TIME')
                    options = {
                        "type": 10,
                        "opt": []
                    };

                else
                    options = {
                        "type": 6,
                        "opt": []
                    };

            } else if (field.data_type + '' == "LIST") {

                if (field.type + '' == "EXEC_LOCAL" || field.type + '' == "HTTP_SECRET" || field.type + '' == "EXEC_SECRET" || (field.type + '' == "HTTP_LOCAL"))
                    options = {
                        "type": 5,
                        "opt": []
                    };

                else if (field.type + '' == "LOCAL" &amp;&amp; (field.options) &amp;&amp; field.options.type + '' == "PREDEFINED" &amp;&amp; field.options.choices &amp;&amp; (field.options.choices).length &gt; 0)
                    options = {
                        "type": 21,
                        "opt": field.options.choices
                    };
            }
            if (!options) options = {
                "type": 6,
                "opt": []
            };
            return options;
        } catch (e) {
            this.logger.error("Inside Nutanix_ImportApplicationProfiles._returnVarType" + e);
        }

    },

    _createContainer: function(catSysId) {

        try {
            var containerCheck = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
            containerCheck.addEncodedQuery('name=profile_configuration^cat_item=' + catSysId);
            containerCheck.query();

            if (!containerCheck.hasNext()) {
                this._createContainerStart(catSysId + '');
                this._createContainerEnd(catSysId + '');
            }
        } catch (e) {
            this.logger.error("Error Nutanix_ImportApplicationProfiles._createContainer: Error:- " + e);
        }

    },

    _createContainerStart: function(catSysID) {

        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles._createContainerStart");
            var cat_item_class = '';
            var cat_item = new GlideRecord('sc_cat_item');
            if (cat_item.get(catSysID)) {
                cat_item_class = cat_item.sys_class_name + '';
            }
            var column_fields = {};
            column_fields.type = '19';
            column_fields.display_title = 'true';
            column_fields.cat_item = catSysID;
            column_fields.active = 'true';
            column_fields.order = 10;
            if (cat_item_class == 'x_nuta2_nutanix_ca_runbooks')
                column_fields.question_text = 'Variable Configuration';
            else
                column_fields.question_text = 'Profile Configuration';
            column_fields.name = 'profile_configuration';
            column_fields.layout = 'normal'; //2across';
            var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable("", column_fields, 'insert');
        } catch (e) {
            this.logger.error("Error Nutanix_ImportApplicationProfiles._createContainerStart: Error:- " + e);
        }

    },

    _createContainerEnd: function(catSysID) {

        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles._createContainerEnd");
            var column_fields = {};
            column_fields.type = '20';
            column_fields.cat_item = catSysID;
            column_fields.active = 'true';
            column_fields.order = 99;
            var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable("", column_fields, 'insert');
        } catch (e) {
            this.logger.error("Error Nutanix_ImportApplicationProfiles._createContainerEnd: Error:- " + e);
        }
    },

    _insertCatalogVariableProperties: function(profileSysId, field, fieldSysd, catalogSysId, field_uuid) {

        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles._insertCatalogVariableProperties:\n profileSysId : " + profileSysId + "\n field : " + JSON.stringify(field) + "\n fieldSysd : " + fieldSysd + "\n catalogSysId : " + catalogSysId + "\n field_uuid : " + field_uuid);
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', profileSysId);
            gr.addQuery('catalog_item', catalogSysId);
            gr.addQuery('variable.description', field_uuid);
            gr.query();

            if (gr.next()) {

                if (field.is_hidden &amp;&amp; (field.is_hidden + '' != gr.is_hidden + "")) {
                    //this._invalidateCatalogItem(catalogSysId);
                    //this.logger.info("Deactivated catalog due to a change in profile variable's private state!");
                }

                if (field &amp;&amp; field.editables &amp;&amp; field.editables.value) {
                    if (field.editables.value + "" != gr.runtime_config + "") {
                    //    this._invalidateCatalogItem(catalogSysId);
                    //    this.logger.info("Deactivated catalog due to a change in profile variable's runtime-config!");
                    }
                }

                if (gr.value_type + "" != field.val_type + '') {
                  //  this._invalidateCatalogItem(catalogSysId);
                   // this.logger.info("Deactivated catalog due to a change in profile variable's type!");
                }

                gr.application_profile = profileSysId + '';
                gr.catalog_item = catalogSysId;
                gr.default_value =
                    (field.val_type + '' == 'DATE' || field.val_type + '' == 'DATE_TIME') ? this._formttedDateTime(field.value + '', field.val_type + '') : ((field.value) ? (field.value).includes("@@{") ? "@@{" + this.appUtil._createMacroArray(field.value + "") + "_" + profileSysId + "}@@" : field.value + '' : '');
                //gr.runtime_config = (field.editables &amp;&amp; field.editables.value+'' == 'true' &amp;&amp; field.is_hidden+'' == 'false') ? "true" : "false"; //((field.value+'').indexOf('@@') != -1) ? false : field.editables.value+'';
                if (field.is_hidden &amp;&amp; field.is_hidden + '' == 'true') {
                    gr.runtime_config = "false";
                } else {
                    gr.runtime_config = (field.editables &amp;&amp; field.editables.value + '' == 'true') ? "true" : "false";
                }
                gr.uuid = field.uuid + '';
                gr.variable = fieldSysd;
                gr.isprofilevariable = true;
                gr.type = "Profile";
                //gr.isdisabled = (field.editables &amp;&amp; field.editables.value+'' == 'true' &amp;&amp; field.is_hidden+'' == 'false') ? false : true;//((field.value+'').indexOf('@@') != -1) ? true : (field.editables.value+'' == 'true') ? false : true;
                /**advanced var**/
                if (field.is_hidden &amp;&amp; field.is_hidden + '' == 'true') {
                    gr.isdisabled = true;
                } else {
                    gr.isdisabled = (field.editables &amp;&amp; field.editables.value + '' == 'true') ? false : true;
                }
                gr.value_type = field.val_type + '';
                gr.data_type = (field.type + '' == "LOCAL" &amp;&amp; field.options &amp;&amp; field.options.type + '' == "PREDEFINED" &amp;&amp; field.options.choices &amp;&amp; (field.options.choices).length &gt; 0) ? "PREDEFINED" : field.type + '';
                //gr.field_regex = (field.regex &amp;&amp; field.regex.should_validate &amp;&amp; gr.data_type != "LOCAL" &amp;&amp; field.val_type != "DATE"  &amp;&amp; field.val_type != "DATE_TIME") ? field.regex.value+'' : this._fieldRegex(field);


                var k = (field.regex &amp;&amp; field.regex.should_validate) ? field.regex.value + '' : this._fieldRegex(field);

                if (gr.data_type + '' == "LOCAL" &amp;&amp; (field.val_type + '' == "DATE" || field.val_type + '' == "DATE_TIME"))
                    k = this._fieldRegex(field);

                gr.field_regex = k;
                gr.is_hidden = (field.is_hidden + '' == 'true') ? true : false;

                if (field) {
                    gr.field_json = JSON.stringify(field);
                }

                /**advanced var**/
                gr.update();

            } else {

              //  this._invalidateCatalogItem(catalogSysId);

                gr.initialize();
                gr.application_profile = profileSysId + '';
                gr.catalog_item = catalogSysId + '';
                gr.default_value = (field.val_type + '' == 'DATE' || field.val_type + '' == 'DATE_TIME') ? this._formttedDateTime(field.value + '', field.val_type + '') : ((field.value) ? ((field.value).includes("@@{") ? "@@{" + this.appUtil._createMacroArray(field.value + "") + "_" + profileSysId + "}@@" : (field.value)) : '');

                //gr.runtime_config = (field.editables &amp;&amp; field.editables.value+'' == 'true' &amp;&amp; field.is_hidden+'' == 'false') ? "true" : "false";//((field.value+'').indexOf('@@') != -1) ? false : field.editables.value+'';
                if (field.is_hidden &amp;&amp; field.is_hidden + '' == 'true') {
                    gr.runtime_config = "false";
                } else {
                    gr.runtime_config = (field.editables &amp;&amp; field.editables.value + '' == 'true') ? "true" : "false";
                }
                gr.uuid = field.uuid + '';
                gr.variable = fieldSysd;

                gr.isprofilevariable = true;
                gr.type = "Profile";
                //gr.isdisabled = (field.editables &amp;&amp; field.editables.value+'' == 'true' &amp;&amp; field.is_hidden+'' == 'false') ? false : true;//((field.value+'').indexOf('@@') != -1) ? true : (field.editables.value+'' == 'true') ? false : true;
                if (field.is_hidden &amp;&amp; field.is_hidden + '' == 'true') {
                    gr.isdisabled = true;
                } else {
                    gr.isdisabled = (field.editables &amp;&amp; field.editables.value + '' == 'true') ? false : true;
                }
                /**advanced var**/

                gr.value_type = field.val_type + '';
                gr.data_type = (field.type + '' == "LOCAL" &amp;&amp; field.options &amp;&amp; field.options.type + '' == "PREDEFINED" &amp;&amp; field.options.choices &amp;&amp; (field.options.choices).length &gt; 0) ? "PREDEFINED" : field.type + '';

                var k = (field.regex &amp;&amp; field.regex.should_validate) ? field.regex.value + '' : this._fieldRegex(field);

                if (gr.data_type + '' == "LOCAL" &amp;&amp; (field.val_type + '' == "DATE" || field.val_type + '' == "DATE_TIME"))
                    k = this._fieldRegex(field);

                gr.field_regex = k;

                gr.field_regex = (field.regex &amp;&amp; field.regex.should_validate &amp;&amp; gr.data_type != "LOCAL" &amp;&amp; field.val_type != "DATE" &amp;&amp; field.val_type != "DATE_TIME") ? field.regex.value + '' : this._fieldRegex(field);
                gr.is_hidden = (field.is_hidden + '' == 'true') ? true : false;
                /**advanced var**/
                if (field) {
                    gr.field_json = JSON.stringify(field);
                }

                gr.insert();

            }

        } catch (e) {
            this.logger.error("Error Nutanix_ImportApplicationProfiles._insertCatalogVariableProperties: Error:- " + e);
        }

    },

    _fieldRegex: function(field) {

        var reg = "";
        switch (field.val_type + '') {

            case "INT":
                reg = '^[\\d]*$';
                break;

            case "STRING":
                reg = '^.*$';
                break;

            case "DATE":
                reg = '^.*$'; //'^((0[1-9]|[12]\\d|3[01])/(0[1-9]|1[0-2])/[12]\\d{3})$';
                break;

            case "TIME":
                reg = '^([01]\\d|2[0-3]):[0-5][\\d]:[0-5][\\d]$';
                break;

            case "DATE_TIME":
                reg = '^.*$'; //'^((0[1-9]|[12]\\d|3[01])/(0[1-9]|1[0-2])/[12]\\d{3})((T)|(\\s-\\s))[\\d]{2}:[\\d]{2}(:[0-5]\\d)?$';
                break;

            case "MULTILINE_STRING":
                reg = '^(.|\n)*$';
                break;

        }
        return reg;


    },

    _formttedDateTime: function(value, type, getDate) {

        var newVal = '';
        if (getDate === true) {
            if (type == "DATE") {
                var gdt = new GlideDate();
                gdt.setValue(value);
                return gdt.getByFormat(this.dateFormat);
            } else {
                var gdt = new GlideDateTime();
                gdt.setValue(value);
                return gdt.getDate().getByFormat(this.dateFormat) + ' ' + gdt.getTime().getByFormat(this.timeFormat);
            }
        } else {
            var arr = value.split('/');
            if (type == "DATE") {
                newVal = arr[2] + '-' + arr[1] + '-' + arr[0];
                var gdt = new GlideDate();
                gdt.setValue(newVal);
                return gdt.getValue();
                //return gdt.getByFormat(this.dateFormat);
            } else {
                var year = arr[2].split(' ');
                newVal = year[0] + '-' + arr[1] + '-' + arr[0] + ' ' + year[2];
                var gdt = new GlideDateTime();
                gdt.setValue(newVal);
                return gdt.getValue();
                //return gdt.getDate().getByFormat(this.dateFormat)+' '+gdt.getTime().getByFormat(this.timeFormat);
            }
        }
    },
    processRunbookVariable: function(current) {
        try {
            this.logger.debug("Inside Nutanix_ImportApplicationProfiles.processRunbookVariable current " + JSON.stringify(current));

            var payload = current.payload;

            var catSysId = current.parameter + '';

            this._createContainer(catSysId);

            for (var i = 0; i &lt; payload.length; i++) {
                this.logger.info("Retrieved Number of Application Profiles " + payload.length);
                var profile = payload[i];

                var profileGR = new GlideRecord(this.appUtil.configuration.table.applicationProfiles + '');
                profileGR.addQuery('uuid', profile.uuid + '');
                profileGR.query();

                var profileSysId;

                if (profileGR.next()) {
                    profileSysId = profileGR.sys_id;

                    profileGR.name = profile.name + '';
                    profileGR.description = profile.description + '';
                    profileGR.update();
                } else {
                    profileGR.initialize();
                    profileGR.name = profile.name + '';
                    profileGR.description = profile.description + '';
                    profileGR.uuid = (profile.uuid) ? profile.uuid + '' : '';
                    profileSysId = profileGR.insert();
                }

                this.logger.debug("Successful record insertion in App Profile Table. Record name:- " + profile.name + ' profile.variable_list ' + JSON.stringify(profile.variable_list));

                var variablesList = profile.variable_list;

				this._checkVarNegativeSync(variablesList, profileSysId, current.parameter);
				
                for (var j = 0; j &lt; variablesList.length; j++) {
                    var field = variablesList[j];
                    var fieldSysd = '';

                    var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                    fieldGR.addQuery('description', field.uuid + '');
                    fieldGR.addQuery('cat_item', current.parameter + '');
                    fieldGR.query();
                    var varType = this._returnVarType(field);
                    if (fieldGR.next()) {
                        var column_fields = {};
                        column_fields.type = varType.type + ''; //(field.type+'' == 'SECRET') ? 25 : 6;					
                        column_fields.cat_item = current.parameter + '';
                        column_fields.active = true;
                        column_fields.question_text = (field.label &amp;&amp; (field.label).trim() != "") ? field.label + '' : field.name + '';
                        column_fields.name = field.name + '_' + profileSysId;
                        column_fields.tooltip = field.description + '';
                        column_fields.variable_width = '50';
                        column_fields.order = (11+j &lt; 99)? 11+j:98;
                        column_fields.description = field.uuid;
                        column_fields.show_help = true;
                        column_fields.help_text = (field.description + '') ? field.description + '' : '';
                        column_fields.mandatory = (field.is_mandatory + '') ? field.is_mandatory : '';
                        if (varType.type == 21) {
                            column_fields.list_table = this.appUtil.configuration.table.dropDownTable + '';
                            column_fields.attributes = "glide_list";
                        }
                        fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable(fieldGR.sys_id, column_fields, 'update');
                        this.logger.debug("Nutanix_ImportApplicationProfiles.processRunbookVariable fieldSysd update: " + fieldSysd);
                        if (varType.type + '' == '5' || varType.type + '' == '21') {
                            this._updateOtions(fieldSysd, varType.opt, varType.type);

                        }
                    } else {
                        gs.info("possible inside else" + (varType).type + ' current.parameter ' + current.parameter + ' field.name ' + field.name + ' field.description ' + field.description + ' field.uuid ' + field.uuid + 'field.description ' + field.description + ' is_mandatory ' + field.is_mandatory);
                        var column_fields = {};
                        column_fields.type = (varType).type + ''; //(field.type+'' == 'SECRET') ? 25 : 6;
                        column_fields.cat_item = current.parameter + '';
                        column_fields.active = true;
                        column_fields.question_text = (field.label &amp;&amp; (field.label).trim() != "") ? field.label + '' : field.name + '';
                        column_fields.name = field.name + '_' + profileSysId;
                        column_fields.tooltip = field.description + '';
                        column_fields.variable_width = '50';
                        column_fields.order = (11+j &lt; 99)? 11+j:98;
                        column_fields.description = field.uuid;
                        column_fields.show_help = true;
                        column_fields.help_text = (field.description + '') ? field.description + '' : '';
                        column_fields.mandatory = (field.is_mandatory + '') ? field.is_mandatory : '';
                        if (varType.type == 21) {
                            column_fields.list_table = this.appUtil.configuration.table.dropDownTable + '';
                            column_fields.attributes = "glide_list";
                        }
                        fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                        this.logger.debug("Nutanix_ImportApplicationProfiles.processRunbookVariable insert fieldSysd : " + fieldSysd + " field.label : " + field.label + " field.label : " + field.label + " | " + (field.label &amp;&amp; (field.label).trim() != "") ? field.label + '' : field.name + '');
                        if (varType.type + '' == '5' || varType.type + '' == '21') {
                            this._updateOtions(fieldSysd, varType.opt, varType.type);
                        }
                    }

                    this._insertCatalogVariableProperties(profileSysId, field, fieldSysd, current.parameter + '', field.uuid);
                    this.order++;
                    this.logger.debug("Successful record insertion in App Profile Variable Set. Record Name:- " + field.name);
                }

				this._updateCatalogItem(variablesList, current.parameter, profileSysId);
                
                var setProfileGR = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
                setProfileGR.addQuery('application_profile', profileSysId + '');
                setProfileGR.addQuery('catalog_item', current.parameter + '');
                setProfileGR.query();

                if (!setProfileGR.hasNext()) {
                    setProfileGR.initialize();
                    setProfileGR.application_profile = profileSysId + '';
                    setProfileGR.catalog_item = current.parameter + '';
                    setProfileGR.providers = 'runbook';
                    setProfileGR.state = 'active';
                    setProfileGR.insert();
                    this.logger.info("Nutanix_ImportApplicationProfiles.processRunbookVariable:" + setProfileGR.sys_id + " record inserted application_profile " + setProfileGR.application_profile + " catalog_item " + setProfileGR.catalog_item + " provider " + setProfileGR.providers + " state " + setProfileGR.state);
                } else if (setProfileGR.next()) {

                    setProfileGR.application_profile = profileSysId + '';
                    setProfileGR.catalog_item = current.parameter + '';
                    setProfileGR.providers = 'runbook';
                    setProfileGR.state = 'active';
                    setProfileGR.update();
                    this.logger.info("Nutanix_ImportApplicationProfiles.processRunbookVariable:" + setProfileGR.sys_id + " record updated application_profile " + setProfileGR.application_profile + " catalog_item " + setProfileGR.catalog_item + " provider " + setProfileGR.providers + " state " + setProfileGR.state);
                }

            }

        } catch (e) {
            this.logger.error("Error Nutanix_ImportApplicationProfiles.processRunbookVariable: Error:- " + e);
        }

    },
    type: 'Nutanix_ImportApplicationProfiles'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-14 20:00:23&lt;/sys_created_on&gt;&lt;sys_id&gt;37c15d5f37896300fdfc097973990e1a&lt;/sys_id&gt;&lt;sys_mod_count&gt;318&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ImportApplicationProfiles&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_37c15d5f37896300fdfc097973990e1a&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;subuhee.fathima&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-03-18 11:10:00&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>2107088127</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>9aab0533c3d4569064971612b401314f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f760000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Nutanix_ImportApplicationProfiles</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>8a5896c9a90502100d3387ac33d1209f</update_guid>
<update_guid_history>8a5896c9a90502100d3387ac33d1209f:2107088127,a9e5d28519050210e21c1c826f3df103:1365474668,c6198a095bc102107a361b64d99f6c97:2067718465,a3868a81b3c1021085ac7d8e8c32cc8e:-781130985,bb958a8134c102100ca21f5cfdae1705:-1488479909,529017c0248902509f043c4c8ab7a304:2068200750,ea2d8300638902501a795a3f3e9f4f57:-82505937,d592838c5709025063860bddbd0ff98b:1915533733,ee60470069090250f9b6dfde5695f197:-82505937,9fbaa8bd11bfbd10a34bbf14a5e2981e:2075064466,b1ee576818ef3190578f971ecbd24b32:-1878102287,002072a8f0eb31900a149679eac9c2e4:-1453514480,15de66ec06eb3190d65bb777aaf0cee0:324327507,a4db757be26bad50c601cd4942a1f286:-1301031312,f538831f4f832510af755becb3559695:-1284685968,77878bd3734325103c1ccf4bbb4f07bd:-954204912,8d7b325fffcfe1103880cae3abadade6:148555855,e9180625e39e6d10d991cbfc1566b8c7:572734926,da4bc4411392e9103f7946d5b8bd5792:-1409965020,31a9e0007e1aa510d7c5781462c1ddcb:-2027904346,c3a58253dc8ea1108cfdd517aa6dfbae:430690500,7373425f0b4ea110b98138d1c4faac13:-1065220608,4872461b614ea1105f9b37a350d1ec0f:1490889103,4c2fb5577b4ea1102da6d8a4eee5f554:-1203612881,b1dc073e6fa1ed101ef99077a86e28f3:-380378021,fa86463c7c2bc910af836479cd727b3f:148555855,60bff4023deda1105e06abc7d763ccd5:-380378021,fa86463c7c2bc910af836479cd727b3f:148555855,d6897221976d611075ac2a8dc5de3c33:-380378021,fa86463c7c2bc910af836479cd727b3f:148555855,d0129dcc8ba9e9102d50c720cf533d82:-380378021,fa86463c7c2bc910af836479cd727b3f:148555855,c6e1a5a0d99b0110c83b8f8fc3678d95:-933180351,ed024ae12a81011020e1797e953a931f:-1577930865,38ec31ad79410110eaa47d81f167a98d:-365624786,8679f529c44101105ae7122be49828ba:166994561,efca6b30fc0d01102460c24f543839db:1886088129,dbe66b7c6ec90110bb4dd5c5d0372b01:1845066274,1840d73ca04901103b8d4f433732f001:1142982844,836bc3386f490110ef84db2ea4f932ff:660924883,1287baf4698501101892de9bf218d730:-178888269,9e667ab46885011096a97c3e407a3446:1871723636,ce623af0d585011081a0e188b625114c:-1346264294,6cec9ab0da4501100b7f76015a7b8b7a:1255590274,f9795a30ad4501104304afe38b41bc58:275504959,70295efca9050110d96b699a158ae0b5:-1378508347,66781ebc8d05011017768127219e357d:631216709,ae779a38790501109b99da37f50b785b:1631413469,9835567837c101107cded26fa82adfd7:-170478017,3b44927840c10110282304bc33f06222:-220264434,23041efc21810110f1b4c758bd474176:-129716397,4b0ece3496c10110555dbfbf526b12da:-1182098786,98e0a9bdf54930d099c7bb6308d70041:-129716397,3802f03dcec130d0e484ff9e70741618:1968266804,b5260d2f90bc38905973379be0021425:-1412550130,625581a71afc3890f6bb0a10cfaec1fa:-1386042352,20dfb0af0bbc38900b64808c6f5244d9:1966968398,8c5ffcab13bc3890f3303562c15c976b:260769383,45eebc2ffabc389035349b448a640775:1709704529,fb9bb4e79abc3890a6f3d68cbb95b87e:-111358550,5698b02b1cbc38903fa7ff2b5a2f48ae:295632342,8ebfe463e1bc38909a7eca3a6ff8a17c:857191244,ab6de0af877c3890048c911a18bace08:-1406584023,625aec27d87c38907ed30b71fb8fb31a:-1362356987,1635eca76db8389091bbd827806bfc63:-1142338639,6fb068a78bb8389095a5fce3971c3168:-1611661563,3195946f5c783890fc8ab508e119b092:-527248192,6cd290eb277838903d8d723bdf1591f4:1272455949,43c0106b0178389086693c86a36cbd32:1857335549,a410dce72b783890f03fc5a28f893800:758166048,e7fe40e7f478389059fefbff652fece1:-1355669207,accd80a7807838905da97d9bccfac2d9:529126312,ac8d80e7e5f438900d84a92e863a4d96:-22330790,fd01545b1e7cf49051c7443ed641434e:968562676,5c298017e1b8f490160a01c8d2ee0001:-512888473,9b83c8977c78f4907020abac720bb7d0:-412672060,e59f3b0f2cb4f49030bc169de1e72e12:1550411255,480fa347ac74f49037cdbb7426cda9c9:864243862,4e3d7ae062bcbc502c6f14d0d8245c13:1750694734,caacb2ec547cbc50adcac0cac88f6c11:1661112976,84b9f1a015f4bc50d74dd3522fa648e8:353319982,f2b6ef1cbf383c509f8cd6c02f6ae2f2:-649072870,30866f1433383c50865d7f5a37dbb5a3:-1570118687,76eaf6101e38f8503e9aa68ed22c3d0c:-1229717571,a466434420f878508ea3ecaf0f6443c9:1039283638,8c6fb6cce1b87850153a070c5438bd01:-1229717571,6199b2c82cb878504f656e7b64b0a421:-465444724,9974bd1ab3283050788cae2993c6334f:-2119458254,e534755a11283050ce098a6959ffb352:1233142464,f4433dd65b283050dab53e65f6dd700e:1208008992,a97235568b283050b2df0e46b45c9bf8:-1120346586,d6913156a028305037f65c90fa2cc526:-1610583797,64507d16e728305088d3d4b9c56f852e:574586126,03cfa5d291283050ff88d59ed8f42f66:-291704430,0e6eed5260283050c93e26e4ceefca6e:-1950196988,44bc29128b2830502c195ccd64e98bc7:972479416,da26219ae6e43050783753794b1e3483:-1637444234,59b5e55acde4305079aa1347d2871245:-74077185,3c9d4c96d2e03050ff2870ff981d2fbe:2066116498,19cc00d67fe03050806de33c49e18417:483476360,181f6382b1a030500d11b841b2c96043:1840494758,feed9342bc603050cb038548dd004688:630581159,e37b97025c603050044c5964fcdb1a0f:1215055691,80fdac0197aa6090f60096831fa778c4:-1883155323,c53797f4f2e26090b27fe634f6e46e5f:2007027707,4309f278e3ae2090fadf882608c70afb:1339816561,63b71c0927d56490d2eb1d761e8189aa:377270829,7b0580494c9564907122eb27115719b3:1441679265,4f086d874709ec50425965af169be300:2086901641,3f2acc8f74c1ec50223862b2747ffb27:-960261328,02c90c8fb7c1ec5094dffbabd9d2ef58:-1565811695,c620be7209cdac50fd0845d9262e50ed:-724466431,04fe62fa888dac5008c5b59a2e0aa2e6:-1565811695,51b96af6218dac50e02437fef9bb2313:312776069,792962fa228dac506ef5521c466328d0:-2126445755,4c97eeb2198dac50362148cfbfb897e6:1111887475,feddd27ec94dac50d079f35a9f96d24a:1045179151,ccd35ebe270dac50938c93fe6e0c994b:-1920585764,3db09ebea40dac506995a40a817b1095:-1565811695,632342b6c985ac50a54761e315a6449e:848053873,e3311cc1e3112010cae03339dd8b1bd7:1482327027,e6f46b6259496c506a734329b65cdd6e:-1565811695,4f4c2a027849e8507c2c54dcdb2bf296:-700067246,323311a55b816850a6aeade82de39667:-139421799,65efa065160168502fc004b7cd58b1ae:-1464645174,0b4f2c255f01685099d5d81f0e38fd12:964282466,de5802c16309e450e420cf0c2f335d60:-1993663708,be57cec17c09e450748136e0e5b776a5:451653984,f9ef07b419cda450e8270cbbe50a3b58:542808854,769b0f786f4da4500f90e6a0cc68882a:-1870403804,ec460bfc84c9a45096ce9d988bfc66bf:206419004,3574d31e5d606410f4a1be1152415058:-1032211430,da74cbde0eec2410e2e0a7d7b19abee7:480167413,7083eed2002c2410aedb5f1aa699e6c4:-1095492845,c096ded6d1a82410c4c9e81da0b96e5a:1686449024,81111a120268241020c4253c027fcd59:-1539020747,8414ce1e5da424103aa5c3c5f5d3e029:337906057,106a3d5a38242410819cf4aa4ea34553:-296263169,d16040f0e12020100e7ea553332354ff:-1321649261,f59751ef391ca4104f77ca21490f30c6:1067480776,3a14d5ebe61ca41004a979ce696607d4:-373279188,8a5f4d27f21ca41056d894605ab08628:848812709,319ac1efd0d8a410048f8df8a66a9e73:1751282995,c309c16fdb98a410205d2b45f5c1173c:1718840041,b76eac67b898a410ab038fc7590dd07d:1639123235,7baae0276f98a410560269fad5e29aee:1751282995,b2596023eb98a410ad222959fd4de54d:-53449970,54f560eb6a58a4109107da5365eb4978:-569212911,729d18238a58a410a063b42e95b8d029:-959946543,673bbfdb77d4a4106304fa81c44bc5f8:1987960581,f4b513139594a4107aa3aa735f362083:792216682,c48fb6579914a410add8b2bbf3e388ee:-480346054,fc53c3474f986410653fdbcb76a22556:-637662231,748f56cb001864104050950b44736cb6:1009157974,e4a69e4f17d46410d042b26c4e95f9f7:-966012126,2b5560e8e0d31c10ec16bd1ee550cc34:-840807788,ff7a0f10251f1010a60744a6507d44e8:1444745442,cd6ca0d1f0839c90f1607700dffcdecd:-172346174,d4faa0d179839c908676e09d1ac54dc7:801029632,92198a74f2035c90365dd0ab6dbd4196:433462508,0524efe0f34b1c906831b7fc21ec757f:-329199832,db5f13e0bd0b1c90027d0eec3a64057b:128374118,9cc91a6c22071c9099fb3fd76ef3c4be:-424674786,a1eaaf1f0fe6585002fcd369bca01e9b:433462508,45a6a3dbf4e658508a1c7d0aec59a698:1703668928,86a535fad2229450957abe66c64200a9:247467084,9d457dba65229450c5ff97d05a45fe25:712709530,90c5c93d19aa9050ac6a83ff2816c9c5:1934991080,7a940db964aa9050c9ab80845c0df9c9:-2120453112,57bfd42883aadc1094bcd77cb2c0b4b6:181599598,8ca774988722dc1034e79044cd005ea0:-466447146,feb634583c22dc10d7a3c8de76b5b844:433817660,0144b090fe22dc101dd07a2c7c9b01ac:1560378414,dc047890e222dc10be4724ebbeba22ce:855338542,251378500b22dc10393d2074aec57068:605903798,9561f05cb6ee9c1058ef3e8a43ea10fe:-224009657,bb4f2c58b5ee9c10cb0fb379c5e23b4c:1595206427,6829a89038ae9c105a82f45043ec167e:2044126884,9384a094776e9c10ea28961a41a1b9bc:319969606,5f9e1814502e9c10c84a5621a832a35c:954721997,dd9c8c50d32e9c102d9b13c655a624f4:1355370362,51d688d8c5ea9c103976ddb3092abacc:1871587423,9765001c75ea9c10e35fe23dea469501:1937290360,5c04081882ea9c10a96415819bfb0988:-598590507,b492cc947bea9c10d52f0b6d8aafa617:-1770043703,c56f7380e9ea9c1024f8fbf1e91e3566:-1976799106,571bf74ca0aa9c1009827f9683104b8b:-2075758334,4b49bb0c30aa9c102dad04610e8feb9d:216218208,8ec8bbc86faa9c10a9ffa0b978fa06c0:1248244960,4214af08b36a9c1057945a6f6cf7ba52:1662318348,662b174c182a9c107bb08f02415b6f2c:187435944,8d481b48e32a9c10156194123c77a33f:-1359202343,9cfe4f48b9e69c1005921291e18d8ae3:-139687268,6c2ac74001e69c10dd8a915052a868fd:-1782711177,a3def0c4b2629c103764167d3b21623f:1863463918,6fac30043a629c10b302a50b1ece3157:1290353198,ca017c8026229c108045988fdb72ee68:2122650051,6e7c680c6eee5c10082f83e7dc174453:-995656445,bcf32004c7ee5c1093af3370c9ee7a24:1088774096,797394081f2e5c10546dd34bed68b967:859885639,0d6d840c97aa5c10a1b744b39ff5ddaf:50452162,4b090804acaa5c1044585928b7df6488:747355655,f256cc8c216a5c1010a757d9abba94e5:-1853860153,07d3c00ccb6a5c10644bdec45b6eb2aa:-824259292,0c320408276a5c106ef7a609fe468c83:-1362202617,e32c3f3fa51a5c10033ee03ee5ed35bb:-1653135430,c349f73bdd1a5c10d1dd93fa35b777b9:-1084297876,635733776b1a5c102da4f036d380b12e:-681252149,afd5bb33501a5c10bcc100007f68a549:315770260,ed15ff7fb0d65c10c8753d0153061a7b:-1660685554,836f6f7768d65c1002a804e1e3c0eb34:-1356699358,c34feb77f2d65c104b25fe26d1f17505:1310907333,71fd6f734dd65c1057331b8a6549b13e:372797545,51cd27b3fed65c10fa34796b6c3e0953:1884620491,a88b27bf81965c101b711e83cbdbfc19:1200760674,50986f3bb9965c106d85f6b9a9958964:1503966855,98ed03ffd6925c10dca85ec1da630fd7:44993841,95bd0fbfd9925c10dee73e634a0e7691:2108899025,a9440bfb5c525c105e8b28ead2ccaa5b:884635229,80bd7eb77d525c10851ca040d7e25e0b:-129438097,f3ac72b723525c100abfea1b24739611:-445345689,c3b4f2fb35125c10681f6b1e6b7024d4:-1806500904,98a27ef75f125c10b3230d157a8ab8ed:1126536187,3c3cd67ff55e1c102b28ccf2f0a5e474:-901643823,d5d092bbef1e1c101af2234c033b88d3:-1086392530,7dccc63ba11e1c10a9515f2ffbe79d05:-595555916,7042672b77561c10ad820c9db7396444:-1094962114,838f262f96121c10f67d0f129ef43a74:1851828289,80c7ec93181e98103421e11e38dfc698:1811537762,0eb60f8238581410080b710813966e78:-1133324793,6bad0683499f801068297daaaaf77a63:-745838657,5a4a0e0fd05f8010cd68802bb55f6980:748515876,78d80a47f95f801000c794b41ca17ca3:-382410123,bbb702430f5f80102ac1e936732a85d7:-428589692,d6950243425f8010c13904a01bdf99a9:-1589394447,04150a03975f801006123629e92a5f35:1362227930,0883c24f201f8010fad010a402e85842:1400628607,0a9fb947721f8010a5d452a65563249e:-217459256,d88a710f4edb80104eb9da18849cd772:738563201,b749fdcbb8db8010ef297044df10c6a8:-843879244,13437d8fba9b8010ac0595ad79304fdf:-1621699992,c655e1832a9b80103a52822a60577b4e:1905127185,ccc399075b1b8010634cc6287c8641dc:-924680854,466c221ed1dfc010921085c567d1973d:-2120355865,1a9d98caca97801047ad3ce8d429ccf3:1555431431,c11bd48a539780108a4658ef57b3b782:5989679,7f3c884e63578010438008a51541a5d6:1118744043,00037da3f00b08101e2df784c93fa949:1361197291,40713da3ff0b0810ed2e0d9c8f42bd94:-1015093601,c40175e38a0b08101002f0d4b0613d75:498950890,b2c89067c4030810a7c3d7b92308fd57:383698505,544794a3350308109ed15c2734197615:2144048023,6f16d82fefcfc4107ca54f67140ea5dd:-1156658929,6534946f26cfc4104df141e3bd49230b:1859487118,64d15c67e6cfc410104c4189348d632d:-1200550171,79409c27f5cfc41044b426bfdec2425a:-1577893423,1d105c672ccfc410eecb3afdd644afcc:-1062346961,8afd00a387cfc410b737b5fb56c86bc6:-2129340365,c8da48eb308fc410db5db63f9105fd68:-1103495805,a7f9cc2fab8fc410334d4692101b11c5:1064712808,2549c42f868fc41070deed6a767881cf:-1509427113,0be9ef13aa0fc41085e647e82be27c91:-863399276,d7b26fd332cbc4104722bed49812b56c:-1880696232,d21ffb82fb8704108402d3c2f3ebef39:-1435319240,51a6730ef9470410e7468c8310ecca67:917338101,0c66770aa6470410e061d69cd7ace6dd:-1604299613,7ac22338d38f00103ca2120a7c2c1114:1036472555,abf74778db4f00105db7f7ddb4cdf310:847633237,9707bfc3127e48500c1e3e7fde1f2d7b:577790486,76d39c4a4fb68450b225e939b592c660:393175031,d0658db01f2a8410d378a7df7359d2f1:55122764,057dbc3c6ee68410bdb9e940255fb33f:1571284275,4d2eab6f93ce4490831aca73dd41c25c:-502255941,2c15c3027055001012aaab97551f020e:-1860266920,2c15c3027055001012aaab97551f020e:-1860266920,2307228373790c103d3250925617becb:1571284275,19669ffe0e01041084abf942e8ee98a3:-1860266920,ba859ffe980104107d9308592dcc5b2d:-1464812316,42dfc3f64f010410e5787d42f64a51e7:2141686510,aa7a837e10cdc010568596d288f474ad:-1464812316,c43d8cf28833f300fb70f0aa5fc5079b:-1686970024,a2bb5bcaca7773002acbed12466960bc:295308306,06146798b877730095ba383d5d5f0d25:-1201165882,b5fd5a586e737300506a9f61df3aed1a:-1780380322,066ba68895bf7300a1cdbc63f47d6d2b:-2097618578,93f56e843ebf73004063d87b3a31760d:34621272,3acc19ff35237300efcf057089aa9314:-1382807800,26abc83f902f3300746ecfa007acef1c:365952913,ef6b086b3fe3330071cdfbd7cfed4041:1946039272,8bba086b20e33300609a3131ae7b8ea3:-1542663941,4f6484a7f8e333008c69e2b983ac0465:-391742540,fae6b3db07a33300bcbc56467114ba69:-1686337157,77fa0b1feb23330070f4b557b80a5fce:1127449479,ac47eaeaf61333009e2d038555b946bc:26038883,56cffb14305b3300a115a22ad68d43e0:182136071,f81bd7c31ac7f3006ce6eb774f471b69:799811645,31ba5fc3b4c7f300c7705d26e865325f:-1719314543,a35917c379c7f30058e7af678721c4b2:499227926,8071fac74f83f300ee5b429c9e9d1fb6:1474058765,0e8e664fce43f3000436ee12a3efb786:-621048838,8c29ea4bd203f3002f2c1c9d7dacb819:-1462493296,f5016e0b02cfb300fbc31770d9f46599:1105073700,286c1e8bb38fb3005a5460300b9b3e48:874423665,3b8bde4b948fb300e72dce839940118d:387273702,5cdc1c36d14f73000a4e120e2324046d:2006431194,fb4c5bc9d18373004b7d8d419b60eed7:-1724365334,64fade09408f3300e680b6cf8043524c:-158901688,ab0a06787407330030630f41381a558a:-440370374,3e8de5b0a7c3330083fbb128725f1e05:733133816,633b156801873300cd7ee944cdf2e2bc:173172334,50ccdca8e643330011eb9697cd5c9465:-1782310561,5f435ce4874333002e0f3a330593f711:-1229023784,d4018ca0e3033300dc85628f33d95fb7:-408735646,e8640372523e7300aa3efa25920ccdbd:-728704308,3bb0b27ac0ba7300c31e22486c7c8556:-1784940876,ac6d8552f0363300791deaaf2c7bdb5c:1349409602,442741daa2f2330010bb6827ede7e152:930029980,dbd5459a9af23300f63221af5fb14fee:-151352100,e553451ac1f23300ed590d4625e70593:-458290006,7b92c5d6b8f233006ed4c7bb72596424:545124248,30d18196e0f233008ba3d34156c112d0:-2118218564,3c8fd81295b2330083e95ba75b8c36d5:-611873875,d91d549e5372330098f342b265a8e252:-1293963652,c50c5cda47723300c8a0420757d7018b:2110613908,c4c9981e2f72330018dce665fd5a844a:979097532,dd779c9a4b7233009ef5ae4fd66b2e23:534923071,0d66d85a0d723300b41c6bda315123ea:-1057019605,ca83d01a16723300c1058920d736709b:1589256223,d030bf02f4323300d6b0f80e5835527a:1010573266,c7ca800a80363300701324aafef3ce5b:-358516873,c4794c06ff363300f2d07bc42073b2c6:609373333,7dceeb75abf23300c1fa95a7b1bf2222:-1423726537,d3ac6f757ef23300384af48a74bbebb1:-249681324,a698e3b9e9b23300d590cf78319cb591:1378098100,a6a66ff506b23300492b360c07860607:-2018613041,8855afb5deb233000ca864572a1801a4:-1322799556,9b9b9ffde3723300dff2fa46fdff2096:-1392010560,923bdf31ffb233009cbdebbff4c643fa:-756399541,2ba797fd3c723300be3df7e98f83174f:338120032,4e14d37dcd723300e84c599cd3b7611d:163823104,17f35775207233001ff2184fe9448bf7:500507025,c2fe4b7d6d32330071190b7b932d594e:1465445131,1b9d0b79d3723300090fd5d839f549d8:389006976,378683ac387e3300f744737add39935c:1943999882,0ce67ea0727e330037ee24a59fe4974c:-498607618,0ca76e20d73e3300dc39b1b3a300c49b:576795453,69f55660933e3300540ae6cbfee0f8d4:799544257,0e4bdb1cf89b330085be8af7bd6f2f01:-1410767874,18d953d4839b3300e529f1b753df702c:-139820260,f37c22d001d73300c2440435da6cb128:566784384,f07b791c6b573300240d48b807b8714b:-646484739,e9b049cf558233007c304a5ecbbacea1:1237272605,9e66f887aa8233001f1ed39c0913e831:139063087,05553cc71f823300a02928f76e91a93c:-799806103,9dc3f84fa6023300610f2363fb893596:280863367,0623b8879982330060be9d0cb460933d:-497626843,0dc5f532e3f13300c584c68c763fcd91:120475216,735552b078c0330061eefacd8b0e8c8e:1262380752,7f8b174cf1eb63003a0dbf6ba0365fb2:-1821348850,53f6fb3bef936300766a6d9872687d74:-387962898,0665b3f778936300ef3d7c4fb9faf948:1327874578,5c72f377e393630080b3cd6789fdcf28:-814573655,615b72b3101363000122721030d18d0c:1294995529,4031ed32d23223008ae31ba4cbd7876d:1972985704,1e63fde2fdb223006330105219069638:-1611251064,a761cf5077622300960a1606a11fdf0b:1290091683,debb36980b22230082b18afbd737b05c:1310990805,26daf650de222300e4d50bd1b292bd68:716978595,939bbb8f9b8a6300144051b4246d5916:915859770,627eda8f2782630043410345210f151d:594843244,4a825a9e29b923004beac7741833db6b:671547019,a1540abd2975e300caf21a668f48e30d:1748063407,cdd324759071e30045e692d508bd1475:264715999,b6ac10fd0931e30019276c29c5395b7f:-68706485,317d1a61213da30049799574cfb6484a:-1214544966,84fe8601f529230097ced6ddd49e2e60:2049584125,774e4ecd8be523006fc7f271fd34aa08:1295790229,3abaad0980a52300276bb218adf2aff6:1054477631,3db4e941e9a52300161ccfb4de3924da:-1340900555,aec0e54dae65230088ec788d2a8ea8ad:217617367,b7da9bb0b7212300d26b9b6db97a726f:932951285,6d8a559cc4e563004ed14b7807d2573c:1687944643,1a79a81cd0256300e29a2e9ae316a5a8:-1598614132,ff55d850dc256300220170886f7ed5bc:-1206829520,3c80109cc3e1630057ad52d65c7fcb7f:-368194477,b7fd48d89be16300d8ef1da2011899e5:1302333907,1aad84d420e163008366ed2aefc45f2b:1622577747,4b08fe480c216300882d0939c02f9bbe:-2082647491,1cd7ba4829216300cfef266adbdf287f:555611147,7156b6c44621630017bae87b1e092388:752533375,b702168860ad2300354b3f9372ce3199:-11273026,cfce0e8423ad2300192f15237598391c:1155992701,28250eccc66d2300ed30f74ea82430bf:-871238194,eb20aaf75e152300186f23d403bded91:2114851829,8a064cf9e1512300d843647942f598ee:1984140026,7bdaf1b4fbd1230025a1180b983a42d3:627950640,e41b68b8e3d96300cbf09df02e8dc085:1841904109,a4c7230c0915230037e84cd46d04a608:63173992,444a12087151230081b095718de82897:629803261,93f95284ae51230064094d407bf7db8b:-342796762,47d99e844d9123007f5decb4679cb41e:534193080,ea50b077894d230007230fe9594eeef2:-972693962,64bc0dabd9452300625ccb4eee1dfc61:668684258,6d55291f05c96300d14683523cc05767:1814973651,27442d5b56c96300a378d61710ba6e77:211521779,6c44219b48c963005c5ab1b6e7d95067:-1831112281,ce24a5db1dc96300bea7f8900fd63e32:1658269847,9c532d5b5ec96300f31c26c599077357:-1161246977,e1c2a55bf9c963003b7fc3f1027649e7:-1415557340,fcf0e9d7dac963005be6d0de7bb93a25:-1442731709,28b025d704c9630044a67dd6d3373c57:-892850893,05a061d75ec96300c66eacadde525e9f:-1926114035,ec7029d7fdc96300e87f7aef96706e96:168725665,d000a997a1c963002f810052bbc181f6:1239568554,443e9517e8c96300c547c800cb0373ac:-811368579,b2a2959fa2896300be970f7e92c5ca33:-1406358572</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>DELETE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_07484cb82f77a1904627de1a2799b640</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="DELETE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 06:32:32</sys_created_on><sys_id>07484cb82f77a1904627de1a2799b640</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.user</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_security_acl display_value="x_nuta2_nutanix_ca_environment_subnet_mtom">0f484cb82f77a1904627de1a2799b617</sys_security_acl><sys_update_name>sys_security_acl_role_07484cb82f77a1904627de1a2799b640</sys_update_name><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 06:32:32</sys_updated_on><sys_user_role display_value="x_nuta2_nutanix_ca.user" name="x_nuta2_nutanix_ca.user">3376fd254f452b001200e5201310c717</sys_user_role></sys_security_acl_role></record_update>]]></payload>
<payload_hash>-1515401832</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>9aab0533c3d4569064971612b4013152</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30af0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.user</target_name>
<type>Access Roles</type>
<update_domain>global</update_domain>
<update_guid>7d8f7907f069421085070a1fc18c3131</update_guid>
<update_guid_history>7d8f7907f069421085070a1fc18c3131:-1515401832,50a38d7c48fba190446571911cf09206:-1875063769,cf484cb86977a190ca579833b6f81541:-1875063769</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sysauto_script_00fc590947410210f96f1916926d4309</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sysauto_script"&gt;&lt;sysauto_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;business_calendar/&gt;&lt;condition/&gt;&lt;conditional&gt;false&lt;/conditional&gt;&lt;entered_time&gt;1970-01-01 00:00:00&lt;/entered_time&gt;&lt;max_drift/&gt;&lt;name&gt;Nutanix_Default Replica Fix Script Scheduled Job&lt;/name&gt;&lt;offset/&gt;&lt;offset_type&gt;0&lt;/offset_type&gt;&lt;run_as display_value="System Administrator"&gt;6816f79cc0a8016401c5a33be04be441&lt;/run_as&gt;&lt;run_as_tz/&gt;&lt;run_dayofmonth&gt;1&lt;/run_dayofmonth&gt;&lt;run_dayofweek&gt;1&lt;/run_dayofweek&gt;&lt;run_period/&gt;&lt;run_start/&gt;&lt;run_time&gt;1970-01-01 08:00:00&lt;/run_time&gt;&lt;run_type&gt;on_demand&lt;/run_type&gt;&lt;script&gt;&lt;![CDATA[gs.info("Nutanix_Default Replica Fix Script Scheduled Job start.");
var processQueue = new GlideAggregate("x_nuta2_nutanix_ca_nutanix_process_queue");
processQueue.addEncodedQuery("stateINwaiting,ready,processing");
processQueue.query();
if (!processQueue.next()) {
    updateDefaultReplicaField();
		gs.info('Inside updateDefaultReplica end');

    var prop = new GlideRecord('sys_properties');
    prop.addQuery('name', 'x_nuta2_nutanix_ca.NCM Trigger Fix Script');
    prop.query();
    if (prop.next()) {
        prop.value = "false";
        prop.update();
    }
    current.active = false;
    current.update();
	gs.info("Nutanix_Default Replica Fix Script Scheduled Job End.");
}

function updateDefaultReplicaField() {
	gs.info('Inside updateDefaultReplica start');
    var arrayUtil = new global.ArrayUtil();
    var profileArray = [];
    var oldCI = new GlideRecord("x_nuta2_nutanix_ca_catalog_variables_properties");
    oldCI.addEncodedQuery("catalog_item.sys_class_name=x_nuta2_nutanix_ca_nutanix_catalog_items^variable.nameNOT LIKEdefault_replicas");
    oldCI.query();


    while (oldCI.next()) {
        if (profileArray.length == 0 || !arrayUtil.contains(profileArray, oldCI.getValue("application_profile"))) {

            createVariables(oldCI.catalog_item.blueprint_name, oldCI.application_profile, oldCI.catalog_item);
            profileArray.push(oldCI.getValue("application_profile"));
        }
    }
	
}

function createVariables(blueprint, appProfile, oldCI) {

    var bp = new GlideRecord("x_nuta2_nutanix_ca_catalog_variables_properties");
    bp.addEncodedQuery("variable.nameLIKEdefault_replicas^catalog_item=" + blueprint + "^application_profile=" + appProfile);
    bp.query();
    while (bp.next()) {

        var newVar = getCatalogVariable(oldCI, appProfile, bp.service_name);
        if (!newVar) {
            newVar = new GlideRecord("x_nuta2_nutanix_ca_catalog_variables_properties");
            newVar.initialize();
            newVar = bp;
            newVar.sys_id = '';
            newVar.catalog_item = oldCI;
        }
        newVar.variable = getVariable(oldCI, blueprint, bp.service_name.getDisplayValue());
        if (newVar.sys_id == '') {
            newVar.insert();
        } else {
            newVar.update();
        }
    }
}

function getVariable(oldCI, blueprint, serviceName) {
    var itemOption = getItemOption(oldCI, serviceName);
    if (itemOption) {
        return itemOption.sys_id;
    } else {
        itemOption = new GlideRecord("item_option_new");
        itemOption.initialize();
        itemOption = getItemOption(blueprint, serviceName);
        itemOption.sys_id = "";
        itemOption.cat_item = oldCI;
        itemOption.order = itemOption.order &gt; 0 ? itemOption.order - 1 : itemOption.order;
        itemOption.insert();
    }
    return itemOption.sys_id;
}

function getItemOption(catItem, serviceName) {
    var itemOption = new GlideRecord("item_option_new");
    itemOption.addEncodedQuery("name=" + serviceName + "_default_replicas" + "^cat_item=" + catItem);
    itemOption.query();
    if (itemOption.next()) {
        return itemOption;
    }
    return null;
}

function getCatalogVariable(oldCI, appProfile, serviceName) {
    var newVar = new GlideRecord("x_nuta2_nutanix_ca_catalog_variables_properties");
    newVar.addEncodedQuery("variable.nameLIKEdefault_replicas^catalog_item=" + oldCI + "^application_profile=" + appProfile + "^service_name=" + serviceName);
    newVar.query();
    if (newVar.next()) {
        return newVar;
    }
    return null;
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sysauto_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-03-18 06:56:15&lt;/sys_created_on&gt;&lt;sys_id&gt;00fc590947410210f96f1916926d4309&lt;/sys_id&gt;&lt;sys_mod_count&gt;45&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_Default Replica Fix Script Scheduled Job&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sysauto_script_00fc590947410210f96f1916926d4309&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-07-30 12:31:57&lt;/sys_updated_on&gt;&lt;time_zone/&gt;&lt;upgrade_safe&gt;false&lt;/upgrade_safe&gt;&lt;/sysauto_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>245845668</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>9aab4133c3d4569064971612b401311f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191bbfc28100000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Nutanix_Default Replica Fix Script Scheduled Job</target_name>
<type>Scheduled Script Execution</type>
<update_domain>global</update_domain>
<update_guid>0c27c1bba394569032418928ae8efc95</update_guid>
<update_guid_history>0c27c1bba394569032418928ae8efc95:245845668,e972d4108af742100ed1f48db05accc6:-2135438426,9d083dd27deb4654214fa22bea449f2a:-2135438426,8dd3b2b5dfe602106f0b9b9b8619d9d6:571433525,9ee7789e09eb4210e74c0784aad39461:-1368698045,e51ce8d2a1ab4210e24cd4edee735915:571433525,fc7726930fed4610407def37a27fff24:-881888263,4d156edf28ad4610f5cb7054c73f6403:-477278613</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_environment_subnet_mtom_envuuid_subnetuuid</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="envuuid_subnetuuid" table="x_nuta2_nutanix_ca_environment_subnet_mtom"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Since UUID contains "-" we are using "_" underscore
	// to seperate environment uuid and subnet uuid
	return current.environment_uuid + '_' + current.subnet_uuid; // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;EnvUUID-SubnetUUID&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;envuuid_subnetuuid&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;formula/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value="String"&gt;string&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;305&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_environment_subnet_mtom&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;true&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;subuhee.fathima&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-07-04 07:22:38&lt;/sys_created_on&gt;&lt;sys_id&gt;5be9f0062f77e1104627de1a2799b6f9&lt;/sys_id&gt;&lt;sys_name&gt;EnvUUID-SubnetUUID&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_environment_subnet_mtom_envuuid_subnetuuid&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-03-20 07:51:01&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;true&lt;/virtual&gt;&lt;virtual_type&gt;script&lt;/virtual_type&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>-247177870</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>9aab4133c3d4569064971612b4013120</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30840000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>Environment Subnet MTOM.EnvUUID-SubnetUUID</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>98b24c3d1505c210a4a5aba608b4b1e7</update_guid>
<update_guid_history>98b24c3d1505c210a4a5aba608b4b1e7:-247177870,3afdff2d5a05c2108beac91832773f45:-247177870,18fd7f2d3d05c210bb606ca40ff369df:84722116,cb7cffa91105c21084e52e8770956f8b:-247177870,b0727f6d27c1c2102b50f02e1f4d2527:824596695,8b50bba9ecc1c210af4e7e63ef00583c:42872579,2b6a38069337e1103a9ce71513ea5be2:195156123,8c2af4066f77e1102dba9b834c1aaf18:-257040433</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_documentation_x_nuta2_nutanix_ca_nutanix_marketplaceitems_version_mpi_en</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_documentation element="version_mpi" label="Version" language="en" table="x_nuta2_nutanix_ca_nutanix_marketplaceitems"><sys_documentation action="INSERT_OR_UPDATE"><element>version_mpi</element><help/><hint/><label>Version</label><language>en</language><name>x_nuta2_nutanix_ca_nutanix_marketplaceitems</name><plural>Versions</plural><sys_class_name>sys_documentation</sys_class_name><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-01-18 08:52:20</sys_created_on><sys_id>e079f07d4733fd106fffa3b3416d437a</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Version</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_documentation_x_nuta2_nutanix_ca_nutanix_marketplaceitems_version_mpi_en</sys_update_name><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-01-18 08:52:20</sys_updated_on><url/><url_target/></sys_documentation></sys_documentation></record_update>]]></payload>
<payload_hash>499464457</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>9aab4133c3d4569064971612b4013123</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f9e0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_marketplaceitems</table>
<target_name>Marketplace Items.Version</target_name>
<type>Field Label</type>
<update_domain>global</update_domain>
<update_guid>6479f07d2c33fd10c3d6f6d2b852f5b0</update_guid>
<update_guid_history>6479f07d2c33fd10c3d6f6d2b852f5b0:499464457</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>DELETE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_3f7fccf037c62b00fdfc097973990e8b</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="DELETE"><operation>delete</operation><source_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>girishgyani</sys_created_by><sys_created_on>2018-11-25 13:44:52</sys_created_on><sys_id>3f7fccf037c62b00fdfc097973990e8b</sys_id><sys_mod_count>0</sys_mod_count><sys_name>catalog_ui_policy</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_scope_privilege_3f7fccf037c62b00fdfc097973990e8b</sys_update_name><sys_updated_by>girishgyani</sys_updated_by><sys_updated_on>2018-11-25 13:44:52</sys_updated_on><target_name>catalog_ui_policy</target_name><target_scope display_value="Global">global</target_scope><target_type>sys_db_object</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>-1463294594</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>9eab0533c3d4569064971612b401314e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f1d0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>catalog_ui_policy</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>7985a6319b8f7110fc840fc1a964437f</update_guid>
<update_guid_history>7985a6319b8f7110fc840fc1a964437f:-1463294594,737fccf049c62b009eb7412245ef488d:-1114141604,bdbf3802c3eda11007ec260921be9df6:-1988393294,737fccf049c62b009eb7412245ef488d:-1114141604,bc4936add22d6110b8f068ec432d2f28:0,737fccf049c62b009eb7412245ef488d:-1114141604,1d12ddcc47a9e9108eecf07b28e22497:-1988393294,737fccf049c62b009eb7412245ef488d:-1114141604</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_07484cb82f77a1904627de1a2799b643</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl"><sys_security_acl action="INSERT_OR_UPDATE"><active>true</active><admin_overrides>true</admin_overrides><advanced>false</advanced><condition/><description>Default access control on x_nuta2_nutanix_ca_environment_subnet_mtom</description><name>x_nuta2_nutanix_ca_environment_subnet_mtom</name><operation display_value="delete">delete</operation><script/><sys_class_name>sys_security_acl</sys_class_name><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 06:32:32</sys_created_on><sys_id>07484cb82f77a1904627de1a2799b643</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_security_acl_07484cb82f77a1904627de1a2799b643</sys_update_name><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 06:32:32</sys_updated_on><type display_value="record">record</type></sys_security_acl></record_update>]]></payload>
<payload_hash>485120158</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>9eab0533c3d4569064971612b4013151</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30530000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>x_nuta2_nutanix_ca_environment_subnet_mtom</target_name>
<type>Access Control</type>
<update_domain>global</update_domain>
<update_guid>18a34d7cc0fba1900acb4c69e7df56f9</update_guid>
<update_guid_history>18a34d7cc0fba1900acb4c69e7df56f9:485120158,83484cb8ba77a19060bdd556534b8645:485120158</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_documentation_x_nuta2_nutanix_ca_environment_subnet_mtom_envuuid_subnetuuid_en</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_documentation element="envuuid_subnetuuid" label="EnvUUID-SubnetUUID" language="en" table="x_nuta2_nutanix_ca_environment_subnet_mtom"><sys_documentation action="INSERT_OR_UPDATE"><element>envuuid_subnetuuid</element><help/><hint/><label>EnvUUID-SubnetUUID</label><language>en</language><name>x_nuta2_nutanix_ca_environment_subnet_mtom</name><plural>EnvUUID-SubnetUUIDs</plural><sys_class_name>sys_documentation</sys_class_name><sys_created_by>subuhee.fathima</sys_created_by><sys_created_on>2023-07-04 07:22:38</sys_created_on><sys_id>0c2a30822f77e1104627de1a2799b649</sys_id><sys_mod_count>2</sys_mod_count><sys_name>EnvUUID-SubnetUUID</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_documentation_x_nuta2_nutanix_ca_environment_subnet_mtom_envuuid_subnetuuid_en</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2024-03-20 07:51:01</sys_updated_on><url/><url_target/></sys_documentation></sys_documentation></record_update>]]></payload>
<payload_hash>-2002549867</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>9eab4133c3d4569064971612b4013122</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c308a0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>Environment Subnet MTOM.EnvUUID-SubnetUUID</target_name>
<type>Field Label</type>
<update_domain>global</update_domain>
<update_guid>10b28c754145c2101e0559feaf1c3567</update_guid>
<update_guid_history>10b28c754145c2101e0559feaf1c3567:-2002549867,32fd3f699d05c210e66e26a980447c02:-2002549867,94fd7f2d6905c210471a29f9e5f785dd:-380988645,442af4065777e110f2c4a2120a386a1b:-1436426053</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_section_0be04a97dbfc3300bd097dda8c9619f0</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_ui_section caption="" section_id="0be04a97dbfc3300bd097dda8c9619f0" sys_domain="global" table="x_nuta2_nutanix_ca_subnet" version="3" view=""><sys_ui_element action="INSERT_OR_UPDATE"><element>name</element><position>0</position><sys_created_by>admin</sys_created_by><sys_created_on>2019-04-19 09:18:04</sys_created_on><sys_id>c1f04a97dbfc3300bd097dda8c9619f9</sys_id><sys_mod_count>0</sys_mod_count><sys_ui_formatter/><sys_ui_section caption="NULL" display_value="" name="x_nuta2_nutanix_ca_subnet" sys_domain="global" view="Default view">0be04a97dbfc3300bd097dda8c9619f0</sys_ui_section><sys_updated_by>admin</sys_updated_by><sys_updated_on>2019-04-19 09:18:04</sys_updated_on><sys_user/><type/></sys_ui_element><sys_ui_element action="INSERT_OR_UPDATE"><element>uuid</element><position>1</position><sys_created_by>admin</sys_created_by><sys_created_on>2019-04-19 09:18:04</sys_created_on><sys_id>c9f04a97dbfc3300bd097dda8c9619f9</sys_id><sys_mod_count>0</sys_mod_count><sys_ui_formatter/><sys_ui_section caption="NULL" display_value="" name="x_nuta2_nutanix_ca_subnet" sys_domain="global" view="Default view">0be04a97dbfc3300bd097dda8c9619f0</sys_ui_section><sys_updated_by>admin</sys_updated_by><sys_updated_on>2019-04-19 09:18:04</sys_updated_on><sys_user/><type/></sys_ui_element><sys_ui_element action="INSERT_OR_UPDATE"><element>subnet_type</element><position>2</position><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-04-26 07:12:38</sys_created_on><sys_id>99089e2993358e1090acfa497bba10af</sys_id><sys_mod_count>0</sys_mod_count><sys_ui_formatter/><sys_ui_section caption="NULL" display_value="" name="x_nuta2_nutanix_ca_subnet" sys_domain="global" view="Default view">0be04a97dbfc3300bd097dda8c9619f0</sys_ui_section><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-04-26 07:12:38</sys_updated_on><sys_user/><type/></sys_ui_element><sys_ui_element action="INSERT_OR_UPDATE"><element>vpc_reference_uuid</element><position>3</position><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-05-03 06:53:58</sys_created_on><sys_id>94e69a37933d4a5090acfa497bba106c</sys_id><sys_mod_count>0</sys_mod_count><sys_ui_formatter/><sys_ui_section caption="NULL" display_value="" name="x_nuta2_nutanix_ca_subnet" sys_domain="global" view="Default view">0be04a97dbfc3300bd097dda8c9619f0</sys_ui_section><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-05-03 06:53:58</sys_updated_on><sys_user/><type/></sys_ui_element><sys_ui_element action="INSERT_OR_UPDATE"><element>vpc_name</element><position>4</position><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-05-06 09:53:41</sys_created_on><sys_id>c6cc16f8938e8e5090acfa497bba1073</sys_id><sys_mod_count>0</sys_mod_count><sys_ui_formatter/><sys_ui_section caption="NULL" display_value="" name="x_nuta2_nutanix_ca_subnet" sys_domain="global" view="Default view">0be04a97dbfc3300bd097dda8c9619f0</sys_ui_section><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-05-06 09:53:41</sys_updated_on><sys_user/><type/></sys_ui_element><sys_ui_element action="INSERT_OR_UPDATE"><element>subnet_vpc_type</element><position>5</position><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-05-06 10:01:04</sys_created_on><sys_id>da7e1a7c938e8e5090acfa497bba10b9</sys_id><sys_mod_count>0</sys_mod_count><sys_ui_formatter/><sys_ui_section caption="NULL" display_value="" name="x_nuta2_nutanix_ca_subnet" sys_domain="global" view="Default view">0be04a97dbfc3300bd097dda8c9619f0</sys_ui_section><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-05-06 10:01:04</sys_updated_on><sys_user/><type/></sys_ui_element><sys_ui_section action="INSERT_OR_UPDATE"><caption/><header>false</header><name>x_nuta2_nutanix_ca_subnet</name><roles/><sys_class_name>sys_ui_section</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2019-04-19 09:17:55</sys_created_on><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>0be04a97dbfc3300bd097dda8c9619f0</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_subnet</sys_name><sys_overrides/><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_ui_section_0be04a97dbfc3300bd097dda8c9619f0</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2019-04-19 09:17:55</sys_updated_on><sys_user/><title>true</title><view display_value="Default view" name="NULL">Default view</view><view_name/></sys_ui_section></sys_ui_section></record_update>]]></payload>
<payload_hash>-1591498080</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>a6ab0533c3d4569064971612b4013156</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30fc0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_subnet</table>
<target_name>Subnet</target_name>
<type>Form Layout</type>
<update_domain>global</update_domain>
<update_guid>567e1a7ce68e8e502c7c926dbbbd38bb</update_guid>
<update_guid_history>567e1a7ce68e8e502c7c926dbbbd38bb:-1591498080,46ccdaf8f18e8e50ff0b068825d7028d:-1553104451,d4e69a37f93d4a5041e19a96281dfc6e:1029012842,ad089e2915358e10b0e406057e92c4b1:845451416,c9f04a97e0fc330089182ee4757e59fa:-1134897924,8c3f304e36ada110bbcbf21847670df2:907813993,c9f04a97e0fc330089182ee4757e59fa:-1134897924,56c93aa1fa6d61106cced96fd620091e:907813993,c9f04a97e0fc330089182ee4757e59fa:-1134897924,d2819d48dba9e91068fe7aee16495cc2:907813993,c9f04a97e0fc330089182ee4757e59fa:-1134897924,43e04a975ffc3300e2c8650c4ef66ff4:-1995758517</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_list_x_nuta2_nutanix_ca_nutanix_marketplaceitems_null</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_ui_list parent="" relationship="" sys_domain="global" table="x_nuta2_nutanix_ca_nutanix_marketplaceitems" version="2" view=""><sys_ui_list_element action="INSERT_OR_UPDATE"><average_value>false</average_value><element>name</element><list_id display_value="x_nuta2_nutanix_ca_nutanix_marketplaceitems" element="NULL" name="x_nuta2_nutanix_ca_nutanix_marketplaceitems" parent="NULL" relationship="NULL" sys_domain="global" view="Default view">a30e4983dbd1230084249235ca961916</list_id><max_value>false</max_value><min_value>false</min_value><position>0</position><sum>false</sum><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-01-22 14:48:18</sys_created_on><sys_id>f94172c3473f75506fffa3b3416d43e1</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-01-22 14:48:18</sys_updated_on></sys_ui_list_element><sys_ui_list_element action="INSERT_OR_UPDATE"><average_value>false</average_value><element>owner_name</element><list_id display_value="x_nuta2_nutanix_ca_nutanix_marketplaceitems" element="NULL" name="x_nuta2_nutanix_ca_nutanix_marketplaceitems" parent="NULL" relationship="NULL" sys_domain="global" view="Default view">a30e4983dbd1230084249235ca961916</list_id><max_value>false</max_value><min_value>false</min_value><position>1</position><sum>false</sum><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-01-22 14:48:18</sys_created_on><sys_id>b14172c3473f75506fffa3b3416d43e2</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-01-22 14:48:18</sys_updated_on></sys_ui_list_element><sys_ui_list_element action="INSERT_OR_UPDATE"><average_value>false</average_value><element>author</element><list_id display_value="x_nuta2_nutanix_ca_nutanix_marketplaceitems" element="NULL" name="x_nuta2_nutanix_ca_nutanix_marketplaceitems" parent="NULL" relationship="NULL" sys_domain="global" view="Default view">a30e4983dbd1230084249235ca961916</list_id><max_value>false</max_value><min_value>false</min_value><position>2</position><sum>false</sum><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-01-22 14:48:18</sys_created_on><sys_id>354172c3473f75506fffa3b3416d43e2</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-01-22 14:48:18</sys_updated_on></sys_ui_list_element><sys_ui_list_element action="INSERT_OR_UPDATE"><average_value>false</average_value><element>version_mpi</element><list_id display_value="x_nuta2_nutanix_ca_nutanix_marketplaceitems" element="NULL" name="x_nuta2_nutanix_ca_nutanix_marketplaceitems" parent="NULL" relationship="NULL" sys_domain="global" view="Default view">a30e4983dbd1230084249235ca961916</list_id><max_value>false</max_value><min_value>false</min_value><position>3</position><sum>false</sum><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-01-22 14:48:18</sys_created_on><sys_id>b54172c3473f75506fffa3b3416d43e2</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-01-22 14:48:18</sys_updated_on></sys_ui_list_element><sys_ui_list_element action="INSERT_OR_UPDATE"><average_value>false</average_value><element>state</element><list_id display_value="x_nuta2_nutanix_ca_nutanix_marketplaceitems" element="NULL" name="x_nuta2_nutanix_ca_nutanix_marketplaceitems" parent="NULL" relationship="NULL" sys_domain="global" view="Default view">a30e4983dbd1230084249235ca961916</list_id><max_value>false</max_value><min_value>false</min_value><position>4</position><sum>false</sum><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-01-22 14:48:18</sys_created_on><sys_id>394172c3473f75506fffa3b3416d43e2</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-01-22 14:48:18</sys_updated_on></sys_ui_list_element><sys_ui_list_element action="INSERT_OR_UPDATE"><average_value>false</average_value><element>appfamily</element><list_id display_value="x_nuta2_nutanix_ca_nutanix_marketplaceitems" element="NULL" name="x_nuta2_nutanix_ca_nutanix_marketplaceitems" parent="NULL" relationship="NULL" sys_domain="global" view="Default view">a30e4983dbd1230084249235ca961916</list_id><max_value>false</max_value><min_value>false</min_value><position>5</position><sum>false</sum><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-01-22 14:48:18</sys_created_on><sys_id>b94172c3473f75506fffa3b3416d43e2</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-01-22 14:48:18</sys_updated_on></sys_ui_list_element><sys_ui_list_element action="INSERT_OR_UPDATE"><average_value>false</average_value><element>app_state</element><list_id display_value="x_nuta2_nutanix_ca_nutanix_marketplaceitems" element="NULL" name="x_nuta2_nutanix_ca_nutanix_marketplaceitems" parent="NULL" relationship="NULL" sys_domain="global" view="Default view">a30e4983dbd1230084249235ca961916</list_id><max_value>false</max_value><min_value>false</min_value><position>6</position><sum>false</sum><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-01-22 14:48:18</sys_created_on><sys_id>3d4172c3473f75506fffa3b3416d43e2</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-01-22 14:48:18</sys_updated_on></sys_ui_list_element><sys_ui_list_element action="INSERT_OR_UPDATE"><average_value>false</average_value><element>support_status</element><list_id display_value="x_nuta2_nutanix_ca_nutanix_marketplaceitems" element="NULL" name="x_nuta2_nutanix_ca_nutanix_marketplaceitems" parent="NULL" relationship="NULL" sys_domain="global" view="Default view">a30e4983dbd1230084249235ca961916</list_id><max_value>false</max_value><min_value>false</min_value><position>7</position><sum>false</sum><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-01-22 14:48:18</sys_created_on><sys_id>bd4172c3473f75506fffa3b3416d43e2</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-01-22 14:48:18</sys_updated_on></sys_ui_list_element><sys_ui_list_element action="INSERT_OR_UPDATE"><average_value>false</average_value><element>deprecation_reason</element><list_id display_value="x_nuta2_nutanix_ca_nutanix_marketplaceitems" element="NULL" name="x_nuta2_nutanix_ca_nutanix_marketplaceitems" parent="NULL" relationship="NULL" sys_domain="global" view="Default view">a30e4983dbd1230084249235ca961916</list_id><max_value>false</max_value><min_value>false</min_value><position>8</position><sum>false</sum><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-01-22 14:48:18</sys_created_on><sys_id>314172c3473f75506fffa3b3416d43e3</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-01-22 14:48:18</sys_updated_on></sys_ui_list_element><sys_ui_list_element action="INSERT_OR_UPDATE"><average_value>false</average_value><element>sys_created_on</element><list_id display_value="x_nuta2_nutanix_ca_nutanix_marketplaceitems" element="NULL" name="x_nuta2_nutanix_ca_nutanix_marketplaceitems" parent="NULL" relationship="NULL" sys_domain="global" view="Default view">a30e4983dbd1230084249235ca961916</list_id><max_value>false</max_value><min_value>false</min_value><position>9</position><sum>false</sum><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-01-22 14:48:18</sys_created_on><sys_id>b14172c3473f75506fffa3b3416d43e3</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-01-22 14:48:18</sys_updated_on></sys_ui_list_element><sys_ui_list_element action="INSERT_OR_UPDATE"><average_value>false</average_value><element>sys_updated_on</element><list_id display_value="x_nuta2_nutanix_ca_nutanix_marketplaceitems" element="NULL" name="x_nuta2_nutanix_ca_nutanix_marketplaceitems" parent="NULL" relationship="NULL" sys_domain="global" view="Default view">a30e4983dbd1230084249235ca961916</list_id><max_value>false</max_value><min_value>false</min_value><position>10</position><sum>false</sum><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-01-22 14:48:18</sys_created_on><sys_id>354172c3473f75506fffa3b3416d43e3</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-01-22 14:48:18</sys_updated_on></sys_ui_list_element><sys_ui_list action="INSERT_OR_UPDATE"><average_value>false</average_value><element/><max_value>false</max_value><min_value>false</min_value><name>x_nuta2_nutanix_ca_nutanix_marketplaceitems</name><parent/><position/><relationship/><sum>false</sum><sys_class_name>sys_ui_list</sys_class_name><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-01-22 14:48:18</sys_created_on><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>a30e4983dbd1230084249235ca961916</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_nutanix_marketplaceitems</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_ui_list_x_nuta2_nutanix_ca_nutanix_marketplaceitems_null</sys_update_name><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-01-22 14:48:18</sys_updated_on><sys_user/><view display_value="Default view" name="NULL">Default view</view><view_name/></sys_ui_list></sys_ui_list></record_update>]]></payload>
<payload_hash>657502940</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>aaab0533c3d4569064971612b4013155</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2fec0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_marketplaceitems</table>
<target_name>Marketplace Items</target_name>
<type>List Layout</type>
<update_domain>global</update_domain>
<update_guid>394172c3513f75505aaf81e53ac9eee5</update_guid>
<update_guid_history>394172c3513f75505aaf81e53ac9eee5:657502940,83b5cd40f57d1010d31915e4c12c04ee:1240590512,905ffc4e7eada11023c82859d1bbbbd5:-1389656518,83b5cd40f57d1010d31915e4c12c04ee:1240590512,68c936a15e6d61103d8fcbeb7733830a:1090037571,83b5cd40f57d1010d31915e4c12c04ee:1240590512,baa119c8cda9e9109510f466bc0af384:1090037571,83b5cd40f57d1010d31915e4c12c04ee:1240590512,8c8549404f7d101060d583c0eb75dd73:694162921,ffa3fff70969d090531c4183faa54a74:-578490051,1e2a4920419e230007b5736387a96777:-1606199323,cfb44d688b5e23002f43a199378b6cad:-1883218815,83a40d68e95e23004da6840a76764fd3:443701676,bca13868731e2300d977e2c274cb436c:-1492101013,7e31f0682e1e23008162ecfd95beb17a:-661977645,cb113068151e230013a219340af801bc:-123292914,dff03068481e2300127e1bfaf5d0b492:1241928747,c9022c987092230047064b229092a3d1:-1608798654,24f1e058f9922300c8532749b7cd2f4d:-656369201,09e1acd485922300aa37778853138c32:-41936687,2f9702a9874e2300ee7669939f3d6e2d:646854531,24ec9d50092963009e0050ae30c03563:1501967378,3ea0c91442a563008818fe8cbb9e92d9:-432502782,af0e498309d12300f1e6310ec9f8db1a:-1893598404</update_guid_history>
<update_set display_value=""/>
<view>Default view</view>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_ab05ac562f82f010138fd49df699b62e</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name&gt;delete_runbook&lt;/action_name&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;true&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;(gs.hasRole('admin') || gs.hasRole('x_nuta2_nutanix_ca.calm_admin') ) &amp;amp;&amp;amp; current.state+''!='deleted' &amp;amp;&amp;amp; new Nutanix_ClientServerScriptBridge().checkQueue()&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style&gt;destructive&lt;/form_style&gt;&lt;format_for_configurable_workspace&gt;false&lt;/format_for_configurable_workspace&gt;&lt;hint/&gt;&lt;isolate_script&gt;true&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;messages/&gt;&lt;name&gt;Delete&lt;/name&gt;&lt;onclick&gt;runClientCode()&lt;/onclick&gt;&lt;order&gt;100&lt;/order&gt;&lt;script&gt;&lt;![CDATA[function runClientCode(){

	if(confirm("Deleting runbook will also delete associated catalog items. Are you sure you wanna delete this Runbook?"))
    	gsftSubmit(null, g_form.getFormElement(), 'delete_runbook');
}

if(typeof window == 'undefined')
	runBusRuleCode();

function runBusRuleCode(){
	var url = 'x_nuta2_nutanix_ca_runbooks_list.do?sysparm_userpref_module=4a77175c1ba0b4104debece4604bcb83&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';
	var cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
	cat_item.addQuery('blueprint',current.sys_id);
	cat_item.query();
	
	while(cat_item.next()){
		
		if(cat_item.state+''=='deleted' ){
			
		}else{
			cat_item.state = 'deleted';
			cat_item.update();
			if(cat_item.item_name.getRefRecord()){
			var catItem = cat_item.item_name.getRefRecord();
			catItem.active = false;
			catItem.update();
			gs.addErrorMessage("Catalog Item " + cat_item.item_name.name + " Deleted.");
			url = 'x_nuta2_nutanix_ca_runbooks_list.do?sysparm_userpref_module=4a77175c1ba0b4104debece4604bcb83&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';
		}
		}
	}
	gs.addErrorMessage("Runbook " + current.name + " Deleted.");
	current.deleteRecord();
	action.setRedirectURL(url);
}
]]&gt;&lt;/script&gt;&lt;show_insert&gt;true&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2021-08-20 12:09:00&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;ab05ac562f82f010138fd49df699b62e&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;Delete&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_ab05ac562f82f010138fd49df699b62e&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-12-27 07:11:07&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_runbooks&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>206544819</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>aeab0533c3d4569064971612b4013154</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f480000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_runbooks</table>
<target_name>Delete</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>574fcfea4d5ff550c0814dbf8159ca19</update_guid>
<update_guid_history>574fcfea4d5ff550c0814dbf8159ca19:206544819,a32ce09ef282f0101b09e4c227ef1322:-2116697202,aefffc4274eda110b8e1c5e036a2b0b8:628584474,a32ce09ef282f0101b09e4c227ef1322:-2116697202,e9b93e61b56d6110cbfa7e754bfb1ab9:628584474,a32ce09ef282f0101b09e4c227ef1322:-2116697202,288291c030e9e9101b68b0994e8b01c1:628584474,a32ce09ef282f0101b09e4c227ef1322:-2116697202,2b5a241e3082f010c06bc39110932e07:493796942,b7c56c965982f0107b64d25caa9fec08:-916058955</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_75c3833837fd2300fdfc097973990e2f</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ConfigureSettingScripts&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ConfigureSettingScripts&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ConfigureSettingScripts = Class.create();
Nutanix_ConfigureSettingScripts.prototype = {
    initialize: function () {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.appScriptInstance = new Nutanix_ImportApplicationProfiles();
        this.protected_var = 'protected';
    },
	isOnSubmitCheckEnabled: function(){
		return gs.getProperty('x_nuta2_nutanix_ca.catalogs.enableOnSubmitCheck');
	},
    genUniqueScriptIdTemplate: function () {
        return "var SCRIPT_UNIQUE_ID = \"" + gs.generateGUID() + "\"; /*This is not a sysid*/";
    },
    /**
     * @param {{shouldRegistry:boolean}} options
     */
    getLoadingRegistryScriptTeamplate: function (options) {
        var loadingRegistryClass = "\n\tvar LoadingRegistry = function (scriptId) {\n      var PREFIX = \'x_script:\';\n      var storageKey = PREFIX + scriptId;\n      var Stats = {\n         STANDBY: \'STANDBY\',\n         RUNNING: \'RUNNING\',\n      };\n\n      return {\n         register: function () {\n            sessionStorage[storageKey] = Stats.RUNNING;\n         },\n         switchStatusToStandBy: function () {\n            sessionStorage[storageKey] = Stats.STANDBY;\n         },\n         switchStatusToRunning: function () {\n            sessionStorage[storageKey] = Stats.RUNNING;\n         },\n         getAllScripts: function () {\n            var scripts = [];\n            for (var key in sessionStorage) {\n               if (!key.startsWith(PREFIX)) continue;\n               scripts.push(key);\n            }\n            return scripts;\n         },\n         getAllScriptsAndValues: function () {\n            var keys = {};\n            this.getAllScripts().forEach(function (key) {\n               keys[key] = sessionStorage[key];\n            });\n            return keys;\n         },\n         getAllRunningScripts: function () {\n            var allScripts = this.getAllScriptsAndValues();\n            var runningScripts = [];\n            for (var script in allScripts) {\n               if (allScripts[script] === Stats.RUNNING) runningScripts.push(script);\n            }\n            return runningScripts;\n         },\n         cleanRegistry: function () {\n            var allScripts = this.getAllScripts();\n            for (var key in allScripts) {\n               sessionStorage.removeItem(allScripts[key]);\n            }\n         }\n      };\n   };\nvar reg = LoadingRegistry(SCRIPT_UNIQUE_ID);"
        var registryClass = "\n   reg.register();\n";
        var finalScript = [loadingRegistryClass];
        if (options.shouldRegistry) {
            finalScript.push(registryClass);
        }
        return finalScript.join('\n');
    },
    _updateOptions: function (fieldSysid, opt, type) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateOptions");
            if (type == 5) {
                var grQust = new GlideRecord('question_choice');
                grQust.addQuery('question', fieldSysid);
                grQust.query();
                while (grQust.next()) {
                    grQust.setValue('question', '');
                    grQust.update();
                }
                grQust.deleteMultiple();
                for (var i in opt) {
                    grQust = new GlideRecord('question_choice');
                    grQust.initialize();
                    grQust.sys_class_name = "question_choice";
                    grQust.question = fieldSysid + '';
                    grQust.text = opt[i] + '';
                    grQust.value = opt[i] + '';
                    grQust.insert();
                }
            } else if (type == 21) {
                var grQust = new GlideRecord(this.appUtil.configuration.table.dropDownTable);
                grQust.addQuery('variable', fieldSysid);
                grQust.deleteMultiple();

                for (var i in opt) {
                    grQust = new GlideRecord(this.appUtil.configuration.table.dropDownTable);
                    grQust.initialize();
                    grQust.variable = fieldSysid;
                    grQust.name = opt[i];
                    grQust.value = opt[i];
                    grQust.insert();
                }
                var fGR = new GlideRecord('item_option_new');
                fGR.addQuery('sys_id', fieldSysid);
                fGR.query();
                if (fGR.next()) {
                    var column_fields = {};
                    column_fields.reference_qual = "variable=" + fieldSysid;
                    var fieldSysId = this.updateVariableTable(fGR.sys_id, column_fields, 'update');
                }

            }
        } catch (e) {
            this.logger.error("Inside Nutanix_ConfigureSettingScripts._updateOptions " + e);
        }

    },

    setServiceVariables: function (current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setServiceVariables.");

            var performAction = current.variables.type + '';
            var catName = '';

            if (performAction == 'new') {
                //priyanka More 
                var profile = current.variables.multiple_application_profile + "";
                var profile_arr = profile.split(",");

                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var service_data = JSON.parse(current.variables.service_data);

                this.logger.debug("Got Profile:- " + profile + " Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.service_data + " for setting service variables");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId);
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }


                this.logger.debug("Fethed the mapping of fields to sysIds. JSON string:- " + JSON.stringify(fieldInfo));

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                for (var i in service_data) {
                    var serviceName = i;
                    var categoryList = service_data[i];

                    for (var j in categoryList) {
                        var categoryName = j;
                        var category = categoryList[j];

                        var keys = Object.keys(category);

                        if (!category[keys[0]].notCmplx || category[keys[0]].notCmplx + '' == 'false') {

                            this.logger.debug("Mapping PortList variables " + JSON.stringify(category[keys[0]]) + " in Varaibles properties table");

                            gr.initialize();
                            gr.variable = fieldInfo[categoryName + ''] + '';
                            gr.application_profile = profile + '';
                            gr.catalog_item = catSysId + '';
                            gr.default_value = JSON.stringify(category[keys[0]]);
                            gr.isprofilevariable = 'false';
                            gr.runtime_config = 'false';
                            gr.uuid = '';
                            gr.service_name = fieldInfo[serviceName + ''] + '';
                            gr.category_name = fieldInfo[categoryName + ''] + '';
                            gr.insert();

                        } else {
                            for (var k in category) {
                                var varia = category[k];

                                this.logger.debug("Mapping service variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts service " + serviceName + " and category " + categoryName + " in Varaibles properties table");

                                if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                    varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);


                                gr.initialize();
                                gr.variable = fieldInfo[varia.name + ''] + '';
                                gr.application_profile = profile + '';
                                gr.catalog_item = catSysId + '';
                                gr.default_value = varia.value + '';
                                gr.isprofilevariable = varia.isprofilevariable + '';
                                gr.runtime_config = varia.runtime_config + '';
                                gr.uuid = varia.uuid + '';
                                gr.service_name = fieldInfo[serviceName + ''] + '';
                                gr.category_name = fieldInfo[categoryName + ''] + '';

                                gr.isdisabled = varia.isdisabled + '';
                                gr.issupported = varia.isSupported + '';
                                gr.isservicevariable = varia.isservicevariable + '';


                                gr.type = varia.type;
                                gr.value_type = varia.val_type + '';
                                gr.field_regex = varia.regex + '';
                                gr.data_type = varia.data_type + '';
                                gr.uuid = varia.uuid + '';

                                gr.field_json = varia.field + "";
                                gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;

                                gr.insert();

                                catName = gr.catalog_item.name + '';


                                //                                 if (varia.isservicevariable + '' == 'true')
                                //                                     this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");
                            }
                        }

                    }
                }
                //priyanka More 
                //                 this.logger.info("Set service variables values for " + catName + ".");
                // 				this.logger.debug("Prince Logs outside for :::   " + profile_arr + " ::: " + profile_arr.length);
                // 				for(var i = 0 ; i &lt; profile_arr.length ; i++){
                // 					this.logger.debug("Prince Logs calling ... _createOnChangeScriptForDependee ");
                // 					this._createOnChangeScriptForDependee(catSysId , profile_arr[i], true, "serviceVar" );
                // 				}

            } else {

                var profile = current.variables.application_profile + '';
                var catSysId = current.variables.cat_item + '';

                var service_data = JSON.parse(current.variables.service_data + '');

                this.logger.debug("Got Profile:- " + profile + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.service_data + " to update service variables.");

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('catalog_item', catSysId);
                gr.addQuery('application_profile', profile);
                gr.addQuery('isprofilevariable', false);
                gr.query();

                while (gr.next()) {
                    /*if((gr.category_name.name+'').indexOf('storage') != -1){
                        gr.default_value = JSON.stringify(service_data[gr.service_name.name+''][gr.category_name.name+''][gr.sys_id+'']);
                        gr.update();	
                        this.logger.debug("Updated service storage variable "+ gr.default_value);
                    }else if((gr.category_name.name+'').indexOf('port') != -1){
                        gr.default_value = JSON.stringify(service_data[gr.service_name.name+''][gr.category_name.name+''][gr.sys_id+'']);
                        gr.update();	
                        this.logger.debug("Updated service port list "+ gr.default_value);
                    }*/


                    var jsonData = service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''];

                    if (!jsonData.notCmplx || jsonData.notCmplx + '' == 'false') {
                        gr.default_value = JSON.stringify(service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + '']);
                        gr.update();
                        this.logger.debug("Updated service port list " + gr.default_value);
                    } else {
                        if (service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].data_type + '' == 'LOCAL' &amp;&amp; (service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE_TIME' || service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE'))
                            service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].value = this.appScriptInstance._formttedDateTime(service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].value + '', service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].val_type + '', true);

                        gr.default_value = service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].value + '';
                        gr.runtime_config = service_data[gr.service_name.name + ''][gr.category_name.name + ''][gr.sys_id + ''].runtime_config + '';
                        gr.update();

                        this.logger.debug("Updated service variable " + gr.variable.name + " with value " + gr.default_value + " and runtime config as " + gr.runtime_config + " againsts service " + gr.service_name.name + " and category " + gr.category_name.name + " in Variables properties table");
                        catName = gr.catalog_item.name + '';

                    }
                }

                this.logger.info("Updated service variables values for " + catName + ".");
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setServiceVariables. Error:- " + e);
        }
    },

    setProfileVariables: function (current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setProfileVariables.");
            this.logger.info("Setting profile variables properties." + JSON.stringify(current));

            var performAction = current.variables.type + '';
            var catName = '';

            if (performAction == 'new') {
                var profile = current.variables.multiple_application_profile + "";
                var profile_arr = profile.split(",");

                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var variable_data = JSON.parse(current.variables.variable_data);

                this.logger.debug("Got Profile:- " + profile + " Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.variable_data + " for setting profile variables");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId + '^type!=19^type!=20');
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }

                this.logger.debug("Fethed the mapping of fields to sysIds. JSON string:- " + JSON.stringify(fieldInfo));

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                for (var i in variable_data) {
                    var varia = variable_data[i];

                    if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                        varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);

                    gr.initialize();
                    gr.application_profile = varia.application_profile + '';
                    gr.catalog_item = catSysId + '';
                    gr.default_value = varia.value + '';
                    gr.isprofilevariable = varia.isprofilevariable + '';
                    gr.runtime_config = varia.runtime_config + '';
                    gr.uuid = varia.uuid + '';
                    gr.variable = fieldInfo[varia.name + ''] + '';
                    gr.isdisabled = varia.isdisabled + '';
                    gr.type = varia.type;
                    gr.value_type = varia.val_type + '';
                    gr.field_regex = varia.regex + '';
                    gr.data_type = varia.data_type + '';
                    gr.uuid = varia.uuid + '';
                    gr.field_json = varia.field + "";
                    gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;
                    gr.insert();
                    catName = gr.catalog_item.name + '';
                    this.logger.debug("Mapping profile variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts profile " + gr.application_profile.name + " in Variables properties table");


                    //if(varia.isprofilevariable+'' == "true")
                    //	this._createOnChangeScript(fieldInfo[varia.name+'']+'' , catSysId + "");


                }

                //priyanka More				

                for (var i = 0; i &lt; profile_arr.length; i++) {

                    this._createOnChangeScriptForDependee(catSysId, profile_arr[i], "profileVar");
                }

                this.logger.info("Set profile variables values for " + catName + ".");
            } else {

                var profile = current.variables.multiple_application_profile + "";
                var profile_arr = profile.split(",");
                var catSysId = current.variables.cat_item + '';
                var delta_profile = (current.variables.delta_profiles + '').split(',');
                var variable_data = JSON.parse(current.variables.variable_data + '');

                var variable_data = JSON.parse(current.variables.variable_data + '');
                for (var c in variable_data) {
                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                    gr.addQuery('catalog_item', catSysId);
                    gr.addQuery('application_profile', variable_data[c].application_profile);
                    gr.addQuery('isprofilevariable', true);
                    gr.query();

                    while (gr.next()) {
                        if (variable_data[gr.sys_id + ''].data_type + '' == 'LOCAL' &amp;&amp; (variable_data[gr.sys_id + ''].val_type + '' == 'DATE_TIME' || variable_data[gr.sys_id + ''].val_type + '' == 'DATE'))
                            variable_data[gr.sys_id + ''].value = this.appScriptInstance._formttedDateTime(variable_data[gr.sys_id + ''].value + '', variable_data[gr.sys_id + ''].val_type + '', true);

                        gr.default_value = variable_data[gr.sys_id + ''].value + '';
                        gr.runtime_config = variable_data[gr.sys_id + ''].runtime_config + '';
                        gr.update();
                        catName = gr.catalog_item.name + '';
                        this.logger.debug("Updated profile variable " + gr.variable.name + " with value " + gr.default_value + " and runtime config as " + gr.runtime_config + " againsts profile " + gr.application_profile.name + " in Variables properties table");
                    }
                }
                this.logger.info("Updated profile variables values for " + catName + ".");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId + '^type!=19^type!=20');
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }

                for (var c in variable_data) {
                    for (var k in delta_profile) {
                        if (variable_data[c].application_profile == delta_profile[k]) {
                            var varia = variable_data[c];

                            if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);

                            gr.initialize();
                            gr.application_profile = varia.application_profile + '';
                            gr.catalog_item = catSysId + '';
                            gr.default_value = varia.value + '';
                            gr.isprofilevariable = varia.isprofilevariable + '';
                            gr.runtime_config = varia.runtime_config + '';
                            gr.uuid = varia.uuid + '';
                            gr.variable = fieldInfo[varia.name + ''] + '';
                            gr.isdisabled = varia.isdisabled + '';
                            gr.type = varia.type;
                            gr.value_type = varia.val_type + '';
                            gr.field_regex = varia.regex + '';
                            gr.data_type = varia.data_type + '';
                            gr.uuid = varia.uuid + '';
                            gr.field_json = varia.field + "";
                            gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;
                            gr.insert();
                            catName = gr.catalog_item.name + '';
                            this.logger.debug("Mapping profile variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts profile " + gr.application_profile.name + " in Variables properties table");


                            //                             if (varia.isprofilevariable + '' == "true")
                            //                                 this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");

                        }
                    }
                }

                for (var i = 0; i &lt; profile_arr.length; i++) {

                    this._createOnChangeScriptForDependee(catSysId, profile_arr[i], "profileVar");
                }
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setProfileVariables. Error:- " + e);
        }
    },

    _createOnChangeScriptForDependee: function (catSysId, profileSysID, type) {
        try {

            var clientScriptVar = [];
            var variableProperty = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            variableProperty.addQuery('catalog_item', catSysId);
            variableProperty.addNotNullQuery('field_json');
            //      variableProperty.addQuery('application_profile', profileSysID);

            if (type + '' == 'profileVar')
                variableProperty.addQuery('isprofilevariable', true);
            if (type + '' == 'serviceVar')
                variableProperty.addQuery('isservicevariable', true);

            variableProperty.query();
            while (variableProperty.next()) {
                var depend_on = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                depend_on.addQuery('catalog_item', catSysId);
                depend_on.addNotNullQuery('field_json');
                //            depend_on.addQuery('application_profile', profileSysID);

                if (type + '' == 'profileVar')
                    depend_on.addQuery('isprofilevariable', true);
                if (type + '' == 'serviceVar')
                    depend_on.addQuery('isservicevariable', true);

                depend_on.query();
                while (depend_on.next()) {
                    var dependent_var = '';
                    if (type + '' == 'serviceVar') {

                        dependent_var = '@@{' + variableProperty.variable.question_text + '}@@';
                    }
                    if (type + '' == 'profileVar') {

                        dependent_var = '@@{' + variableProperty.variable.name + '}@@';
                    }
                    var field_json = depend_on.field_json + '';
                    if (field_json != '{}') {
                        if (field_json.indexOf(dependent_var) != -1) {
                            if (clientScriptVar.indexOf(variableProperty.variable.sys_id) === -1) {
                                clientScriptVar.push(variableProperty.variable.sys_id);
                            }
                            break;
                        }
                    }
                }
            }

            for (var j in clientScriptVar) {
                if (this._clientScriptExist(clientScriptVar[j] + '', catSysId + ""))
                    continue;
                else
                    this._createOnChangeScript(clientScriptVar[j] + '', catSysId + "");
            }
        } catch (e) {
            this.logger.error("Inside _createOnChangeScriptForDependee caught exception :::: " + e)
        }
    },
    _clientScriptExist: function (clientScriptVar, catSysId) {
        var gr = new GlideRecord('catalog_script_client');
        gr.addQuery('name', 'Fetch values OnChange');
        gr.addQuery('cat_item', catSysId);
        gr.addQuery('cat_variable', clientScriptVar);
        gr.query();
        if (gr.next())
            return true;
        else
            return false;
    },
    setCredentialsData: function (current) {

        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setCredentialsData.");





            var catSysId = current.description;
            var catName = '';
            var performAction = current.variables.type + '';

            if (performAction == 'new') {
                var blueprint = current.variables.blueprint;
                var variable_data = JSON.parse(current.variables.credentials_data);

                this.logger.debug("Got Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Credentials Data:- " + current.variables.credentials_data + " for setting credetnails.");

                var gr = new GlideRecord(this.appUtil.configuration.table.Credentials + '');

                for (var i in variable_data) {
                    var varia = variable_data[i];

                    gr.initialize();

                    gr.catalog_item = catSysId + '';
                    gr.actual_name = i + '';
                    gr.description = varia.description + '';
                    gr.is_default = varia.is_default + '';
                    gr.is_secret_modified = varia.is_secret_modified + '';
                    gr.name = varia.credential_name.value + '';
                    gr.passphrase = (varia.passphrase) ? varia.passphrase.value + '' : '';
                    gr.passphrase_editable = (varia.passphrase) ? varia.passphrase.runtime_config + '' : '';
                    gr.password = (varia.password) ? varia.password.value + '' : '';
                    gr.secret_editable = (varia.password) ? varia.password.runtime_config + '' : '';
                    gr.ssh_private_key = (varia.ssh_private_key) ? varia.ssh_private_key.value + '' : '';
                    gr.ssh_private_key_editable = (varia.ssh_private_key) ? varia.ssh_private_key.runtime_config + '' : '';
                    gr.state = varia.state + '';
                    gr.type = varia.secret_type.value + '';
                    gr.username = varia.username.value + '';
                    gr.username_editable = varia.username.runtime_config + '';
                    gr.uuid = varia.uuid + '';

                    gr.username_isdisabled = varia.username_isdisabled + '';
                    gr.secret_isdisabled = varia.secret_isdisabled + '';
                    gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled + '';
                    gr.passphrase_isdisabled = varia.passphrase_isdisabled + '';

                    gr.credential_reference = varia.credential_reference.value + '';
                    gr.runtime = varia.runtime + '';

                    gr.insert();

                    catName = gr.catalog_item.name + '';
                    this.logger.debug("Mapped credentials data against catalog item " + gr.catalog_item);
                }

                // 				var gr = new GlideRecord(this.appUtil.configuration.table.variableSetTable+'');
                // 				gr.addQuery('variable_set', gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'');
                // 				gr.addQuery('sc_cat_item', catSysId+'');
                // 				gr.query();

                // 				if(!gr.hasNext()){
                // 					gr.initialize();
                // 					gr.variable_set = gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'';
                // 					gr.sc_cat_item = catSysId+''; 
                // 					gr.order = '51001';
                // 					gr.insert();	
                // 				}

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('variable', gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '');
                gr.addQuery('catalog_item', catSysId + '');
                gr.query();

                if (gr.next()) {
                    gr.default_value = current.variables.environment_mapping;
                    gr.update();
                } else {
                    gr.initialize();
                    gr.variable = gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '';
                    gr.application_profile = '';
                    gr.catalog_item = catSysId + '';
                    gr.default_value = current.variables.environment_mapping;
                    gr.isprofilevariable = false;
                    gr.runtime_config = false;
                    gr.uuid = '';
                    gr.service_name = '';
                    gr.category_name = '';
                    gr.insert();
                }

                // 				if(current.variables.environment_mapping+'' == 'true'){
                // 					var mapping_data = JSON.parse(current.variables.credentials_mapping);

                // 					for(var i in mapping_data){

                // 						var varia = mapping_data[i];

                // 						var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
                // 						gr.addQuery('catalog_item', catSysId+'');
                // 						gr.addQuery('environment', varia.environment+'');
                // 						gr.addQuery('project', varia.project+'');
                // 						gr.query();

                // 						if(!gr.hasNext()){
                // 							gr.initialize();

                // 							gr.catalog_item = catSysId+'';
                // 							gr.actual_name = i+'';
                // 							gr.description = varia.description+'';
                // 							gr.is_default = varia.is_default+'';
                // 							gr.is_secret_modified = varia.is_secret_modified+'';
                // 							gr.name = varia.credential_name.value+'';
                // 							gr.passphrase = (varia.passphrase)?varia.passphrase.value+'':'';
                // 							gr.passphrase_editable = (varia.passphrase)?varia.passphrase.runtime_config+'':'';
                // 							gr.password = (varia.password)?varia.password.value+'':'';
                // 							gr.secret_editable = (varia.password)?varia.password.runtime_config+'':'';
                // 							gr.ssh_private_key = (varia.ssh_private_key)?varia.ssh_private_key.value+'':'';
                // 							gr.ssh_private_key_editable = (varia.ssh_private_key)?varia.ssh_private_key.runtime_config+'':'';
                // 							gr.state = varia.state+'';
                // 							gr.type = varia.secret_type.value+'';
                // 							gr.username = varia.username.value+'';
                // 							gr.username_editable = varia.username.runtime_config+'';
                // 							gr.uuid = varia.uuid+'';
                // 							gr.environment = varia.environment+'';
                // 							gr.project = varia.project+'';

                // 							gr.username_isdisabled = varia.username_isdisabled+'';
                // 							gr.secret_isdisabled = varia.secret_isdisabled+'';
                // 							gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled+'';
                // 							gr.passphrase_isdisabled = varia.passphrase_isdisabled+'';				 

                // 							gr.insert();	
                // 						}
                // 					}
                // 				}

                this.logger.info("Set profile variables values for " + catName + ".");
            } else {
                var catSysId = current.variables.cat_item + '';
                var variable_data = JSON.parse(current.variables.credentials_data);

                for (var i in variable_data) {
                    var varia = variable_data[i];

                    var gr = new GlideRecord(this.appUtil.configuration.table.Credentials + '');
                    gr.addQuery('catalog_item=' + catSysId + '^uuid=' + varia.uuid);
                    gr.query();

                    if (gr.next()) {
                        gr.catalog_item = catSysId + '';
                        gr.description = varia.description + '';
                        gr.is_default = varia.is_default + '';
                        gr.is_secret_modified = varia.is_secret_modified + '';
                        gr.name = varia.credential_name.value + '';
                        gr.passphrase = (varia.passphrase) ? varia.passphrase.value + '' : '';
                        gr.passphrase_editable = (varia.passphrase) ? varia.passphrase.runtime_config + '' : '';
                        gr.password = (varia.password) ? varia.password.value + '' : '';
                        gr.secret_editable = (varia.password) ? varia.password.runtime_config + '' : '';
                        gr.ssh_private_key = (varia.ssh_private_key) ? varia.ssh_private_key.value + '' : '';
                        gr.ssh_private_key_editable = (varia.ssh_private_key) ? varia.ssh_private_key.runtime_config + '' : '';
                        gr.state = varia.state + '';
                        gr.type = varia.secret_type.value + '';
                        gr.username = varia.username.value + '';
                        gr.username_editable = varia.username.runtime_config + '';
                        gr.uuid = varia.uuid + '';

                        gr.username_isdisabled = varia.username_isdisabled + '';
                        gr.secret_isdisabled = varia.secret_isdisabled + '';
                        gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled + '';
                        gr.passphrase_isdisabled = varia.passphrase_isdisabled + '';

                        gr.credential_reference = varia.credential_reference.value + '';
                        gr.runtime = varia.runtime + '';

                        gr.update();
                        catName = gr.catalog_item.name + '';
                        this.logger.debug("Updated credentials data against catalog item " + gr.catalog_item);
                    }
                }

                // 				var gr = new GlideRecord(this.appUtil.configuration.table.variableSetTable+'');
                // 				gr.addQuery('variable_set', gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'');
                // 				gr.addQuery('sc_cat_item', catSysId+'');
                // 				gr.query();

                // 				if(!gr.hasNext()){
                // 					gr.initialize();
                // 					gr.variable_set = gs.getProperty('x_nuta2_nutanix_ca.credentials.variable.set')+'';
                // 					gr.sc_cat_item = catSysId+''; 
                // 					gr.order = '51001';
                // 					gr.insert();	
                // 				}

                var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                gr.addQuery('variable', gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '');
                gr.addQuery('catalog_item', catSysId + '');
                gr.query();

                if (gr.next()) {
                    gr.default_value = current.variables.environment_mapping;
                    gr.update();
                } else {
                    gr.initialize();
                    gr.variable = gs.getProperty('x_nuta2_nutanix_ca.credentials.mapping.variable.sys.id') + '';
                    gr.application_profile = '';
                    gr.catalog_item = catSysId + '';
                    gr.default_value = current.variables.environment_mapping;
                    gr.isprofilevariable = false;
                    gr.runtime_config = false;
                    gr.uuid = '';
                    gr.service_name = '';
                    gr.category_name = '';
                    gr.insert();
                }

                // 				if(current.variables.environment_mapping+'' == 'true'){
                // 					var mapping_data = JSON.parse(current.variables.credentials_mapping);

                // 					for(var i in mapping_data){

                // 						var varia = mapping_data[i];

                // 						var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+'');
                // 						gr.addQuery('catalog_item', catSysId+'');
                // 						gr.addQuery('environment', varia.environment+'');
                // 						gr.addQuery('project', varia.project+'');
                // 						gr.query();

                // 						if(!gr.hasNext()){
                // 							gr.initialize();

                // 							gr.catalog_item = catSysId+'';
                // 							gr.actual_name = i+'';
                // 							gr.description = varia.description+'';
                // 							gr.is_default = varia.is_default+'';
                // 							gr.is_secret_modified = varia.is_secret_modified+'';
                // 							gr.name = varia.credential_name.value+'';
                // 							gr.passphrase = (varia.passphrase)?varia.passphrase.value+'':'';
                // 							gr.passphrase_editable = (varia.passphrase)?varia.passphrase.runtime_config+'':'';
                // 							gr.password = (varia.password)?varia.password.value+'':'';
                // 							gr.secret_editable = (varia.password)?varia.password.runtime_config+'':'';
                // 							gr.ssh_private_key = (varia.ssh_private_key)?varia.ssh_private_key.value+'':'';
                // 							gr.ssh_private_key_editable = (varia.ssh_private_key)?varia.ssh_private_key.runtime_config+'':'';
                // 							gr.state = varia.state+'';
                // 							gr.type = varia.secret_type.value+'';
                // 							gr.username = varia.username.value+'';
                // 							gr.username_editable = varia.username.runtime_config+'';
                // 							gr.uuid = varia.uuid+'';
                // 							gr.environment = varia.environment+'';
                // 							gr.project = varia.project+'';

                // 							gr.username_isdisabled = varia.username_isdisabled+'';
                // 							gr.secret_isdisabled = varia.secret_isdisabled+'';
                // 							gr.ssh_private_key_isdisabled = varia.ssh_private_key_isdisabled+'';
                // 							gr.passphrase_isdisabled = varia.passphrase_isdisabled+'';				 

                // 							gr.insert();	
                // 						}
                // 					}
                // 				}

                this.logger.info("Updated credentials values for " + catName + ".");
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setCredentialsData. Error:- " + e);
        }
    },

    _groupsToUsers: function (current) {

        var groups = (current.variables.assign_groups) ? (current.variables.assign_groups + "") : "";
        var users = (current.variables.assign_users) ? (current.variables.assign_users + "").split(",") : [];

        var grMembers = new GlideRecord("sys_user_grmember");
        grMembers.addEncodedQuery("group.sys_idIN" + groups);
        grMembers.query();
        while (grMembers.next()) {
            if (users.indexOf(grMembers.user.sys_id + "") == -1)
                users.push(grMembers.user.sys_id + "");
        }

        current.variables.assign_users = users.toString();

        return current;
    },

    configBPGeneralSettings: function (current, clientData, nonFilteredClientData) {

        try {

            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.configBPGeneralSettings.\n current : " + JSON.stringify(current) + "\n clientData : " + JSON.stringify(clientData) + "\n nonFilteredClientData " + JSON.stringify(nonFilteredClientData));
            var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
            var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.

            if (status + "" == "false")
                current = this._groupsToUsers(current);
            var environments = current.variables.environments + '';
            var performAction = current.variables.type + '';
            if (performAction == 'new') {
                var blueprint = (current.variables.type_of_blueprint == 'runbook' || current.variables.type_of_blueprint == 'published_runbook') ? current.variables.runbook + '' : current.variables.blueprint + '';
                var blueprintType = current.variables.type_of_blueprint + '';
                var createCatalog = current.variables.create_catalog + '';

                this.logger.debug("Got Blueprint:- " + blueprint + " Blueprint Type:- " + blueprintType + " and Create Catalog:- " + createCatalog + " for configuring new catalog item.");

                var targetCatTable = 'x_nuta2_nutanix_ca_nutanix_catalog_items';
                var sourceCatTable = '';
                if (blueprintType == 'unpublished')
                    sourceCatTable = 'x_nuta2_nutanix_ca_nutanix_blueprint';
                if (blueprintType == 'runbook')
                    sourceCatTable = 'x_nuta2_nutanix_ca_runbooks';
                if (blueprintType == 'published_runbook')
                    sourceCatTable = 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';
                if (blueprintType == 'published')
                    sourceCatTable = 'x_nuta2_nutanix_ca_nutanix_marketplaceitems';


                var ans;
                if (createCatalog == 'yes')
                    ans = this._copyCatalogItem(sourceCatTable, targetCatTable, blueprint, current, blueprintType, clientData, nonFilteredClientData);
                else
                    ans = this._updateCatalogItem(sourceCatTable, targetCatTable, blueprint, current);

                this._insertIntoRuntimeConfigTable(ans, current);
                this._updateUserOverCalm(current);
                if (status + "" == "false") //updated version check the flag for referense.
                {
                    this._updateGroupOverCalm(current);
                }
                /*else {
                    this._updateGroupSnowRole(current);
                }*/

                return ans[0] + '';
            } else {

                var cat_item = current.variables.cat_item + '';

                var blueprintType = current.variables.type_of_blueprint + '';

                this.logger.debug("Got Catalog Item:- " + cat_item + " for updating existing catalog item.");

                var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
                gr.addQuery('item_name', cat_item);
                gr.query();

                if (gr.next()&amp;&amp; gr.item_name.getRefRecord()) {
                    var cat = gr.item_name.getRefRecord();
                    cat.sys_name = current.variables.item_name + '';
                    cat.name = current.variables.item_name + '';
                    cat.short_description = current.variables.item_name + '';
                    cat.description_markdown = current.variables.description + '';
                    cat.description = this.appUtil.markdown_renderer(current.variables.description + '');
                    cat.update();

                    // 					var user_criteria = gr.user_criteria.getRefRecord();
                    // 					user_criteria.user = current.variables.assign_users;
                    var group = '';
                    if (status + "" == "false") {
                        group = current.variables.assign_groups;
                    } else {
                        group = current.variables.assign_local_groups;
                    }
                    var user_criteria = new sn_uc.UserCriteria(gr.user_criteria.sys_id);
                    user_criteria.update({
                        "user": "" + current.variables.assign_users,
                        "group": "" + group
                    }, "Update user criteria user Group");
                    //	user_criteria.update();

                    this._updateUserOverCalm(current);

                    if (status + "" == "false") {
                        this._updateGroupOverCalm(current);
                    }
                    /*else {
                        this._updateGroupSnowRole(current);
                    }*/
                    gr.multiple_application_profile = current.variables.multiple_application_profile;
                    gr.multiple_projects = current.variables.multiple_project;
                    gr.environments = current.variables.environments;
                    if (blueprintType == 'runbook' || blueprintType == 'published_runbook') {
                        gr.endpoint = current.variables.endpoint;
                    }
                    gr.update();
                    return gr.item_name + '';
                }

            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.configBPGeneralSettings. Error:- " + e);
        }
    },

    _checkUsersUUID: function (current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._checkUsersUUID.");

            var userGr = new GlideRecord('sys_user');
            userGr.addEncodedQuery('sys_idIN' + current.variables.assign_users + '^x_nuta2_nutanix_ca_nutanix_uuidISEMPTY');
            userGr.query();

            var taskUUIDList = [];

            while (userGr.next()) {

                var ldapGR = new GlideRecord('ldap_server_config');
                if (ldapGR.get(userGr.ldap_server + '')) {
                    var LDAPName = '';
                    var LDAPUuid = '';
                    // 				var ldap_rdn = ldapGR.rdn+'';
                    // 				ldap_rdn = ldap_rdn.replace(/DC=/g,"").replace(/,/g,".");
                    var dir_body = {
                        "kind": "directory_service",
                        "filter": 'url==' + ldapGR.server_url //+";domain_name=="+ldap_rdn
                    }

                    this.logger.debug("Body for directory services:: :: " + JSON.stringify(dir_body));

                    var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.directoryServices + "", JSON.stringify(dir_body));
                    this.logger.debug("Response Body for directory :: " + response.getBody());

                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                        var parsed = JSON.parse(response.getBody());
                        parsed = parsed.entities;
                        for (var p in parsed) {
                            var par_entity = parsed[p];
                            var domain_name = par_entity.status.resources.domain_name + "";
                            //						if(domain_name == ldap_rdn){
                            if (par_entity.status.resources.url + '' == ldapGR.server_url + '' || par_entity.status.resources.url + '' == ldapGR.server_url + '/' || par_entity.status.resources.url + '/' == ldapGR.server_url + '') {
                                LDAPName = par_entity.status.name + '';
                                LDAPUuid = par_entity.metadata.uuid + '';
                                break;
                            }
                        }

                        //LDAPName = parsed.entities[0].status.name+'';
                        //LDAPUuid = parsed.entities[0].metadata.uuid+'';

                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._checkUsersUUID :- Error while updating directory:- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }

                    var body = {
                        "spec": {
                            "resources": {
                                "directory_service_user": {
                                    "user_principal_name": userGr.email + '',
                                    "directory_service_reference": {
                                        "kind": "directory_service",
                                        "name": LDAPName,
                                        "uuid": LDAPUuid

                                    }
                                }
                            }
                        },
                        "metadata": {
                            "kind": "user",
                            "name": userGr.name + ''
                        }
                    };
                    this.logger.debug("Body send for user :: " + JSON.stringify(body));
                    var response = this.appUtil.makeCalmApiCall("POST", "/users", JSON.stringify(body));
                    var res = JSON.parse(response.getBody());
                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {

                        userGr.x_nuta2_nutanix_ca_nutanix_uuid = JSON.parse(response.getBody()).metadata.uuid + '';
                        userGr.update();

                        taskUUIDList.push(JSON.parse(response.getBody()).status.execution_context.task_uuid + '');

                    } else if (response.getStatusCode() == '400' &amp;&amp; res.message_list[0].reason == "DUPLICATE_ENTITY") {

                        var payload = {
                            "kind": "user",
                            "filter": "username==" + userGr.email + ''
                        };


                        var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.getUsersList + "", this.appUtil.stringify(payload));

                        if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                            var parsedJSON = this.appUtil.parse(response.getBody());
                            var entities = parsedJSON.entities;
                            var entity = entities[0];
                            var uuid = entity.metadata.uuid + '';
                            userGr.x_nuta2_nutanix_ca_nutanix_uuid = uuid;
                            userGr.update();

                        } else {

                            this.logger.debug("Nutanix_ImportUsers.importUsers:- Connection users/list not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                        }
                        ///

                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._checkUsersUUID :- Error while creating user entity in calm:- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }
                }
            }

            var taskComplete = true;
            var i = 0;
            do {
                if (i &gt;= taskUUIDList.length) {
                    i = 0;
                    taskComplete = true;
                }

                var response = this.appUtil.makeCalmApiCall("GET", "/tasks/" + taskUUIDList[i], '');
                var parsedTask = JSON.parse(response.getBody());
                if (parsedTask.status + '' == 'QUEUED' || parsedTask.status + '' == 'RUNNING') {
                    taskComplete = false;
                    i++;
                } else {
                    taskUUIDList.splice(i, 1);
                }

                if (taskUUIDList.length &lt; 1)
                    break;

            } while (taskComplete == false);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._checkUsersUUID. Error:- " + e);
        }
    },


    _updateUserOverCalm: function (current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateUserOverCalm.");

            if (!current.variables.assign_users)
                return;

            this._checkUsersUUID(current); //this create ldap user in calm and updates ldap user uuid in SNOW if user uuid is not present in calm.

            var projects = current.variables.multiple_project.toString();
            var project_array = projects.split(',');
            for (var k = 0; k &lt; project_array.length; k++) {
                this.logger.debug('Inside Nutanix_ConfigureSettingScripts._updateUserOverCalm. projects sys_id' + project_array[k]);
                var projectGR = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                if (projectGR.get(project_array[k])) {
                    var projectUUID = projectGR.uuid;
                    this.logger.debug('Inside Nutanix_ConfigureSettingScripts._updateUserOverCalm. projects UUID ' + projectUUID);
                    var response = this.appUtil.makeCalmApiCall("GET", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, '');
                }
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                    var parsed = this.appUtil.parse(response.getBody());
                    var acpRoles = parsed.spec.access_control_policy_list;

                    var acpConsumerRoleIndex = '';

                    for (var i in acpRoles) {
                        if (acpRoles[i].acp.resources.role_reference.uuid + '' == gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '') {
                            acpConsumerRoleIndex = i;
                        }
                        parsed.spec.access_control_policy_list[i].operation = "UPDATE";
                    }

                    var userGr = new GlideRecord('sys_user');
                    userGr.addEncodedQuery('sys_idIN' + current.variables.assign_users);
                    userGr.query();

                    var userArr = {};

                    while (userGr.next()) {
                        userArr[userGr.sys_id + ''] = {
                            "uuid": (userGr) ? userGr.x_nuta2_nutanix_ca_nutanix_uuid + '' : '',
                            "email": (userGr) ? userGr.email + '' : ''
                        };
                    }

                    if (acpConsumerRoleIndex) { //if consumer role is there in project

                        var users = (current.variables.assign_users + '').split(',');
                        for (var i in users) {
                            parsed.spec.access_control_policy_list[acpConsumerRoleIndex].acp.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });
                        }

                    } else { //pushes consumer role in project

                        var projectSubnet;
                        var project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                        project.addQuery('uuid', projectUUID + '');
                        project.setLimit(1);
                        project.query();
                        if (project.next()) {
                            projectSubnet = project.subnet + '';
                        }

                        var arr = [];

                        var gr = new GlideRecord('x_nuta2_nutanix_ca_subnet');
                        gr.addEncodedQuery('sys_idIN' + projectSubnet);
                        gr.query();
                        while (gr.next()) {
                            arr.push(gr.cluster_uuid + '');
                        }

                        var clusterEntitle = {
                            "left_hand_side": {
                                "entity_type": "cluster"
                            },
                            "operator": "IN",
                            "right_hand_side": {
                                "uuid_list": arr
                            }
                        };


                        var tmp = {
                            "acp": {
                                "name": "nuSnowAcp-" + projectUUID,
                                "resources": {
                                    "role_reference": {
                                        "name": "Consumer",
                                        "uuid": "49e8f061-0948-4705-953b-88915397bd60",
                                        "kind": "role"
                                    },
                                    "user_group_reference_list": [],
                                    "user_reference_list": [],
                                    "filter_list": {
                                        "context_list": [{
                                            "scope_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": "PROJECT",
                                                "right_hand_side": {
                                                    "uuid_list": [projectUUID + '']
                                                }
                                            }],
                                            "entity_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": {
                                                    "entity_type": "ALL"
                                                },
                                                "right_hand_side": {
                                                    "collection": "ALL"
                                                }
                                            }]
                                        }, {
                                            "entity_filter_expression_list": []
                                        }]
                                    }
                                },
                                "description": ""
                            },
                            "metadata": {
                                "kind": "access_control_policy"
                            },
                            "operation": "ADD"
                        };

                        var consumerFilter = JSON.parse(gs.getProperty('x_nuta2_nutanix_ca.consumer.entitlement.filter'));
                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list = consumerFilter["2.9"]; //gs.getProperty('x_nuta2_nutanix_ca.calm_version')];

                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list.push(clusterEntitle);

                        tmp.acp.resources.role_reference = {
                            "name": "Consumer",
                            "uuid": gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '',
                            "kind": "role"
                        };

                        tmp.acp.resources.user_reference_list = [];

                        var users = (current.variables.assign_users + '').split(',');
                        for (var i in users) {

                            tmp.acp.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.user_reference_list.push({
                                "name": (userArr[users[i] + '']) ? userArr[users[i] + ''].email + '' : '',
                                "kind": "user",
                                "uuid": (userArr[users[i] + '']) ? userArr[users[i] + ''].uuid + '' : ''
                            });
                        }
                        parsed.spec.access_control_policy_list.push(tmp);

                    }

                    var requestBody = {
                        "spec": parsed.spec,
                        "api_version": parsed.api_version,
                        "metadata": parsed.metadata
                    }

                    var response = this.appUtil.makeCalmApiCall("PUT", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, JSON.stringify(requestBody));

                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {

                        this.logger.info("Nutanix_ConfigureSettingScripts._updateUserOverCalm:- Users successfuly updated in calm.");
                        //this._updateSnowRole(current);
                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._updateUserOverCalm :- Error while updating users onto calm :- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }
                } else {
                    this.logger.error("Nutanix_ConfigureSettingScripts._updateUserOverCalm :- Connection to /projects_internal not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                }
            }


        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateUserOverCalm. Error:- " + e);
        }
    },

    getColumnFields: function (sys_id) {
        var column_name = {};
        var fields = new GlideRecord('sys_dictionary');
        fields.addQuery('name', 'item_option_new').addOrCondition('name', 'question');
        fields.query();
        while (fields.next()) {
            column_name[fields.element.toString()] = "";
        }
        var onLoadCatalogClientScript = new sn_sc.CatalogItemVariable(sys_id);
        var column_fields = onLoadCatalogClientScript.read(column_name, true);
        return column_fields;
    },
    ///changes
    _checkGroupUUID: function (current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._checkGroupsUUID.");
            var groupGr = new GlideRecord('sys_user_group');
            groupGr.addEncodedQuery('sys_idIN' + current.variables.assign_groups + '^x_nuta2_nutanix_ca_nutanix_group_uuidISEMPTY');
            groupGr.query();

            var taskUUIDList = [];

            while (groupGr.next()) {
                var groups = (current.variables.assign_groups.getDisplayValue() + '').split(',');

                var distinguishedName = groupGr.source.replace(/ldap:/g, ""); //"CN="+groups[i]+",CN=Users,DC=calsoftcalm,DC=com";

                var body = {
                    "api_version": "3.0",
                    "metadata": {
                        "kind": "user_group"
                    },
                    "spec": {
                        "resources": {
                            "directory_service_user_group": {
                                "distinguished_name": distinguishedName
                            }
                        }
                    }
                };
                this.logger.debug("Body send for group :: " + JSON.stringify(body));
                var response = this.appUtil.makeCalmApiCall("POST", "/user_groups", JSON.stringify(body));
                var res = JSON.parse(response.getBody());
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {

                    groupGr.x_nuta2_nutanix_ca_nutanix_group_uuid = JSON.parse(response.getBody()).metadata.uuid + '';
                    groupGr.update();

                    taskUUIDList.push(JSON.parse(response.getBody()).status.execution_context.task_uuid + '');

                } else if (response.getStatusCode() == '400' &amp;&amp; res.message_list[0].reason == "DUPLICATE_ENTITY") {

                    var payload = {
                        "kind": "user_group",
                        "filter": "group_name==" + groupGr.name + ''
                    };


                    var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.getGroupsList + "", this.appUtil.stringify(payload));

                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {

                        var parsedJSON = this.appUtil.parse(response.getBody());
                        var entities = parsedJSON.entities;
                        var entity = entities[0];
                        var uuid = entity.metadata.uuid + '';
                        groupGr.x_nuta2_nutanix_ca_nutanix_group_uuid = uuid;
                        groupGr.update();

                    } else {

                        this.logger.debug("Nutanix_ImportUsers.importUsers:- Connection users/list not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                    }
                    ///
                } else {
                    this.logger.error("Nutanix_ConfigureSettingScripts._checkGroupsUUID :- Error while creating group entity in calm:- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                }
                //}
                //} 

                //} 
            }

            var taskComplete = true;
            var i = 0;
            do {
                if (i &gt;= taskUUIDList.length) {
                    i = 0;
                    taskComplete = true;
                }

                var response = this.appUtil.makeCalmApiCall("GET", "/tasks/" + taskUUIDList[i], '');
                var parsedTask = JSON.parse(response.getBody());
                if (parsedTask.status + '' == 'QUEUED' || parsedTask.status + '' == 'RUNNING') {
                    taskComplete = false;
                    i++;
                } else {
                    taskUUIDList.splice(i, 1);
                }

                if (taskUUIDList.length &lt; 1)
                    break;

            } while (taskComplete == false);

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._checkGroupUUID. Error:- " + e);
        }
    },


    _updateGroupOverCalm: function (current) {
        try {

            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateGroupOverCalm.");

            if (!current.variables.assign_groups)
                return;

            this._checkGroupUUID(current); //this create ldap group in calm and updates ldap group uuid in SNOW if group uuid is not present in calm.
            var projects = current.variables.multiple_project.toString();
            var project_array = projects.split(',');
            for (var k = 0; k &lt; project_array.length; k++) {
                this.logger.debug('RV: Inside Nutanix_ConfigureSettingScripts._updateGroupOverCalm. projects sys_id' + project_array[k]);
                var projectGR = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                if (projectGR.get(project_array[k])) {
                    var projectUUID = projectGR.uuid;
                    var response = this.appUtil.makeCalmApiCall("GET", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, '');
                }
                if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
                    var parsed = this.appUtil.parse(response.getBody());
                    var acpRoles = parsed.spec.access_control_policy_list;
                    var acpConsumerRoleIndex = '';

                    for (var i in acpRoles) {
                        if (acpRoles[i].acp.resources.role_reference.uuid + '' == gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '') {
                            acpConsumerRoleIndex = i;
                        }
                        parsed.spec.access_control_policy_list[i].operation = "UPDATE";
                    }

                    var groupGr = new GlideRecord('sys_user_group');
                    groupGr.addEncodedQuery('sys_idIN' + current.variables.assign_groups);
                    groupGr.query();

                    var groupArr = {};

                    while (groupGr.next()) {
                        groupArr[groupGr.sys_id + ''] = {
                            "uuid": (groupGr) ? groupGr.x_nuta2_nutanix_ca_nutanix_group_uuid + '' : '',
                            "name": (groupGr) ? groupGr.name + '' : ''
                        };
                    }
                    if (acpConsumerRoleIndex) { //if consumer role is there in project

                        var groups = (current.variables.assign_groups + '').split(',');
                        for (var i in groups) {
                            parsed.spec.access_control_policy_list[acpConsumerRoleIndex].acp.resources.user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.external_user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });
                        }


                    } else { //pushes consumer role in project

                        //var tmp = {"acp":{"name":"nuSnowAcp-"+current.variables.project,"resources":{"role_reference":{"name":"Consumer","uuid":"49e8f061-0948-4705-953b-88915397bd60","kind":"role"},"user_group_reference_list":[],"user_reference_list":[],"filter_list":{"context_list":[{"scope_filter_expression_list":[{"operator":"IN","left_hand_side":"PROJECT","right_hand_side":{"uuid_list":[current.variables.project+'']}}],"entity_filter_expression_list":[{"operator":"IN","left_hand_side":{"entity_type":"ALL"},"right_hand_side":{"collection":"ALL"}}]},{"entity_filter_expression_list":[]}]}},"description":"untitledAcp-e3c568f8-e11b-71e3-a916-493940647e79"},"metadata":{"kind":"access_control_policy"},"operation":"ADD"};

                        var projectSubnet;
                        var project = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                        project.addQuery('uuid', projectUUID + '');
                        project.setLimit(1);
                        project.query();
                        if (project.next()) {
                            projectSubnet = project.subnet + '';
                        }

                        var arr = [];

                        var gr = new GlideRecord('x_nuta2_nutanix_ca_subnet');
                        gr.addEncodedQuery('sys_idIN' + projectSubnet);
                        gr.query();
                        while (gr.next()) {
                            arr.push(gr.cluster_uuid + '');
                        }

                        var clusterEntitle = {
                            "left_hand_side": {
                                "entity_type": "cluster"
                            },
                            "operator": "IN",
                            "right_hand_side": {
                                "uuid_list": arr
                            }
                        };


                        var tmp = {
                            "acp": {
                                "name": "nuSnowAcp-" + current.variables.project,
                                "resources": {
                                    "role_reference": {
                                        "name": "Consumer",
                                        "uuid": "49e8f061-0948-4705-953b-88915397bd60",
                                        "kind": "role"
                                    },
                                    "user_group_reference_list": [],
                                    "user_reference_list": [],
                                    "filter_list": {
                                        "context_list": [{
                                            "scope_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": "PROJECT",
                                                "right_hand_side": {
                                                    "uuid_list": [current.variables.project + '']
                                                }
                                            }],
                                            "entity_filter_expression_list": [{
                                                "operator": "IN",
                                                "left_hand_side": {
                                                    "entity_type": "ALL"
                                                },
                                                "right_hand_side": {
                                                    "collection": "ALL"
                                                }
                                            }]
                                        }, {
                                            "entity_filter_expression_list": []
                                        }]
                                    }
                                },
                                "description": ""
                            },
                            "metadata": {
                                "kind": "access_control_policy"
                            },
                            "operation": "ADD"
                        };

                        var consumerFilter = JSON.parse(gs.getProperty('x_nuta2_nutanix_ca.consumer.entitlement.filter'));
                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list = consumerFilter["2.9"]; //gs.getProperty('x_nuta2_nutanix_ca.calm_version')];

                        tmp.acp.resources.filter_list.context_list[1].entity_filter_expression_list.push(clusterEntitle);



                        tmp.acp.resources.role_reference = {
                            "name": "Consumer",
                            "uuid": gs.getProperty('x_nuta2_nutanix_ca.cosumer.role.uuid') + '',
                            "kind": "role"
                        };

                        tmp.acp.resources.user_group_reference_list = [];

                        var groups = (current.variables.assign_groups + '').split(',');
                        for (var i in groups) {

                            tmp.acp.resources.user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });

                            parsed.spec.project_detail.resources.external_user_group_reference_list.push({
                                "name": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].name + '' : '',
                                "kind": "user_group",
                                "uuid": (groupArr[groups[i] + '']) ? groupArr[groups[i] + ''].uuid + '' : ''
                            });
                        }
                        parsed.spec.access_control_policy_list.push(tmp);
                    }

                    var requestBody = {
                        "spec": parsed.spec,
                        "api_version": parsed.api_version,
                        "metadata": parsed.metadata
                    }

                    var response = this.appUtil.makeCalmApiCall("PUT", this.appUtil.configuration.api.projectInternal + "/" + projectUUID, JSON.stringify(requestBody));


                    if (response.getStatusCode() == '200' || response.getStatusCode() == '201' || response.getStatusCode() == '202') {
                        this.logger.info("Nutanix_ConfigureSettingScripts._updateGroupOverCalm:- Groups successfuly updated in calm.");
                        //this._updateGroupSnowRole(current);
                    } else {
                        this.logger.error("Nutanix_ConfigureSettingScripts._updateGroupOverCalm :- Error while updating groups onto calm :- " + response.haveError() + " Status code :- " + response.getStatusCode() + " Error :: " + response.getBody());
                    }
                } else {
                    this.logger.error("Nutanix_ConfigureSettingScripts._updateGroupOverCalm :- Connection to /projects_internal not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
                }
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateGroupOverCalm. Error:- " + e);
        }
    },
    ////changes over

    _updateCatalogItem: function (source, target, bpSys_id, current) {

        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._updateCatalogItem.");
            var catItemSysId = current.variables.cat_item + '';

            var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
            var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.

            var ans = [];

            var assignCriteria = new GlideRecord(this.appUtil.configuration.table.catalogUserCriteria + '');
            assignCriteria.addQuery('sc_cat_item', catItemSysId);
            assignCriteria.query();

            this.logger.info("Updated user &amp; group entitlement to " + current.variables.assign_users + " :: " + current.variables.assign_groups);

            if (assignCriteria.next()) {
                var uc = new sn_uc.UserCriteria(assignCriteria.user_criteria);
                uc.setUsers(current.variables.assign_users);
                if (status + "" == "false") {
                    uc.setGroups(current.variables.assign_groups);
                } else {
                    uc.setGroups(current.variables.assign_local_groups);
                }
                ans.push(catItemSysId);
                ans.push(criteriaSysId);
            }

            return ans;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._updateCatalogItem. Error:- " + e);
        }
    },

    updateVariableTable: function (fieldSysId, column_fields, oper) {
        try {
            var new_fieldSysId = '';
            column_fields.sys_scope = '3b7631654f452b001200e5201310c76b';
            if (oper == 'insert') {
                var onLoadCatalogClientScript2 = new sn_sc.CatalogItemVariable();
                onLoadCatalogClientScript2.setAttributes(column_fields);
                new_fieldSysId = onLoadCatalogClientScript2.create();
            } else if (oper == 'update') {
                var onLoadCatalogClientScript = new sn_sc.CatalogItemVariable(fieldSysId);
                onLoadCatalogClientScript.update(column_fields, true);
                new_fieldSysId = fieldSysId;
            }
            return new_fieldSysId;
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.updateVariableTable. Error:- " + e);
        }
    },

    _copyCatalogItem: function (source, target, bpSys_id, current, blueprintType, clientData, nonFilteredClientData) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts._copyCatalogItem. source " + source + "\n target " + target + "\n bpSys_id " + bpSys_id + " blueprintType " + blueprintType + " clientData " + clientData + " nonFilteredClientData " + nonFilteredClientData + '\n current ' + JSON.stringify(current));

            var sourceGR = new GlideRecord(source);
            sourceGR.addQuery('sys_id', bpSys_id);
            sourceGR.query();

            var ans = [];
            var nicSysIdList = [];
            var SnapshotList = [];

            if (sourceGR.next()) {

                var profileSysID = '';
                var appSysID = '';
                var targetGr = sourceGR;
                var projectSysID = '';
                var environmentSysId = '';

                targetGr.sys_name = current.variables.item_name + '';
                targetGr.name = current.variables.item_name + '';
                targetGr.short_description = current.variables.item_name + '';
                targetGr.description_markdown = current.variables.description + '';
                targetGr.description = this.appUtil.markdown_renderer(current.variables.description + '');
                targetGr.active = true;
                targetGr.blueprint_name = bpSys_id + '';
                targetGr.sys_class_name = target + '';
                targetGr.state = "published";
                if (blueprintType == "published") {

                    var parsedClientData = JSON.parse(clientData);

                    targetGr.cloned_bp_json = nonFilteredClientData;
                    targetGr.cloned_bp_uuid = (parsedClientData.uuid + '') ? parsedClientData.uuid + '' : "";
                    targetGr.cloned_bp_name = (parsedClientData.name + '') ? parsedClientData.name + '' : "";
                }

                var catItemSysId = targetGr.insert();

                var imageBase64Str = gs.getProperty('x_nuta2_nutanix_ca.default.image');

                var gr = new GlideRecord('sys_attachment');
                gr.addQuery('table_sys_id', current.sys_id); //tablesys_id of the record
                gr.query();
                if (gr.next()) {
                    var kk = new GlideSysAttachment();
                    imageBase64Str = kk.getContentBase64(gr);
                }

                var attachGR = new GlideSysAttachment();
                attachGR.writeBase64(targetGr, 'picture', 'image/png', imageBase64Str);

                attachGR = new GlideSysAttachment();
                attachGR.writeBase64(targetGr, 'icon', 'image/png', gs.getProperty('x_nuta2_nutanix_ca.default.icons'));




                this.logger.debug("Created catalog item with sysId " + catItemSysId);
                this.logger.info("Catalog item " + current.variables.item_name + " creating.");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + bpSys_id);
                fieldGR.query();

                while (fieldGR.next()) {
                    var oldSysId = fieldGR.sys_id + '';
                    var column_fields = {};
                    column_fields = this.getColumnFields(oldSysId);
                    column_fields.cat_item = catItemSysId + '';
					if((fieldGR.name+'').indexOf('_nic_')!=-1){
						// CALM-36178 - Subnet filtering
						column_fields.reference_qual = 'javascript: new x_nuta2_nutanix_ca.Nutanix_FetchConfigureSettingDropdown().getSubnetRefQual(current.variables.default_environment);';
						column_fields.attributes = 'ref_qual_elements=default_environment';
					}
                    var fieldSysId = this.updateVariableTable('', column_fields, 'insert');
                    if (fieldGR.type + '' == 5) {
                        var glideRec = new GlideRecord('question_choice');
                        glideRec.addQuery('question', oldSysId + '');
                        glideRec.query();
                        while (glideRec.next()) {
                            glideRec.question = fieldSysId;
                            var x = glideRec.insert();

                        }
                    }
                    // Multiple value insert code
                    if (fieldGR.type + '' == 21) {

                        var grOptions = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
                        grOptions.addQuery("variable", oldSysId + "");
                        grOptions.query();
                        var grNewOptions = new GlideRecord("x_nuta2_nutanix_ca_generic_table_for_dropdown");
                        while (grOptions.next()) {
                            grNewOptions.initialize();
                            grNewOptions.variable = fieldSysId + "";
                            grNewOptions.name = grOptions.name + "";
                            grNewOptions.value = grOptions.value + "";
                            grNewOptions.insert();
                        }
                        var column_fields = {};
                        column_fields.reference_qual = "variable=" + fieldSysId;
                        var fieldSysId = this.updateVariableTable(fieldSysId, column_fields, 'update');
                    }

                    /**Advance variable Select box choices**/
                    if (fieldGR.name + '' == 'default_project')
                        projectSysID = fieldSysId;

                    if (fieldGR.name + '' == 'default_profile')
                        profileSysID = fieldSysId;

                    if (fieldGR.name + '' == 'default_app_name')
                        appSysID = fieldSysId;

                    if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                        if (fieldGR.name + '' == 'default_environment')
                            environmentSysId = fieldSysId;
                    }


                    if ((fieldGR.name + '').indexOf('_nic_') != -1) {
                        nicSysIdList.push(fieldSysId + '');
                    }

                    if ((fieldGR.name + '').indexOf('_snapshot_policy') != -1) {
                        SnapshotList.push({ "sys_id": fieldSysId + '', "name": fieldGR.name + '' });
                    }
                }


                /*var insVar = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+''); //Inserts variable to check sync or delete
                insVar.addQuery('cat_item', catItemSysId);
                insVar.query();
                if(insVar.next()) {
                    insVar.initialize();
                    insVar.type = 6;
                    insVar.cat_item = catItemSysId+'';
                    insVar.active = true;
                    insVar.question_text = 'sync_flag';
                    insVar.name = 'sync_flag';
                    insVar.mandatory = 'false';
                    insVar.order = 0;
                    insVar.insert();
                }*/

                //Hide containers on order page
                var hideGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                hideGR.addQuery('cat_item', catItemSysId);
                hideGR.addQuery('active', true);
                hideGR.orderBy('order');
                var previousGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                previousGR.addQuery('cat_item', catItemSysId);
                previousGR.addQuery('active', true);
                previousGR.orderBy('order');
                hideGR.query();
                previousGR.query();
                while (hideGR.next()) {
                    if (hideGR.type == 20 &amp;&amp; previousGR.type == 19) {
                        var column_fields = {
                            "active": "false"
                        };
                        var fieldSysId = this.updateVariableTable(previousGR.sys_id, column_fields, 'update');
                        var fieldSysId = this.updateVariableTable(hideGR.sys_id, column_fields, 'update');
                    }
                    previousGR.next();
                }


                var lg = new x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge();
                var status = lg.hideAccessLocalGroupOption(); //to check if the given option is for local groups.
                // 				var user_criteria = new GlideRecord(this.appUtil.configuration.table.userCriteria+'');
                // 				user_criteria.initialize();
                // 				user_criteria.name = "Nutanix_"+current.variables.item_name+"_Entitlement";
                // 				user_criteria.user = current.variables.assign_users;
                // 				if(status+"" == "false")
                // 					{
                // 						user_criteria.group = current.variables.assign_groups;
                // 					}
                // 				else
                // 					{
                // 						user_criteria.group = current.variables.assign_local_groups;
                // 					}				
                // 				user_criteria.role = gs.getProperty('x_nuta2_nutanix_ca.admin.role.sysId');
                // 				user_criteria.active = true;
                // 				user_criteria.advanced = true;
                // 				user_criteria.match_all = false;
                // 				user_criteria.script = "answer = false;";
                // 				var criteriaSysId = user_criteria.insert(); 
                // 				gs.info('user_criteria.group '+user_criteria.group);


                var user_criteria = new sn_uc.UserCriteria();
                user_criteria.setName("Nutanix_" + current.variables.item_name + "_Entitlement");
                user_criteria.setUsers(current.variables.assign_users);
                var group = '';
                if (status + "" == "false") {
                    group = current.variables.assign_groups;
                } else {
                    group = current.variables.assign_local_groups;
                }
                user_criteria.setGroups(group);
                user_criteria.setRoles(gs.getProperty('x_nuta2_nutanix_ca.admin.role.sysId'));
                user_criteria.setActive(true);
                user_criteria.setAdvanced(true);
                user_criteria.setMatchAll(false);
                user_criteria.setScript("answer = false;");
                var criteriaSysId = user_criteria.create();



                /*				var assignCriteria = new GlideRecord(this.appUtil.configuration.table.catalogUserCriteria+'');
                                assignCriteria.initialize();
                                assignCriteria.sc_cat_item = catItemSysId+'';
                                assignCriteria.user_criteria = criteriaSysId+'';
                                assignCriteria.insert();*/

                var assignCriteria = new sn_sc.CatItem(catItemSysId);
                assignCriteria.availableForUserCriteria("add", [criteriaSysId]);

                ans.push(catItemSysId);
                ans.push(criteriaSysId);

                /*var onLoadclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
                onLoadclientScript.initialize();
                onLoadclientScript.name = "Get sync status on load";
                onLoadclientScript.type = "onLoad";
                onLoadclientScript.applies_to = "item";
                onLoadclientScript.cat_item = catItemSysId;
                onLoadclientScript.active = true;
                onLoadclientScript.order=100;
                //onLoadclientScript.sys_policy=this.protected_var;

                onLoadclientScript.description = 'This script is auto created thorugh runtime module for saving sync status.';

                onLoadclientScript.applies_catalog = true;
                onLoadclientScript.ui_type = "0";
                onLoadclientScript.applies_req_item = false;
                onLoadclientScript.applies_sc_task = false;
                onLoadclientScript.script = "function onLoad() { g_form.setValue('sync_flag', ''); var a=new GlideAjax('Nutanix_ClientServerScriptBridge');a.addParam('sysparm_name','checkQueue');a.getXML(responseParse);} function responseParse(response) {var b=response.responseXML.documentElement.getAttribute('answer');g_form.setValue('sync_flag', b);}";
                onLoadclientScript.insert();

                this.logger.debug("Created onLoad get sync value script on catalog item "+current.variables.item_name);

                var onSubmitclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
                onSubmitclientScript.initialize();
                onSubmitclientScript.name = "Prevent form submit";
                onSubmitclientScript.type = "onSubmit";
                onSubmitclientScript.applies_to = "item";
                onSubmitclientScript.cat_item = catItemSysId;
                onSubmitclientScript.active = true;
                onSubmitclientScript.order=100;
                //onLoadclientScript.sys_policy=this.protected_var;

                onSubmitclientScript.description = 'This script is auto created thorugh runtime module for preventing submission of form during a sync or delete.';

                onSubmitclientScript.applies_catalog = true;
                onSubmitclientScript.ui_type = "0";
                onSubmitclientScript.applies_req_item = false;
                onSubmitclientScript.applies_sc_task = false;
                onSubmitclientScript.script = "function onSubmit() { var sync_stat = g_form.getValue('sync_flag'); if(sync_stat == 'true'){return true;}else{return false;} }";
                onSubmitclientScript.insert();

                this.logger.debug("Created onSubmit validation script on catalog item "+current.variables.item_name);*/


                if (current.variables.type_of_blueprint == 'runbook' || current.variables.type_of_blueprint == 'published_runbook') {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Project and Endpoint List onLoad",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "active": "true",
                        "order": "100",
                        "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                        "applies_catalog": "true",
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });

                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchMultipleProjectAndEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions(\'default_project\'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption(\'default_project\', project.uuid, project.name); } if (projectList.length == 1) { g_form.setReadOnly(\'default_project\', true); } var endpointList = parsed.endpointList; } var ga1 = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga1.addParam(\'sysparm_name\', \'advanceVariableDynamicOptions\'); ga1.addParam(\'sysparm_catSysID\', cat_sys_id); ga1.getXML(parseResponseAdvanceVariable); function parseResponseAdvanceVariable(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage[\'FieldRegex_\' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + \'\']; if (row.options.state == \'SUCCESS\') { g_form.clearOptions(keys[i] + \'\'); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + \'\', row.options.values[k], row.options.values[k]); } } else { g_form.addErrorMessage(\'Error in variable: \' + keys[i] + \': \' + row.options.values[0]); } } reg.switchStatusToStandBy(); } var ga2 = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga2.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga2.addParam(\'sysparm_profile\', \'runbook\'); ga2.addParam(\'sysparm_catSysID\', cat_sys_id); ga2.getXML(parseResponseOrderFormData); function parseResponseOrderFormData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); reg.switchStatusToStandBy(); } }";
                    onLoadCatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onLoadScript].join('\n'));
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }

                }
				var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Catalog Configs",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "active": "true",
                        "order": "1",
                        "description": "This script is auto created thorugh runtime module for getting the value of 'enableOnSubmitCheck'system property ",
                        "applies_catalog": "true",
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });

                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { try { var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'isOnSubmitCheckEnabled\'); ga.getXMLAnswer(function(isEnabled) { sessionStorage[\'x_nuta2_nutanix_ca.catalogs.enableOnSubmitCheck\'] = isEnabled; }); } catch (err) { console.error(err); } }";
                    onLoadCatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), onLoadScript].join('\n'));
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }


                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": false,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var projectUUID = getParameterValue('projectUUID') + ''; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName); } 				 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 				 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
                onLoadCatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onLoadScript].join('\n'));
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onLoadCatalogClientScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue("sys_policy", this.protected_var);
                    grChange.update();

                }

                // Blueprints and MPI blueprins
				//CALM-43616_ Client Script Optimization
                if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Project and Profile List onLoad",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "active": "true",
                        "order": "100",
                        "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                        "applies_catalog": "true",
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "";
                    if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                        onLoadScript = "function onLoad() { try { var portal_check; getPortalCheck(getParameterValue(\'portal_check\')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { portal_check = response; } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProjectAndProfileList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions(\'default_project\'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption(\'default_project\', project.uuid, project.name); } if (portal_check == \'true\') { project = projectList[0]; g_form.setValue(\'default_project\', project.uuid); } if (projectList.length == 1) { g_form.setReadOnly(\'default_project\', true); } if (portal_check == \'false\') new GlideModal().get(\'loader\').destroy(); reg.switchStatusToStandBy(); } } catch (e) { console.log(\'Exception in Get project and profile list onload \' + e.message); reg.switchStatusToStandBy(); } }";
                    } else {
                        onLoadScript = "function onLoad() { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if(portal_check =='false') { var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent('' + loadingHTML); } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); if(portal_check == 'false') ga.getXML(parseResponse, null, loadingDialog); else ga.getXML(parseResponse); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]); if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (profileList.length == 1) { g_form.setReadOnly('default_profile', true); } new GlideModal().get('loader').destroy(); var loadingHTML = \"&lt;div class='loading-container'&gt;&lt;div class='loading-indicator icon-loading icon-lg'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent('' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse, null, loadingDialog); } function parseResponseForPortal(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i &lt; projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i &lt; profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]); if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (profileList.length == 1) { g_form.setReadOnly('default_profile', true); } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponseForPortal); } function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json); } function varResponseForPortal(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } } } } }";
                    }
                    onLoadCatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onLoadScript].join('\n'));
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }

                    //			this.logger.debug("Created onLoad script to get project and profile list on catalog item "+current.variables.item_name);
                }

                // Blueprints and MPI blueprins
				//CALM-43616_ Client Script Optimization
                if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Snapshot policy",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "active": "true",
                        "order": "200",
                        "cat_variable": "IO:" + profileSysID,
                        "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                        "applies_catalog": "true",
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { reg.switchStatusToStandBy(); return; } var portal_check; getPortalCheck(getParameterValue(\'portal_check\')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'snapshot_loader\', true); loadingDialog.setTitle(\'Checking Blueprint Status...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var envUUID = (g_form.getValue(\'default_environment\') + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchSnapshotPolicy\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_envSysId\', envUUID); ga.getXML(varResponse); function varResponse(response) { reg.switchStatusToStandBy(); var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); console.log(\"Snapshot List: \" + JSON.stringify(parsed)); var SnapList = []; for (var j = 0; j &lt; parsed.length; j++) { var Snapshot_name = parsed[j].name + \'\'; if (portal_check == \'false\') g_form.setDisplay(Snapshot_name + \'_snapshot_policy\', true); else g_form.setVisible(Snapshot_name + \'_snapshot_policy\', true); g_form.setReadOnly(Snapshot_name + \'_snapshot_policy\', false); SnapList.push(Snapshot_name); var SnapshotList = parsed[j].list.entities; sessionStorage[Snapshot_name + \'_snapshot_policy\'] = JSON.stringify(SnapshotList); sessionStorage[\'snapshot_policy\'] = JSON.stringify(SnapList); for (var i = 0; i &lt; SnapshotList.length; i++) { if (SnapshotList[i].status.resources.is_default + \'\' == \'true\') { g_form.addOption(Snapshot_name + \'_snapshot_policy\', SnapshotList[i].status.uuid + \'\', SnapshotList[i].status.name + \'\'); } } for (var i = 0; i &lt; SnapshotList.length; i++) { if (SnapshotList[i].status.resources.is_default + \'\' != \'true\') g_form.addOption(Snapshot_name + \'_snapshot_policy\', SnapshotList[i].status.uuid + \'\', SnapshotList[i].status.name + \'\'); } } if (portal_check == \'false\') { new GlideModal().get(\'snapshot_loader\').destroy(); } } } }";
                    onLoadCatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onLoadScript].join('\n'));
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }

                }

                // Blueprints and MPI blueprins
                for (var y = 0; y &lt; SnapshotList.length; y++) {
                    if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {
                        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                        onLoadCatalogClientScript.setAttributes({
                            "name": "Get Local rule on change of policy : " + y,
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": '' + catItemSysId,
                            "active": "true",
                            "order": "300",
                            "cat_variable": "IO:" + SnapshotList[y].sys_id,
                            "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                            "applies_catalog": "true",
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        onLoadCatalogClientScript.appliesToCatalogItem(true);
                        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { reg.switchStatusToStandBy(); return; } try { var policy_list = sessionStorage[\'snapshot_policy\']; var var_name = \'\" + SnapshotList[y].name + \"\'; var list = JSON.parse(policy_list); for (var i = 0; i &lt; list.length; i++) { if (var_name + \'\' == list[i] + \'_snapshot_policy\') { var local_rule = sessionStorage[list[i] + \'_snapshot_policy\']; var a = JSON.parse(local_rule); g_form.setDisplay(list[i] + \'_snapshot_local_rule\', \'true\'); g_form.setReadOnly(list[i] + \'_snapshot_local_rule\', \'false\'); for (var j = 0; j &lt; a.length; j++) { if (a[j].status.uuid + \'\' == newValue + \'\') { var val = a[j].status.resources.app_protection_rule_list[0].local_snapshot_retention_policy.snapshot_expiry_policy.multiple + \'\'; var local_rule_uuid = a[j].status.resources.app_protection_rule_list[0].uuid + \'\'; if (val + \'\' == \'0\') { g_form.clearOptions(list[i] + \'_snapshot_local_rule\'); g_form.addOption(list[i] + \'_snapshot_local_rule\', local_rule_uuid, \'Snapshots have no expiry\'); } else { g_form.clearOptions(list[i] + \'_snapshot_local_rule\'); g_form.addOption(list[i] + \'_snapshot_local_rule\', local_rule_uuid, \'Snapshots expire in \' + val + \' days\'); } } } } } reg.switchStatusToStandBy(); } catch (e) { reg.switchStatusToStandBy(); console.log(\'Error inside Local rule on change of policy \' + e.message); } }";
                        onLoadCatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onLoadScript].join('\n'));
                        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(onLoadCatalogClientScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue("sys_policy", this.protected_var);
                            grChange.update();

                        }

                        //			this.logger.debug("Created onLoad script to get project and profile list on catalog item "+current.variables.item_name);
                    }
                }

                //all
				//CALM-43616_ Client Script Optimization
                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Credentials OnLoad",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": true,
                    "order": 900,
                    "description": "This script is auto created thorugh runtime module for getting Credentials list.",
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { try { var portal_check; getPortalCheck(getParameterValue(\'portal_check\')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching Credentials List...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchCredentialsList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + \'\').toLowerCase().replace(\/ \/g, \'_\'); g_form.setValue(name + \'_credential_name\', credential.name + \'\'); g_form.setReadOnly(name + \'_credential_name\', true); g_form.setValue(name + \'_secret_type\', credential.type + \'\', (credential.type + \'\' == \'KEY\') ? \'SSH Private Key\' : \'Password\'); g_form.setReadOnly(name + \'_secret_type\', true); g_form.setValue(name + \'_username\', credential.username.value); g_form.setReadOnly(name + \'_username\', credential.username.readOnly); g_form.setDisplay(name + \'_username\', !credential.username.readOnly); if ((credential.type == \'KEY\')) { g_form.setValue(name + \'_ssh_private_key\', credential.ssh_private_key.value); g_form.setReadOnly(name + \'_ssh_private_key\', credential.ssh_private_key.readOnly); g_form.setValue(name + \'_passphrase\', credential.passphrase.value); g_form.setReadOnly(name + \'_passphrase\', credential.passphrase.readOnly); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_ssh_private_key\', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + \'_passphrase\', !credential.passphrase.readOnly); } else { g_form.setValue(name + \'_password\', \'\'); credArr[name + \'_password\'] = credential.password.value; g_form.setReadOnly(name + \'_password\', credential.password.readOnly); g_form.setDisplay(name + \'_password\', !credential.password.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); } g_form.setDisplay(name + \'_credential_reference\', \'false\'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + \'_credential_reference\', \'true\'); g_form.addOption(name + \'_credential_reference\', credential.credential_reference.uuid + \'\', credential.credential_reference.name + \'\'); g_form.setReadOnly(name + \'_credential_reference\', credential.credential_reference.readOnly); g_form.setDisplay(name + \'_credential_reference\', !credential.credential_reference.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_secret_type\', \'false\'); } } sessionStorage[\'credentials_\' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get(\'loader\').destroy(); } } else { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchCredentialsList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + \'\').toLowerCase().replace(\/ \/g, \'_\'); g_form.setValue(name + \'_credential_name\', credential.name + \'\'); g_form.setReadOnly(name + \'_credential_name\', true); g_form.setValue(name + \'_secret_type\', credential.type + \'\', (credential.type + \'\' == \'KEY\') ? \'SSH Private Key\' : \'Password\'); g_form.setReadOnly(name + \'_secret_type\', true); g_form.setValue(name + \'_username\', credential.username.value); g_form.setReadOnly(name + \'_username\', credential.username.readOnly); g_form.setDisplay(name + \'_username\', !credential.username.readOnly); if ((credential.type == \'KEY\')) { g_form.setValue(name + \'_ssh_private_key\', credential.ssh_private_key.value); g_form.setReadOnly(name + \'_ssh_private_key\', credential.ssh_private_key.readOnly); g_form.setValue(name + \'_passphrase\', credential.passphrase.value); g_form.setReadOnly(name + \'_passphrase\', credential.passphrase.readOnly); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_ssh_private_key\', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + \'_passphrase\', !credential.passphrase.readOnly); } else { g_form.setValue(name + \'_password\', \'\'); credArr[name + \'_password\'] = credential.password.value; g_form.setReadOnly(name + \'_password\', credential.password.readOnly); g_form.setDisplay(name + \'_password\', !credential.password.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); } g_form.setDisplay(name + \'_credential_reference\', \'false\'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + \'_credential_reference\', \'true\'); g_form.addOption(name + \'_credential_reference\', credential.credential_reference.uuid + \'\', credential.credential_reference.name + \'\'); g_form.setReadOnly(name + \'_credential_reference\', credential.credential_reference.readOnly); g_form.setDisplay(name + \'_credential_reference\', !credential.credential_reference.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_secret_type\', \'false\'); } } sessionStorage[\'credentials_\' + g_form.getUniqueValue()] = JSON.stringify(credArr); reg.switchStatusToStandBy(); } } } } catch (e) { console.log(\'Exception Inside Get Credentials OnLoad \' + e.message); reg.switchStatusToStandBy(); } }";
                onLoadCatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onLoadScript].join('\n'));
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onLoadCatalogClientScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue("sys_policy", this.protected_var);
                    grChange.update();

                }
                //			this.logger.debug("Created onLoad script to get credentials data on catalog item "+current.variables.item_name);	

                /* Fetching Dynamic values for advance variable*/


                //All
				//CALM-43616_ Client Script Optimization
                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Fetch dynamic value for advance variables onload",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": true,
                    "order": 10,
                    "description": "This script is created for fetching dynamic values for advance variables onload.",
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var portal_check; getPortalCheck(getParameterValue(\'portal_check\')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching Dynamic values for advance variables...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'advanceVariableDynamicOptions\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage[\'FieldRegex_\' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + \'\']; if (row.options.state == \'SUCCESS\') { g_form.clearOptions(keys[i] + \'\'); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + \'\', row.options.values[k], row.options.values[k]); } } else { g_form.addErrorMessage(\'Error in variable: \' + keys[i] + \': \' + row.options.values[0]); } } new GlideModal().get(\'loader\').destroy(); } } else { var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'advanceVariableDynamicOptions\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage[\'FieldRegex_\' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + \'\']; if (row.options.state == \'SUCCESS\') { g_form.clearOptions(keys[i] + \'\'); for (var k = 0; k &lt; (row.options.values).length; k++) { g_form.addOption(keys[i] + \'\', row.options.values[k], row.options.values[k]); } } else { g_form.showFieldMsg(keys[i], \'Error in variable: \' + keys[i] + \': \' + row.options.values[0], \'error\'); } } reg.switchStatusToStandBy(); } } } }";
                onLoadCatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onLoadScript].join('\n'));
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onLoadCatalogClientScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue("sys_policy", this.protected_var);
                    grChange.update();

                }

                /* Fetching Dynamic values for advance variable*/

                // Blueprints and MPI blueprins
                if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {

                    var catalogScriptGR = new sn_sc.CatalogClientScript();
                    catalogScriptGR.setAttributes({
                        "name": "Fetch form data on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": "" + catItemSysId,
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 100,
                        "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    catalogScriptGR.appliesToCatalogItem(true);
                    var script = '';
                    if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
						//FEAT-15844-Client script Modifications - Passing envuuid to filterout Subnet not related to Environment.
                        script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { reg.switchStatusToStandBy(); return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { if (newValue == \'\') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].prettyName != \'default_app_name\') { g_form.setMandatory(flds[i].prettyName, false); } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', false); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); g_form.setMandatory(\'default_profile\', true); g_form.setDisplay(\'default_environment\', true); g_form.setReadOnly(\'default_environment\', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var envuuid = g_form.getValue(\'default_environment\'); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.addParam(\'sysparm_envsysid\', envuuid); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get(\'loader\').destroy(); var cat_sys_id = g_form.getUniqueValue(); var envUUID = (g_form.getValue(\'default_environment\') + \'\').trim(); var projectUUID = (g_form.getValue(\'default_project\') + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchCredentialsList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.addParam(\'sysparm_project\', projectUUID); ga.addParam(\'sysparm_env\', envUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + \'\').toLowerCase().replace(\/ \/g, \'_\'); g_form.setValue(name + \'_credential_name\', credential.name + \'\'); g_form.setReadOnly(name + \'_credential_name\', true); g_form.setValue(name + \'_secret_type\', credential.type + \'\', (credential.type + \'\' == \'KEY\') ? \'SSH Private Key\' : \'Password\'); g_form.setReadOnly(name + \'_secret_type\', true); g_form.setValue(name + \'_username\', credential.username.value); g_form.setReadOnly(name + \'_username\', credential.username.readOnly); g_form.setDisplay(name + \'_username\', !credential.username.readOnly); if ((credential.type == \'KEY\')) { g_form.setValue(name + \'_ssh_private_key\', credential.ssh_private_key.value); g_form.setReadOnly(name + \'_ssh_private_key\', credential.ssh_private_key.readOnly); g_form.setValue(name + \'_passphrase\', credential.passphrase.value); g_form.setReadOnly(name + \'_passphrase\', credential.passphrase.readOnly); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_ssh_private_key\', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + \'_passphrase\', !credential.passphrase.readOnly); } else { g_form.setValue(name + \'_password\', \'\'); credArr[name + \'_password\'] = credential.password.value; g_form.setReadOnly(name + \'_password\', credential.password.readOnly); g_form.setDisplay(name + \'_password\', !credential.password.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); } g_form.setDisplay(name + \'_credential_reference\', \'false\'); if (credential.credential_reference &amp;&amp; credential.credential_reference[0].name) { g_form.setDisplay(name + \'_credential_reference\', \'true\'); for (var i = 0; i &lt; credential.credential_reference.length; i++) { g_form.addOption(name + \'_credential_reference\', credential.credential_reference[i].uuid + \'\', credential.credential_reference[i].name + \'\'); } if (credential.credential_reference.length &lt;= 1) { g_form.setReadOnly(name + \'_credential_reference\', \'true\'); } else g_form.setReadOnly(name + \'_credential_reference\', \'false\'); g_form.setDisplay(name + \'_credential_reference\', credential.credential_reference[0].readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_secret_type\', \'false\'); } } sessionStorage[\'credentials_\' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get(\'loader\').destroy(); reg.switchStatusToStandBy(); } } } else { var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseFieldResponse); function parseFieldResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object1 = JSON.parse(answer); for (var i in object1) { if (object1[i].var_type == \'formatter\' || object1[i].var_type == \'container\' || object1[i].var_type == \'checkbox_container\' || object1[i].var_type == \'undefined\' || object1[i].var_type == \'Container Start\') { continue; } if (object1[i].var_name != \'default_app_name\') { g_form.setMandatory(object1[i].var_name + \'\', false); } if (object1[i].var_name != \'default_environment\' &amp;&amp; object1[i].var_name != \'default_project\' &amp;&amp; object1[i].var_name != \'default_profile\' &amp;&amp; (object1[i].var_name).includes(\"snapshot_policy\") == false &amp;&amp; (object1[i].var_name).includes(\"local_rule\") == false) { g_form.setDisplay(object1[i].var_name + \'\', false); } } reg.switchStatusToStandBy(); } g_form.setDisplay(\'provider_icons\', \'true\'); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_environment\', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var envuuid = g_form.getValue(\'default_environment\'); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.addParam(\'sysparm_envsysid\', envuuid); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.addParam(\'sysparm_envsysid\', envuuid); ga.getXML(parseResponse1, null); function parseResponse1(response) { var answer1 = response.responseXML.documentElement.getAttribute(\'answer\'); var object1 = JSON.parse(answer1); for (var i in object1) { var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (object1[i].var_type + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } reg.switchStatusToStandBy(); } } } } } catch (e) { console.log(\'Inside onchange profile: \' + e.message); reg.switchStatusToStandBy(); } }";
                    } else {
                        script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialogbox = new GlideModal(\'loader\', true); loadingDialogbox.setTitle(\'Fetching Order Form Data...\'); loadingDialogbox.renderWithContent(\'\' + loadingHTML); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].prettyName != \'default_app_name\') { g_form.setMandatory(flds[i].prettyName, false); } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', \'false\'); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null, loadingDialogbox); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get(\'loader\').destroy(); var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching Credentials List...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchCredentialsList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + \'\').toLowerCase().replace(\/ \/g, \'_\'); g_form.setValue(name + \'_credential_name\', credential.name + \'\'); g_form.setReadOnly(name + \'_credential_name\', true); g_form.setValue(name + \'_secret_type\', credential.type + \'\', (credential.type + \'\' == \'KEY\') ? \'SSH Private Key\' : \'Password\'); g_form.setReadOnly(name + \'_secret_type\', true); g_form.setValue(name + \'_username\', credential.username.value); g_form.setReadOnly(name + \'_username\', credential.username.readOnly); g_form.setDisplay(name + \'_username\', !credential.username.readOnly); if ((credential.type == \'KEY\')) { g_form.setValue(name + \'_ssh_private_key\', credential.ssh_private_key.value); g_form.setReadOnly(name + \'_ssh_private_key\', credential.ssh_private_key.readOnly); g_form.setValue(name + \'_passphrase\', credential.passphrase.value); g_form.setReadOnly(name + \'_passphrase\', credential.passphrase.readOnly); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_ssh_private_key\', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + \'_passphrase\', !credential.passphrase.readOnly); } else { g_form.setValue(name + \'_password\', \'\'); credArr[name + \'_password\'] = credential.password.value; g_form.setReadOnly(name + \'_password\', credential.password.readOnly); g_form.setDisplay(name + \'_password\', !credential.password.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); } g_form.setDisplay(name + \'_credential_reference\', \'false\'); if (credential.credential_reference &amp;&amp; credential.credential_reference.name) { g_form.setDisplay(name + \'_credential_reference\', \'true\'); g_form.addOption(name + \'_credential_reference\', credential.credential_reference.uuid + \'\', credential.credential_reference.name + \'\'); g_form.setReadOnly(name + \'_credential_reference\', credential.credential_reference.readOnly); g_form.setDisplay(name + \'_credential_reference\', !credential.credential_reference.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_secret_type\', \'false\'); } } sessionStorage[\'credentials_\' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get(\'loader\').destroy(); } } }";
                    }
                    catalogScriptGR.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), script].join('\n'));
                    var ScriptId = catalogScriptGR.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(ScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }
                }


                /*Onload script for subnet*/

                /*		var onLoadclientScript = new GlideRecord(this.appUtil.configuration.table.catalogClientScript+'');
                        onLoadclientScript.initialize();
                        onLoadclientScript.name = "Get Subnet Info";
                        onLoadclientScript.type = "onLoad";
                        onLoadclientScript.applies_to = "item";
                        onLoadclientScript.cat_item = catItemSysId;
                        onLoadclientScript.active = true;
                        onLoadclientScript.order=50;

                        onLoadclientScript.description = 'This script is created for getting subnet list.';

                        onLoadclientScript.applies_catalog = true;
                        onLoadclientScript.ui_type = "0";
                        onLoadclientScript.applies_req_item = false;
                        onLoadclientScript.applies_sc_task = false;
                        onLoadclientScript.script = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList) g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);}}else{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){ g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                        onLoadclientScript.insert();*/

                //All
                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Get Subnet Info",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": "" + catItemSysId,
                    "active": false,
                    "order": 50,
                    "description": "This script is created for getting subnet list.",
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x &lt; n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s &lt; nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                onLoadCatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onLoadScript].join('\n'));
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onLoadCatalogClientScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue("sys_policy", this.protected_var);
                    grChange.update();

                }

                /*End of Onload script for subnet*/
                /**/

                // Blueprints and MPI blueprins
				//CALM-43616_ Client Script Optimization
                for (var x = 0; x &lt; nicSysIdList.length; x++) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Populate Nic on change of Nic Sys_id : " + x,
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "cat_variable": "IO:" + nicSysIdList[x],
                        "active": true,
                        "order": 400,
                        "description": "This script is created for onChange of Nic",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { reg.switchStatusToStandBy(); return; } var portal_check; getPortalCheck(getParameterValue('portal_check')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var clusterJson = JSON.parse(sessionStorage.getItem('clusterName_' + g_form.getUniqueValue())); var catCluster = clusterJson.catalog_data; var clusterInfo = clusterJson.cluster_info; var clusterVal; for (var i in clusterInfo) { for (var k in clusterInfo[i].subnet) { if (k == newValue) { clusterVal = i + ''; } } } var clustername, relatedNic; for (var i in catCluster) { var nic = catCluster[i].nics; for (var k in nic) { var nicElem = nic[k]; if ('" + nicSysIdList[x] + "' == k) { if (!catCluster[i].value) { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; addNicOptions(relatedNic); } else { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; } } } } function addNicOptions(relatedNic) { for (var n in relatedNic) { for (var l in clusterInfo) { if (l != clusterVal &amp;&amp; clusterVal) for (var j in clusterInfo[l].subnet) { g_form.removeOption(relatedNic[n], j); } } } } } else { var clusterJson = JSON.parse(sessionStorage.getItem('clusterName_' + g_form.getUniqueValue())); var catCluster = clusterJson.catalog_data; var clusterInfo = clusterJson.cluster_info; var clusterVal; for (var i in clusterInfo) { for (var k in clusterInfo[i].subnet) { if (k == newValue) { clusterVal = i + ''; } } } var clustername, relatedNic; for (var i in catCluster) { var nic = catCluster[i].nics; for (var k in nic) { var nicElem = nic[k]; if ('" + nicSysIdList[x] + "' == k) { if (!catCluster[i].value) { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; addNicOptions(relatedNic); } else { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; } } } } if (typeof clusterVal == \"undefined\") { g_form.showFieldMsg(catCluster[i].name,'This Nic is not associated with the project, Please select another Nic. To Filterout unassociated Nic reload the page.', 'error'); } function addNicOptions(relatedNic){ for (var n in relatedNic) { for (var l in clusterInfo) { if (l != clusterVal &amp;&amp; clusterVal) for (var j in clusterInfo[l].subnet){ g_form.removeOption(relatedNic[n], j); } } } } } reg.switchStatusToStandBy(); } }";
                    onChangecatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onChangeScript].join('\n'));
                    var onChangeCatalogClientScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onChangeCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }


                }

                /**/
                this.logger.debug("Created onChange script to get form data on catalog item " + current.variables.item_name);



                //All
				//CALM-43616_ Client Script Optimization
                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Check AppName OnChange",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + appSysID,
                    "active": true,
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name.",
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false,

                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { reg.switchStatusToStandBy(); return; } var portal_check; getPortalCheck(getParameterValue(\'portal_check\')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { portal_check = response; var name = newValue; if ((newValue.length != ((newValue.trim()).length)) || (!(\/^[\\_\\-\\w ]+$\/.test(name) &amp;&amp; (name.trim().lastIndexOf(\'-\') != (name.trim().length - 1))))) { if (portal_check == \'false\') g_form.clearValue(\'default_app_name\'); else g_form.setValue(\'default_app_name\', \'\'); g_form.showErrorBox(\'default_app_name\', \'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.\'); } reg.switchStatusToStandBy(); } }";
                onChangecatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onChangeScript].join('\n'));
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(OnChangeCatalogScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue("sys_policy", this.protected_var);
                    grChange.update();

                }

                this.logger.debug("Created onChange script to check application name on " + current.variables.item_name);


                //All
                var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                onSubmitcatalogScriptGR.setAttributes({
                    "name": "Check AppName OnSubmit",
                    "type": "onSubmit",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": 'false',
                    "order": 100,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) &amp;&amp; (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i &lt; keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j &lt; n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; j == n - 1 &amp;&amp; listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') &amp;&amp; value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value &amp;&amp; row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  &amp;&amp; flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  &amp;&amp; flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                onSubmitcatalogScriptGR.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onSubmitscript].join('\n'));
                var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onSubmitcatalogScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue("sys_policy", this.protected_var);
                    grChange.update();

                }

                this.logger.debug("Created onSubmit script to check application name on " + current.variables.item_name);


                // All but only works in RITM
                var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScriptGR.setAttributes({
                    "name": "Hide Order details on request",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": true,
                    "order": 10,
                    "description": "Hide values on request details.",
                    "applies_catalog": "false",
                    "ui_type": '10',
                    "applies_req_item": "true",
                    "applies_sc_task": "false"
                });
                onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                var onLoadScriptHide = "function onLoad() { var blueprintType = \"\"; if (g_form.getTableName() + \'\' == \'sc_req_item\') { var item_name = g_form.getValue(\"cat_item\"); var glide = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); glide.addParam(\'sysparm_name\', \'fetchBlueprintType\'); glide.addParam(\'sysparm_item_sys_id\', item_name); glide.getXML(getBlueprintResponse); function getBlueprintResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); blueprintType = answer; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } g_form.setMandatory(flds[i].prettyName, false); g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', \'false\'); g_form.setReadOnly(\'default_project\', true); g_form.setReadOnly(\'default_environment\', true); g_form.setReadOnly(\'default_app_name\', true); g_form.setReadOnly(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); if (blueprintType == \"Runbook\" || blueprintType == \"Marketplace Runbook\") { g_form.setDisplay(\'default_endpoint\', true); } var profile = g_form.getValue(\'default_profile\') + \'\'; var cat_sys_id = g_form.getValue(\'cat_item\') + \'\'; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile + \'\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id + \'\'); ga.getXML(parseResponse); } } function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } g_form.setReadOnly(i + \'\', true); g_form.setDisplay(i + \'\', !parsed[i].readOnly); } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } }";
                onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onLoadCatalogClientScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue("sys_policy", this.protected_var);
                    grChange.update();

                }

                // All
				//CALM-43616_ Client Script Optimization
                var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript1.setAttributes({
                    "name": "Get Subnet Info on project change",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + projectSysID,
                    "active": true,
                    "order": 600,
                    "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false

                });
                onChangecatalogClientScript1.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == \'\') { reg.switchStatusToStandBy(); return; } var portal_check; getPortalCheck(getParameterValue(\'portal_check\')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.getXML(processAnswer); function processAnswer(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); sessionStorage[\'clusterName_\' + g_form.getUniqueValue()] = ans; ans = JSON.parse(ans); var catalog_clusterJSON = ans.catalog_data; clusterJSON = ans.cluster_info; var nicList = []; for (var m in clusterJSON) { nicList.push(clusterJSON[m].subnet); } for (var k in catalog_clusterJSON) { for (var i in catalog_clusterJSON[k].nics) { if (catalog_clusterJSON[k].value + \'\') { for (var l in clusterJSON) { var subnetList = clusterJSON[l].subnet; if (l != catalog_clusterJSON[k].value + \'\') for (var s in subnetList) { \/*g_form.removeOption(catalog_clusterJSON[k].nics[i] + \'\', s);*\/ } } } { var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + \'\'); var n = 0; if (opt.options) { n = opt.options.length; } for (var x = 1; x &lt; n; x++) { var present = false; var val = opt.options[x].value + \'\'; for (var s = 0; s &lt; nicList.length; s++) { if (nicList[s][val]) { present = true; break; } } if (!present) { g_form.removeOption(catalog_clusterJSON[k].nics[i] + \'\', opt.options[x].value + \'\'); x--; n--; } } } } } } } else { try { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.getXML(processAnswer); function processAnswer(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); sessionStorage[\'clusterName_\' + g_form.getUniqueValue()] = ans; ans = JSON.parse(ans); var catalog_clusterJSON = ans.catalog_data; clusterJSON = ans.cluster_info; var nicList = []; for (var m in clusterJSON) { nicList.push(clusterJSON[m].subnet); } var nic_variable_namme = []; for (var n in catalog_clusterJSON) { var nics = catalog_clusterJSON[n].nics; for (var k in nics) nic_variable_namme.push(nics[k]); } var catNicJson = { \"nic\": nic_variable_namme, \"nicList\": nicList }; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'setSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_catNicJson\', JSON.stringify(catNicJson)); ga.getXML(processAnswer1); function processAnswer1(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); } reg.switchStatusToStandBy(); } } catch (err) { reg.switchStatusToStandBy(); } } } }";
                onChangecatalogClientScript1.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onChangeScript].join('\n'));
                var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(OnChangeCatalogScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue('sys_policy', this.protected_var);
                    grChange.update();
                }

                this.logger.debug("Created onChange script to check application name on " + current.variables.item_name);


                // All
				//CALM-43616_ Client Script Optimization
                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity project",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "cat_variable": "IO:" + projectSysID,
                    "active": true,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { reg.switchStatusToStandBy(); return; } g_form.setReadOnly(\'default_endpoint\', false); var portal_check; getPortalCheck(getParameterValue(\'portal_check\')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { var selectedEndpointList; var allEndpointList; portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var projectUUID = (newValue + \'\').trim(); if (projectUUID == \'\') return; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Checking Project Status...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'project\'); ga.addParam(\'sysparm_projectUUID\', projectUUID); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = \'\'; if (parsed[index].state == \'INACTIVE\') { message = parsed[index].name + \' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \' + parsed[index].name + \' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } new GlideModal().get(\'loader\').destroy(); } function clearFieldValue(message) { var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].label == \"Project\" &amp;&amp; flds[i].prettyName == \"default_project\") continue; if (flds[i].label == \"Profile\" &amp;&amp; flds[i].prettyName == \"default_profile\") continue; if (flds[i].prettyName.indexOf(\'cluster_name\') == -1) g_form.clearValue(flds[i].prettyName); } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchSelectedEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); selectedEndpointList = parsed.endpointList; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEndpointAssociatedToProject\'); ga.addParam(\'sysparm_projectID\', newValue); ga.addParam(\'sysparm_selected_endpoint\', JSON.stringify(selectedEndpointList)); ga.getXML(parseResponseProjectAndEndpointList); function parseResponseProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(\"Endpoint associated to new project ::\" + answer); var parse = JSON.parse(answer); var final_endpointList = parse.single; g_form.clearOptions(\'default_endpoint\'); for (var i = 0; i &lt; final_endpointList.length; i++) { var endpoint = final_endpointList[i]; g_form.addOption(\'default_endpoint\', endpoint.uuid + \'\', endpoint.name + \'\'); console.log(\"endpoint ::\" + endpoint.uuid); if (endpoint.uuid == \"\") { g_form.showFieldMsg(\'default_endpoint\', \'There are no applicable Endpoints(s) that match the selected Project. Please choose a different Project to proceed.\'); } } if (final_endpointList.length == 1) { g_form.setReadOnly(\'default_endpoint\', true); } } } } else { var projectUUID = (newValue + \'\').trim(); if (projectUUID == \'\') return; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'project\'); ga.addParam(\'projectUUID\', projectUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = \'\'; if (parsed[index].state == \'INACTIVE\') { message = parsed[index].name + \' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \' + parsed[index].name + \' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } reg.switchStatusToStandBy(); } function getParameterValue(name) { name = name.replace(\/[\\\\[]\/, \"\\\\\\\\\\\\[\").replace(\/[\\\\]]\/, \"\\\\\\\\\\\\]\"); var regexS = \"[\\\\\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } function clearFieldValue(message) { alert(message); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseResponse1); function parseResponse1(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object = JSON.parse(answer); for (var i in object) { if (object[i].var_type == \'formatter\' || object[i].var_type == \'container\' || object[i].var_type == \'checkbox_container\' || object[i].var_type == \'undefined\' || object[i].var_type == \'Container Start\') { continue; } if (object[i].var_name.indexOf(\'cluster_name\') == -1) g_form.clearValue(object[i].var_name); } } self.location = \'\/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24\'; } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchSelectedEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); selectedEndpointList = parsed.endpointList; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEndpointAssociatedToProject\'); ga.addParam(\'sysparm_projectID\', newValue); ga.addParam(\'sysparm_selected_endpoint\', JSON.stringify(selectedEndpointList)); ga.getXML(parseResponseProjectAndEndpointList); function parseResponseProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(\"Endpoint assciated to new project ::\" + answer); var parse = JSON.parse(answer); var final_endpointList = parse.single; g_form.clearOptions(\'default_endpoint\'); for (var i = 0; i &lt; final_endpointList.length; i++) { var endpoint = final_endpointList[i]; g_form.addOption(\'default_endpoint\', endpoint.uuid + \'\', endpoint.name + \'\'); console.log(\"endpoint ::\" + endpoint.uuid); if (endpoint.uuid == \"\") { g_form.showFieldMsg(\'default_endpoint\', \'There are no applicable Endpoints(s) that match the selected Project. Please choose a different Project to proceed.\'); } } if (final_endpointList.length == 1) { g_form.setReadOnly(\'default_endpoint\', true); } reg.switchStatusToStandBy(); } } } } }";
                onLoadCatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onLoadScript].join('\n'));
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onLoadCatalogClientScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue("sys_policy", this.protected_var);
                    grChange.update();

                }
                // Blueprints and MPI Blueprins
                if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {

                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Check Catalog Item Validity profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 1,
                        "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { reg.switchStatusToStandBy(); return; } try { var portal_check; getPortalCheck(getParameterValue(\'portal_check\')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var blueprintType = getParameterValue(\'type\') + \'\'; var blueprintUUID = getParameterValue(\'uuid\') + \'\'; var profileSysId = getParameterValue(\'profileSysId\') + \'\'; var profileName = (newValue + \'\').trim(); var envUUID = (g_form.getValue(\'default_environment\') + \'\').trim(); var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;\/div&gt;&lt;\/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Checking Blueprint Status...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'profile\'); ga.addParam(\'sysparm_blueprintType\', blueprintType); ga.addParam(\'sysparm_blueprintUUID\', blueprintUUID); ga.addParam(\'sysparm_envUUID\', envUUID); ga.addParam(\'sysparm_profileSysId\', profileSysId); ga.addParam(\'sysparm_profileName\', profileName); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = \'\'; if (parsed[index].state == \'INACTIVE\') { message = parsed[index].name + \' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \' + parsed[index].name + \' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } new GlideModal().get(\'loader\').destroy(); reg.switchStatusToStandBy(); } function clearFieldValue(message) { var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].label == \"Project\" &amp;&amp; flds[i].prettyName == \"default_project\") continue; if (flds[i].label == \"Profile\" &amp;&amp; flds[i].prettyName == \"default_profile\") continue; if (flds[i].prettyName.indexOf(\'cluster_name\') == -1) g_form.clearValue(flds[i].prettyName); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } function getParameterValue(name) { name = name.replace(\/[[]\/, \"\\[\").replace(\/[]]\/, \"\\]\"); var regexS = \"[\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } } else { var blueprintType = getParameterValue(\'type\') + \'\'; var blueprintUUID = getParameterValue(\'uuid\') + \'\'; var profileSysId = getParameterValue(\'profileSysId\') + \'\'; var profileName = (newValue + \'\').trim(); if (profileName == \'\') return; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'profile\'); ga.addParam(\'blueprintType\', blueprintType); ga.addParam(\'blueprintUUID\', blueprintUUID); ga.addParam(\'profileSysId\', profileSysId); ga.addParam(\'profileName\', profileName); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = \'\'; if (parsed[index].state == \'INACTIVE\') { message = parsed[index].name + \' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \' + parsed[index].name + \' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&amp;sysparm_view=catalog_view&amp;sysparm_query=GROUPBYitem_name.category&amp;sysparm_clear_stack=true\'; } } reg.switchStatusToStandBy(); } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } function clearFieldValue(message) { alert(message); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseResponse1); function parseResponse1(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object = JSON.parse(answer); for (var i in object) { if (object[i].var_type == \'formatter\' || object[i].var_type == \'container\' || object[i].var_type == \'checkbox_container\' || object[i].var_type == \'undefined\' || object[i].var_type == \'Container Start\') { continue; } if (object[i].var_name.indexOf(\'cluster_name\') == -1) g_form.clearValue(object[i].var_name); } } self.location = \'\/sp?id=sc_category&amp;catalog_id=240abede37112300fdfc097973990e24\'; } } } } catch (e) { console.log(\'inside Check Catalog Item Validity profile:: \' + e.message); reg.switchStatusToStandBy(); } }";
                    onLoadCatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onLoadScript].join('\n'));
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }
                }
                // Blueprints and MPI blueprins
                if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {
                    var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript2.setAttributes({
                        "name": "Set Session Vars",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for setting session json.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript2.appliesToCatalogItem(true);
                    var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { reg.switchStatusToStandBy(); return; } try { var portal_check; getPortalCheck(getParameterValue(\'portal_check\')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; } for (var j in serv_json) { for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; } } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); reg.switchStatusToStandBy(); } } else { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { reg.switchStatusToStandBy(); var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } reg.switchStatusToStandBy(); } reg.switchStatusToStandBy(); } } catch (e) { console.log(\'inside Set Session Vars:: \' + e.message); reg.switchStatusToStandBy(); } }";
                    onChangecatalogClientScript2.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onChangeScriptSess].join('\n'));
                    var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }
                } else {
                    // Runbook and MPI Runbook
                    var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript2.setAttributes({
                        "name": "Set Session Vars",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for setting session json.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript2.appliesToCatalogItem(true);
                    var onChangeScriptSess = "function onLoad() { try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', \'runbook\'); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } } getAdvancedVars(var_array); sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_field\', \'onLoad\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', \'runbook\'); gajax.addParam(\'sysparm_envsysid\', \'\'); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); if (row.value) { for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value[0]); } } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); if (row.options) { for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value); } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } if (portal_check == \'false\') new GlideModal().get(\'variables_loader\').destroy(); } } } else { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', \'runbook\'); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } } getAdvancedVars(var_array); sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_field\', \'onLoad\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', \'runbook\'); gajax.addParam(\'sysparm_envsysid\', \'\'); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); if (row.value) { for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value[0]); } } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); if (row.options) { for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value); } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } if (portal_check == \'false\') new GlideModal().get(\'variables_loader\').destroy();  } reg.switchStatusToStandBy(); } } } catch (e) { console.log(\'inside Set Session Vars:: \' + e.message); reg.switchStatusToStandBy(); } }";
                    onChangecatalogClientScript2.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onChangeScriptSess].join('\n'));
                    var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }
                }
                this.logger.debug("Created onChange script to set Session variables " + current.variables.item_name);
                // Blueprints and MPI Blueprints
                if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {
                    var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript3.setAttributes({
                        "name": "Fetch dependencies on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": '' + catItemSysId,
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 900,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript3.appliesToCatalogItem(true);
                    var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { reg.switchStatusToStandBy(); return; } var portal_check; getPortalCheck(getParameterValue(\'portal_check\')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { portal_check = response; var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); if (portal_check == \'false\') parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); if (portal_check == \'false\') parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_field\', \'onLoad\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); if (row.value) { for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value[0]); } } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); if (row.options) { for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } } if (row.value != \'\' &amp;&amp; row.value != \'undefined\') { g_form.setValue(sys_id, row.value); } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } if (portal_check == \'false\') new GlideModal().get(\'variables_loader\').destroy(); } reg.switchStatusToStandBy(); } } } }";
                    onChangecatalogClientScript3.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onChangeScriptVars].join('\n'));
                    var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue("sys_policy", this.protected_var);
                        grChange.update();

                    }

                    this.logger.debug("Created onChange script to set Session variables " + current.variables.item_name);
                }


                // Serive Potal New Script
                if (gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') == 'true') {
                    active_flag = 'true';
                } else {
                    active_flag = 'false';
                }

                // All
                var catalogScriptGR = new sn_sc.CatalogClientScript();
                catalogScriptGR.setAttributes({
                    "name": "Service portal fixes",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": "" + catItemSysId,
                    "cat_variable": "IO:" + profileSysID,
                    "active": active_flag,
                    "order": 300,
                    "description": 'This script is auto created thorugh runtime module for service portal fixes.',
                    "applies_catalog": true,
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                catalogScriptGR.appliesToCatalogItem(true);
                var Script = "function onChange(control, oldValue, newValue, isLoading) { try { if (isLoading) { reg.switchStatusToStandBy(); return; } var portal_check; getPortalCheck(getParameterValue(\'portal_check\')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { portal_check = response; if (portal_check == \'true\') { if (newValue == \'\') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setMandatory(\'default_profile\', true); reg.switchStatusToStandBy(); } else { var credentials = g_form.getFieldNames(); for (var i in credentials) { if (credentials[i].includes(\'_password\') || credentials[i].includes(\'_private_key\') || credentials[i].includes(\'_passphrase\')) { g_form.setVisible(credentials[i] + \'\', false); } } var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'extraFields\'); ga.addParam(\'sysparm_catSysID\', g_form.getUniqueValue()); ga.addParam(\'sysparm_fieldNames\', g_form.getFieldNames()); ga.addParam(\'sysparm_profile\', newValue); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object = JSON.parse(answer); var extraFields = JSON.parse(object.extraFields); var privateFields = JSON.parse(object.privateFields); var showRuntimeVariables = JSON.parse(object.showRuntimeVariables); var secretVariables = JSON.parse(object.secretVariables); var extraCredentials = JSON.parse(object.extraCredentials); for (var i in extraFields) g_form.setVisible(extraFields[i] + \'\', false); for (var j in privateFields) g_form.setVisible(privateFields[j] + \'\', false); for (var k in showRuntimeVariables) g_form.setVisible(showRuntimeVariables[k] + \'\', true); for (var l in secretVariables) g_form.clearValue(secretVariables[l] + \'\'); for (var m in extraCredentials) g_form.setVisible(extraCredentials[k] + \'\', true); reg.switchStatusToStandBy(); } } } else { reg.switchStatusToStandBy(); } } } catch (e) { console.log(\'Service portal fix\' + e); reg.switchStatusToStandBy(); } }";
                catalogScriptGR.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), Script].join('\n'));
                var ScriptId = catalogScriptGR.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(ScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue("sys_policy", this.protected_var);
                    grChange.update();

                }


                if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                    this.logger.debug("Created On Change of Project (calm evirment 3.2) client script on  " + current.variables.item_name);
                    // Blueprints and MPI Blueprints
                    if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {
                        var onChangeCatalogProject = new sn_sc.CatalogClientScript();
                        onChangeCatalogProject.setAttributes({
                            "name": "On Change of Project",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": '' + catItemSysId,
                            "cat_variable": "IO:" + projectSysID,
                            "active": true,
                            "order": 700,
                            "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        onChangeCatalogProject.appliesToCatalogItem(true);
                        var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { reg.switchStatusToStandBy(); return; } try { var portal_check; getPortalCheck(getParameterValue(\'portal_check\')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { portal_check = response; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEnvironments\'); ga.addParam(\'sysparm_cat_sys_id\', cat_sys_id); ga.addParam(\'sysparm_project_id\', newValue); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var result = JSON.parse(answer); if (result.length == 0) { g_form.hideFieldMsg(\'default_environment\', true); g_form.clearOptions(\'default_environment\'); g_form.showFieldMsg(\'default_environment\', \'This Project has no valid Environments configured, you cannot proceed with the launch. Please contact your administrator\'); g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); if (portal_check == \'true\') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } } g_form.setMandatory(\'default_profile\', true); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); if (portal_check == \'false\') { var elemen = g_form.elements; for (var i in elemen) { if (elemen[i].type + \'\' == \'container\' || elemen[i].type + \'\' == \'checkbox_container\') continue; g_form.setDisplay(elemen[i].fieldName, false); } } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); reg.switchStatusToStandBy(); } else { g_form.clearMessages(); g_form.clearOptions(\'default_environment\'); g_form.clearValue(\'default_environment\'); for (var i = 0; i &lt; result.length; i++) { var jsonObj = result[i]; g_form.addOption(\'default_environment\', jsonObj.UUID + \'\', jsonObj.Name + \'\'); } if (portal_check == \'true\') { var jsonobj = result[0]; g_form.setValue(\'default_environment\', jsonObj.UUID); } reg.switchStatusToStandBy(); } } } } catch (err) { console.error(\'Error in script [On Change of Project] \', err); reg.switchStatusToStandBy(); } }";
                        onChangeCatalogProject.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onChangeProjectScript].join('\n'));
                        var OnChangeCatalogScriptId = onChangeCatalogProject.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(OnChangeCatalogScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue("sys_policy", this.protected_var);
                            grChange.update();
                        }
                        this.logger.debug("Created On Change of Project (calm evirment 3.2) client script on  " + current.variables.item_name);
                    }

                    this.logger.debug("Created On Change of Environment (calm evirment 3.2) client script on  " + current.variables.item_name);

                    // Blueprints and MPI Blueprints
                    if (current.variables.type_of_blueprint == 'unpublished' || current.variables.type_of_blueprint == 'published') {

                        var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
                        onChangeCatalogEnvironment.setAttributes({
                            "name": "On Change of Environment variable",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": '' + catItemSysId,
                            "cat_variable": "IO:" + environmentSysId,
                            "active": true,
                            "order": 700,
                            "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        onChangeCatalogEnvironment.appliesToCatalogItem(true);
                        var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { reg.switchStatusToStandBy(); return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal(\'environment_loader\', true); loadingDialog.setTitle(\'Fetching Profiles...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var def_project; var gUrl = new GlideURL(); gUrl.setFromCurrent(); for (var i = 0; i &lt; g_form.getControl(\'default_project\').options.length; i++) { if (g_form.getControl(\'default_project\').options[i].value == g_form.getValue(\'default_project\')) { def_project = g_form.getControl(\'default_project\').options[i].innerText; break; } } var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_sysID\', g_form.getUniqueValue()); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(\' On Change of Environment variable answer\' + answer); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.elements; for (var i in elemen) { if (elemen[i].type + \'\' == \'container\' || elemen[i].type + \'\' == \'checkbox_container\') continue; g_form.setDisplay(elemen[i].fieldName, false); } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { var elemen = g_form.elements; for (var i in elemen) { if (elemen[i].type + \'\' == \'container\' || elemen[i].type + \'\' == \'checkbox_container\') continue; g_form.setDisplay(elemen[i].fieldName, true); } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); for (var i = 0; i &lt; answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { reg.switchStatusToStandBy(); var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } } else { var def_project; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_sysID\', g_form.getUniqueValue()); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.setDisplay(\'default_profile\', true); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { g_form.setReadOnly(\'default_profile\', false); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.clearValue(\'default_profile\'); for (var i = 0; i &lt; answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } g_form.setValue(\'default_profile\', answer[0]); if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { reg.switchStatusToStandBy(); var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } function getParameterValue(name) { name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } } } }";
                        onChangeCatalogEnvironment.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onChangeEnvironmentScript].join('\n'));
                        var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(OnChangeCatalogScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue("sys_policy", this.protected_var);
                            grChange.update();

                        }
                        this.logger.debug("Created On Change of Environment (calm evirment 3.2) client script on  " + current.variables.item_name);
                    }

                }

                //All
                // Creates Prevent Pre submission catalog client script to prevent submitting before the variables are loaded
                // this script works in combination of below mentioned scripts
                // - getLoadingRegistryScriptTeamplate()
                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Prevent Pre Submission",
                    "type": "onSubmit",
                    "applies_to": "item",
                    "cat_item": '' + catItemSysId,
                    "active": "true",
                    "order": "100",
                    "description": "This script is auto created thorugh runtime module to prevent submission when the variables are still loading.",
                    "applies_catalog": "true",
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false,
                    "messages": "nutanix.catalogs.prevent.submission.warning",
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onSubmitScript = "function onSubmit() { if(sessionStorage[\'x_nuta2_nutanix_ca.catalogs.enableOnSubmitCheck\'] == \'false\'){ return true; } var isScriptsFinishedRunning = reg.getAllRunningScripts().length == 0; if (!isScriptsFinishedRunning) { /*- verify if scripts are running - check if enableOnSubmitCheck is true */ getMessage(\'nutanix.catalogs.prevent.submission.warning\',function(message){ g_form.clearMessages(); g_form.addErrorMessage(message); }); return false; } return true; }";

                onLoadCatalogClientScript.addScript([this.genUniqueScriptIdTemplate(),this.getLoadingRegistryScriptTeamplate({ shouldRegistry: false }), onSubmitScript].join('\n'));
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();

                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onLoadCatalogClientScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue("sys_policy", this.protected_var);
                    grChange.update();
                }


                var cat_ui_policy = new GlideRecord(this.appUtil.configuration.table.catalogUIPolicy + '');
                cat_ui_policy.initialize();
                cat_ui_policy.catalog_item = catItemSysId;
                cat_ui_policy.short_description = 'Make Variables RITM ReadOnly';
                cat_ui_policy.applies_catalog = false;
                cat_ui_policy.applies_sc_task = false;
                cat_ui_policy.applies_req_item = true;
                cat_ui_policy.run_scripts = true;
                cat_ui_policy.script_true = 'function onCondition() { g_form.setVariablesReadOnly(true); }';
                cat_ui_policy.insert();



                this.logger.debug("Created ui policy to make field readonly on RITM on catalog item " + current.variables.item_name);

            }

            this.logger.info("New Catalog item " + current.variables.item_name + " creation completed.");
            return ans;

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._copyCatalogItem. Error:- " + e);
        }
    },

    _insertIntoRuntimeConfigTable: function (ans, current) {
        try {
            this.logger.debug("RV: Inside Nutanix_ConfigureSettingScripts._insertIntoRuntimeConfigTable." + JSON.stringify(current));

            var createCatalog = current.variables.create_catalog + '';
            var environments = current.variables.environments + '';
            var type_of_blueprint = current.variables.type_of_blueprint + '';
            this.logger.debug("RV type of blueprint: " + type_of_blueprint);
            if (createCatalog == 'yes') {

                // 				var project = new GlideRecord(this.appUtil.configuration.table.Project+'');
                // 				project.addQuery('sys_id', current.variables.project+'');
                // 				project.setLimit(1);
                // 				project.query();
                // 				project.next();

                var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
                gr.initialize();
                gr.multiple_application_profile = current.variables.multiple_application_profile + '';
                gr.environments = current.variables.environments + ''; //add
                gr.type_of_blueprint = current.variables.type_of_blueprint + ''; //add
                this.logger.debug("RV type of blueprint_new: " + gr.type_of_blueprint);
                gr.endpoint = current.variables.endpoint + '';
                //gr.assigned_users = current.variables.assign_users+'';
                gr.user_criteria = ans[1];
                gr.blueprint = (current.variables.type_of_blueprint + '' == 'runbook' || current.variables.type_of_blueprint + '' == 'published_runbook') ? current.variables.runbook : current.variables.blueprint;
                //gr.description = current.variables.description+'';
                gr.item_name = ans[0] + '';
                gr.multiple_projects = current.variables.multiple_project + '';
                gr.insert();
                this.logger.info("Inserting value and runtime value of fields into variable proerpteis table.");
            } else {
                var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
                gr.addQuery('item_name', current.variables.cat_item + '');
                gr.query();
                if (gr.next()) {
                    gr.application_profile = gr.application_profile + ',' + current.variables.application_profile + '';
                    gr.environments = gr.environments + ',' + current.variables.environments + ''; //add
                    gr.type_of_blueprint = current.variables.type_of_blueprint + ''; //add
                    this.logger.debug("RV type of blueprint_update: " + gr.type_of_blueprint);
                    gr.endpoint = gr.endpoint + ',' + current.variables.endpoint + '';
                    //gr.item_name = ans[0] + '';
                    //gr.user_criteria = ans[1];
                    gr.multiple_projects = gr.multiple_project + ',' + current.variables.multiple_project + '';
                    gr.update();
                }

                this.logger.info("Updating value and runtime value of fields into variable proerpteis table.");
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._insertIntoRuntimeConfigTable. Error:- " + e);
        }

    },

    setMultiProfileServiceVariables: function (current) {
        try {
            this.logger.debug("Inside Nutanix_ConfigureSettingScripts.setMultiProfileServiceVariables.");

            var performAction = current.variables.type + '';
            var catName = '';


            if (performAction == 'new') {
                var profile = current.variables.multiple_application_profile + '';
                var profile_arr = profile.split(",");
                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var multiprofile_service_data = JSON.parse(current.variables.service_data);

                this.logger.debug("Got Profile:- " + profile + " Blueprint:- " + blueprint + " Catalog Item:- " + catSysId + " and Service Variables Data:- " + current.variables.service_data + " for setting service variables");

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId);
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }


                this.logger.debug("Fethed the mapping of fields to sysIds. JSON string:- " + JSON.stringify(fieldInfo));
                for (var c in multiprofile_service_data) {
                    var profile = multiprofile_service_data[c].profile_sys_id;
                    var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                    if (profile_gr.get(profile)) { }


                    var service_data = multiprofile_service_data[c].service_configuration;

                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                    for (var i in service_data) {
                        var serviceName = i;
                        var categoryList = service_data[i];

                        for (var j in categoryList) {
                            var categoryName = j;
                            var category = categoryList[j];

                            var keys = Object.keys(category);

                            if (!category[keys[0]].notCmplx || category[keys[0]].notCmplx + '' == 'false') {

                                this.logger.debug("Mapping PortList variables " + JSON.stringify(category[keys[0]]) + " in Varaibles properties table");

                                gr.initialize();
                                var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                gr.variable = fieldInfo[temp1 + ''] + '';
                                gr.application_profile = profile + '';
                                gr.catalog_item = catSysId + '';
                                gr.default_value = JSON.stringify(category[keys[0]]);
                                gr.isprofilevariable = 'false';
                                gr.runtime_config = 'false';
                                gr.uuid = '';
                                var temp2 = serviceName.replace(profile_gr.name + '_', '');
                                gr.service_name = fieldInfo[temp2 + ''] + '';
                                var temp3 = categoryName.replace(profile_gr.name + '_', '');
                                gr.category_name = fieldInfo[temp3 + ''] + '';
                                gr.insert();

                            } else {
                                for (var k in category) {
                                    var varia = category[k];

                                    this.logger.debug("Mapping service variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts service " + serviceName + " and category " + categoryName + " in Varaibles properties table");

                                    if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                        varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);


                                    gr.initialize();
                                    var temp1 = (varia.name).replace(profile_gr.name + '_', '');

                                    gr.variable = fieldInfo[temp1 + ''] + '';
                                    gr.application_profile = profile + '';
                                    gr.catalog_item = catSysId + '';
                                    gr.default_value = varia.value + '';
                                    gr.isprofilevariable = varia.isprofilevariable + '';
                                    gr.runtime_config = varia.runtime_config + '';
                                    gr.uuid = varia.uuid + '';
                                    var temp = serviceName.replace(profile_gr.name + '_', '');
                                    gr.service_name = fieldInfo[temp + ''] + '';
                                    var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                    gr.category_name = fieldInfo[temp1 + ''] + '';

                                    gr.isdisabled = varia.isdisabled + '';
                                    gr.issupported = varia.isSupported + '';
                                    gr.isservicevariable = varia.isservicevariable + '';


                                    gr.type = varia.type;
                                    gr.value_type = varia.val_type + '';
                                    gr.field_regex = varia.regex + '';
                                    gr.data_type = varia.data_type + '';
                                    gr.uuid = varia.uuid + '';

                                    gr.field_json = varia.field + "";
                                    gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;


                                    gr.insert();

                                    catName = gr.catalog_item.name + '';

                                    //                                     if (varia.isservicevariable + '' == 'true')
                                    //                                         this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");
                                }
                            }

                        }
                    }

                    this.logger.info("Set service variables values for " + catName + ".");
                }

                this.logger.info("Set service variables values for " + catName + ".");

                for (var i = 0; i &lt; profile_arr.length; i++) {

                    this._createOnChangeScriptForDependee(catSysId, profile_arr[i], "serviceVar");
                }
            } else {

                var profile = current.variables.multiple_application_profile + '';
                var profile_arr = profile.split(",");
                var blueprint = current.variables.blueprint;
                var catSysId = current.description;
                var multiprofile_service_data = JSON.parse(current.variables.service_data);
                var delta_profiles = ((current.variables.delta_profiles).toString()).split(',');

                // 				gs.info("##### Profile : "+profile+" blueprint "+blueprint+" catSysId "+catSysId+"  multiprofile_service_data "+multiprofile_service_data+" delta_profiles "+delta_profiles+"type of delta profile "+typeof delta_profiles+" delta_profiles [0] "+delta_profiles[0]);

                var service_data = JSON.parse(current.variables.service_data + '');

                this.logger.debug("multiprofile_service_data: " + JSON.stringify(multiprofile_service_data));
                for (var c in multiprofile_service_data) {
                    var profile = multiprofile_service_data[c].profile_sys_id;

                    var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                    if (profile_gr.get(profile)) { }
                    var service_data = multiprofile_service_data[c].service_configuration;
                    this.logger.debug("service_data: " + JSON.stringify(service_data));
                    var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                    gr.addQuery('catalog_item', catSysId);
                    gr.addQuery('application_profile', profile);
                    gr.addQuery('isprofilevariable', false);
                    gr.query();
                    this.logger.debug("catalog_item: " + catSysId + " application profile: " + profile + "isprofilevariable: profile_gr: " + profile_gr); //extra line
                    while (gr.next()) {
                        var jsonData = service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''];
                        this.logger.debug("json_data" + JSON.stringify(service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + '']));
                        this.logger.debug("service_data2: " + JSON.stringify(service_data));
                        if (!jsonData.notCmplx || jsonData.notCmplx + '' == 'false') {
                            gr.default_value = JSON.stringify(service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + '']);
                            gr.update();
                            this.logger.debug("Updated service port list " + gr.default_value);
                        } else {
                            if (service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].data_type + '' == 'LOCAL' &amp;&amp; (service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE_TIME' || service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].val_type + '' == 'DATE'))
                                service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].value = this.appScriptInstance._formttedDateTime(service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].value + '', service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].val_type + '', true);

                            gr.default_value = service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].value + '';
                            gr.runtime_config = service_data[profile_gr.name + '_' + gr.service_name.name + ''][profile_gr.name + '_' + gr.category_name.name + ''][gr.sys_id + ''].runtime_config + '';
                            gr.update();

                            this.logger.debug("Updated service variable " + gr.variable.name + " with value " + gr.default_value + " and runtime config as " + gr.runtime_config + " againsts service " + gr.service_name.name + " and category " + gr.category_name.name + " in Variables properties table");
                            catName = gr.catalog_item.name + '';

                        }
                    }
                }
                this.logger.info("Updated service variables values for " + catName + ".");

                var multiprofile_service_data = JSON.parse(current.variables.service_data);
                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + catSysId);
                fieldGR.query();

                var fieldInfo = {};

                while (fieldGR.next()) {
                    fieldInfo[fieldGR.name] = fieldGR.sys_id + '';
                }

                for (var c in multiprofile_service_data) {
                    var profile = multiprofile_service_data[c].profile_sys_id;
                    var profile_gr = new GlideRecord('x_nuta2_nutanix_ca_application_profile');
                    if (profile_gr.get(profile)) { }

                    var service_data = multiprofile_service_data[c].service_configuration;
                    for (var i in delta_profiles) {
                        if (profile + '' == delta_profiles[i] + '') {
                            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');

                            for (var i in service_data) {
                                var serviceName = i;
                                var categoryList = service_data[i];

                                for (var j in categoryList) {
                                    var categoryName = j;
                                    var category = categoryList[j];

                                    var keys = Object.keys(category);

                                    if (!category[keys[0]].notCmplx || category[keys[0]].notCmplx + '' == 'false') {

                                        this.logger.debug("Mapping PortList variables " + JSON.stringify(category[keys[0]]) + " in Varaibles properties table");

                                        gr.initialize();
                                        var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                        gr.variable = fieldInfo[temp1 + ''] + '';
                                        gr.application_profile = profile + '';
                                        gr.catalog_item = catSysId + '';
                                        gr.default_value = JSON.stringify(category[keys[0]]);
                                        gr.isprofilevariable = 'false';
                                        gr.runtime_config = 'false';
                                        gr.uuid = '';
                                        var temp2 = serviceName.replace(profile_gr.name + '_', '');
                                        gr.service_name = fieldInfo[temp2 + ''] + '';
                                        var temp3 = categoryName.replace(profile_gr.name + '_', '');
                                        gr.category_name = fieldInfo[temp3 + ''] + '';
                                        gr.insert();

                                    } else {
                                        for (var k in category) {
                                            var varia = category[k];

                                            this.logger.debug("Mapping service variable " + varia.name + " with value " + varia.value + " and runtime config as " + varia.runtime_config + " againsts service " + serviceName + " and category " + categoryName + " in Varaibles properties table");

                                            if (varia.data_type + '' == 'LOCAL' &amp;&amp; (varia.val_type + '' == 'DATE_TIME' || varia.val_type + '' == 'DATE'))
                                                varia.value = this.appScriptInstance._formttedDateTime(varia.value + '', varia.val_type + '', true);


                                            gr.initialize();
                                            var temp1 = (varia.name).replace(profile_gr.name + '_', '');
                                            gr.variable = fieldInfo[temp1 + ''] + '';
                                            gr.application_profile = profile + '';
                                            gr.catalog_item = catSysId + '';
                                            gr.default_value = varia.value + '';
                                            gr.isprofilevariable = varia.isprofilevariable + '';
                                            gr.runtime_config = varia.runtime_config + '';
                                            gr.uuid = varia.uuid + '';
                                            var temp = serviceName.replace(profile_gr.name + '_', '');
                                            gr.service_name = fieldInfo[temp + ''] + '';
                                            var temp1 = categoryName.replace(profile_gr.name + '_', '');
                                            gr.category_name = fieldInfo[temp1 + ''] + '';

                                            gr.isdisabled = varia.isdisabled + '';
                                            gr.issupported = varia.isSupported + '';
                                            gr.isservicevariable = varia.isservicevariable + '';


                                            gr.type = varia.type;
                                            gr.value_type = varia.val_type + '';
                                            gr.field_regex = varia.regex + '';
                                            gr.data_type = varia.data_type + '';
                                            gr.uuid = varia.uuid + '';

                                            gr.field_json = varia.field + "";
                                            gr.is_hidden = (varia.isHidden + "" == 'true') ? true : false;

                                            gr.insert();

                                            catName = gr.catalog_item.name + '';

                                            //                                             if (varia.isservicevariable + '' == 'true')
                                            //                                                 this._createOnChangeScript(fieldInfo[varia.name + ''] + '', catSysId + "");
                                        }
                                    }

                                }
                            }
                        }
                    }
                }

                for (var i = 0; i &lt; profile_arr.length; i++) {

                    this._createOnChangeScriptForDependee(catSysId, profile_arr[i], "serviceVar");
                }
            }

        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts.setMultiProfileServiceVariables. Error:- " + e);
        }
    },

    _onChangeScripts: function (variaJSON, catSysId) {
        try {
            for (var i in variaJSON) {
                this._createOnChangeScript(i, catSysId);
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._onChangeScripts. Error:- " + e);
        }
    },

    _createOnChangeScript: function (varSysId, catSysId) {
        try {
            var grCatalogScript = new GlideRecord("catalog_script_client");
            grCatalogScript.addEncodedQuery("cat_item=" + catSysId + "^name=Fetch values OnChange^type=onChange^cat_variableLIKEIO:" + varSysId);
            grCatalogScript.query();
            if (!grCatalogScript.next()) {
                // All
				//CALM-43616_ Client Script Optimization
                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Fetch values OnChange",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": '' + catSysId,
                    "cat_variable": "IO:" + varSysId,
                    "active": true,
                    "order": 1000,
                    "description": "This script is auto created thorugh runtime module for fetching values.",
                    "applies_catalog": "true",
                    "ui_type": "10",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { var portal_check; getPortalCheck(getParameterValue(\'portal_check\')); function getParameterValue(name) { var url = top.location.href; url = decodeURIComponent(url); return url.includes(name); } function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { if (!sessionStorage[\'varValues\']) { reg.switchStatusToStandBy(); return; } var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control.id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { new GlideModal().get(\'loader\').destroy(); reg.switchStatusToStandBy(); return; } function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { if (i + \'\' == control.id + \'\') continue; var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { if (control.id + \'\' == k) { continue; } var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); if (g_form.getValue(\'default_profile\') != \'\') var profile = g_form.getValue(\'default_profile\').trim(); else var profile = \'runbook\'; var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control.id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', profile), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { new GlideModal().get(\'loader\').destroy(); reg.switchStatusToStandBy(); var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; if (control.id + \'\' == sys_id) { continue; } var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); if (row.value != \'undefined\') g_form.setValue(sys_id, row.value); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } if (row.value != \'undefined\') g_form.setValue(sys_id, row.value); } if (row.state == \'ERROR\') { g_form.clearOptions(sys_id); g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } var loadingHTML = \"&lt;div class=\'loading-container\'&gt;&lt;div class=\'loading-indicator icon-loading icon-lg\'&gt;&lt;/div&gt;&lt;/div&gt;\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching variables...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); if (g_form.getValue(\'default_profile\') != \'\') var profile = g_form.getValue(\'default_profile\').trim(); else var profile = \'runbook\'; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse, null, loadingDialog); } else { try { if (!sessionStorage[\'varValues\']) { reg.switchStatusToStandBy(); return; } var control_id = \'" + varSysId + "\'; var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control_id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { reg.switchStatusToStandBy(); return; } console.log(oldValue); console.log(newValue); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); if (g_form.getValue(\'default_profile\') != \'\') var profile = g_form.getValue(\'default_profile\').trim(); else var profile = \'runbook\'; var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control_id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', profile), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { reg.switchStatusToStandBy(); var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' &amp;&amp; (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); if (row.value[0] != \'undefined\') g_form.setValue(sys_id, row.value[0]); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k &lt; row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } if (row.value != \'undefined\') g_form.setValue(sys_id, row.value); } row.state == \'ERROR\' &amp;&amp; g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } var cat_sys_id = g_form.getUniqueValue(); if (g_form.getValue(\'default_profile\') != \'\') var profile = g_form.getValue(\'default_profile\').trim(); else var profile = \'runbook\'; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse); } catch (e) { reg.switchStatusToStandBy(); console.log(\'Fetch values OnChange\' + e); } } } }";
                onChangecatalogClientScript.addScript([this.genUniqueScriptIdTemplate(), this.getLoadingRegistryScriptTeamplate({ shouldRegistry: true }), onChangeScript].join('\n'));
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(OnChangeCatalogScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue("sys_policy", this.protected_var);
                    grChange.update();
                }
            }
        } catch (e) {
            this.logger.error("Exception caught inside Nutanix_ConfigureSettingScripts._createOnChangeScript. Error:- " + e);
        }
    },

    // calm 3.2 Envirment task

    fetchProfilesBasisOnEnvironment: function () {
        try {
            var body = new Object();
            var profile = [];
            body["api_version"] = "3.0";
            var metadata = {};
            var api_info;
            if (this.getParameter('sysparm_type') + "" == "x_nuta2_nutanix_ca_nutanix_marketplaceitems") {
                metadata.kind = "marketplace_item";
                api_info = "calm_marketplace_items";
            } else {
                metadata.kind = "blueprint";
                api_info = "blueprints";
            }
            metadata["categories"] = {};
            //sysparm_blueprint
            var project_reference = {};
            project_reference["kind"] = "project";
            project_reference["name"] = this.getParameter("sysparm_pro") + "";
            project_reference["uuid"] = this.getParameter("sysparm_proValue") + "";
            metadata["project_reference"] = project_reference;

            body["metadata"] = metadata;
            var specs = {};
            var environment_profile_pairs = [];
            var environment = {};
            environment["uuid"] = this.getParameter("sysparm_env") + "";
            var app_profile = this.getParameter("sysparm_profile");
            app_profile = app_profile.split(",");
            for (var i = 0; i &lt; app_profile.length; i++) {
                var profile_obj = {};
                var gr = new GlideRecord("x_nuta2_nutanix_ca_application_profile");
                if (gr.get(app_profile[i])) {
                    profile_obj.app_profile = {
                        "name": gr.name + ""
                    };
                    profile.push(gr.name + "");
                }
                profile_obj.environment = environment;
                environment_profile_pairs.push(profile_obj);
            }
            specs["environment_profile_pairs"] = environment_profile_pairs;
            var final_profile = [];
            body["spec"] = specs;
            this.appUtil = new Nutanix_Calm_Utils();
            this.logger.debug("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment" + JSON.stringify(body));
            var response = this.appUtil.makeCalmApiCall('POST', '/' + api_info + '/' + this.getParameter("sysparm_blueprint") + "/patch_with_environment/validate", JSON.stringify(body));
            this.logger.debug("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment" + JSON.stringify(response.getBody()) + response.getStatusCode());
            if (response.getStatusCode() + "" == "200" || response.getStatusCode() + "" == "201") {
                response = JSON.parse(response.getBody());
                var environment_profile_pair = response.status.environment_profile_pairs;

                for (var i = 0; i &lt; environment_profile_pair.length; i++) {
                    var name = environment_profile_pair[i].app_profile.name + "";
                    var state = environment_profile_pair[i].state;
                    if (profile.indexOf(name) != -1) {
                        if (state == "valid") {
                            final_profile.push(name);
                        }
                    }
                }
            } else {
                this.logger.error("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment patch_with_environment/validate call failed response statusCode : " + response.getStatusCode());
            }
            return JSON.stringify(final_profile);
        } catch (e) {
            this.logger.error("Nutanix_ConfigureSettingScripts.fetchProfilesBasisOnEnvironment " + e);
        }

    },
    fetchEnvironments: function () {
        this.logger.debug("inside Nutanix_ConfigureSettingScripts.fetchEnvironments");
        var project = this.getParameter("sysparm_project");
        var gr_pro = new GlideRecord("x_nuta2_nutanix_ca_nutanix_project");
        gr_pro.addQuery("uuid", project);
        gr_pro.query();
        var arr = [];
        if (gr_pro.next()) {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_environment");
            gr.addQuery("project", gr_pro.sys_id);
            gr.query();
            while (gr.next()) {
                var obj = {};
                obj["Name"] = (gr.name + "");
                obj["UUID"] = (gr.uuid + "");
                arr.push(obj);
            }
        }
        return (JSON.stringify(arr));
    },

    type: 'Nutanix_ConfigureSettingScripts'

};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-13 16:38:54&lt;/sys_created_on&gt;&lt;sys_id&gt;75c3833837fd2300fdfc097973990e2f&lt;/sys_id&gt;&lt;sys_mod_count&gt;908&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ConfigureSettingScripts&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_75c3833837fd2300fdfc097973990e2f&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;subuhee.fathima&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-06-05 06:49:02&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-396895173</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>d2ab0533c3d4569064971612b4013150</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c31b60000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Nutanix_ConfigureSettingScripts</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>bd32d4e63a2e42107a81ce20891d668d</update_guid>
<update_guid_history>bd32d4e63a2e42107a81ce20891d668d:-396895173,f36a8c2abbea4210cce99cf697af0709:1541991828,9ac4623840ea4a9055765c478ee4f1f7:-1827532486,3794e238e2ea4a902050fa0d0c58c25d:1741069324,f198e5acdfeec69066b6bcced5865c7a:-1827532486,097f7b7bbd1246908e738d97c3346884:1818985590,b6dcf3bbf712469026d1a5f52ee6d1b1:1733378612,63fc63fb219e0690fe0bfde62416132b:-1794283742,5ba90ffbd09a06904bdb99914832f9e4:1341490570,b1190bfb699a0690c9354ed3fb218287:-1007945131,0b080bfbbd9a06902db0f56f01ae0082:-294995560,eaa747bbb39a0690abdaeed323611eda:1843319592,59e447f7dc9a0690e8d7a1be868fbff0:-43654576,e44483b3969a0690c0edb06586eab074:-206993131,bf634b73289a069038dd425b1d188eef:1997910632,3a728b33969a0690891a75f396a8265a:-992762845,b9b04b73b29a0690fa8fca34f07611ac:100090210,ad40c33fde5a0690fccfabbf36b0383b:-781991168,20ef367ff55a0690b549e644dfdd4b7d:-1853174435,118fbe7fe75a06901efbf92cbe87a5c6:675529810,ec1afa6b5592c29014bf63a87cae9143:-1110060670,3bb8b2e75c92c290b56435ac8bf6171e:1935624415,3145e2eb0b12c290f2a8282967f87ebd:438841138,5866ceeb3a5e82902194ab144abc6dcd:1935624415,af25ce6b3d5e8290471b8e78556b3c4b:1485629200,93338e67975e82900cd996630cfb65dc:-1873634953,b2100e23275e8290ba2e1746300afb5c:480252526,d6fc63aea6168e50e6b04c7491790ded:-1318440555,7a152362a4168e508f11216d8622cf98:1111514843,833263ea1ed28e505268bbaed8419f1d:-817924817,6d2e03221d928e5093008aef595a591d:-855517017,b09b03ea43528e508659a7a76909fa36:-2096244097,d037cfa221528e5061e7b8ddcad1d103:-1749940315,0a12ee22809e4e50687098fa5da83470:645247172,bd4b9e26045e4e502870e19a37e2c2d7:-1829480410,d4b516a6441e4e50ed197cc2c5e0a8f2:1330618087,bab5ee56cf1a0e501b214339c60aceed:-1829480410,917f5a9650d60e5010a89daf7e3de0a7:-1270053179,bb4e02deab560e5059e15179ede19873:-468815553,f183ca5ee1160e50b47321fd341f4e6b:1729749,d016b229885a0a505bdc346c8d305fd7:137124732,a5e919fc695206508e6d5acfa0ed4826:-1191712059,c0b75df80b520650422bd163e0c9ce39:1721523340,65586f5c1b16825044c4d0f461c34149:-60125724,7aee0b5cad92825088e6a03875190984:371267667,416ccf62b03d06502d2ca6dd0195f4af:-265561872,1c435cb376c286d0918fb16aadc9a244:-746413890,c0feee006a4d025096750449a20b2526:374464581,f9ade537facfb9106978ba3dcddc1828:-642623914,0e8ed9fff14fb9104dcb4598ee85ce11:-1614845992,71d88909ae64311053f68b2423dd0e28:1911007183,88d3fc09486431106cdd52710a5b3738:265135671,02d7f4a410d0f510944ca9c6e77fdf59:111460339,491a02eaf044f9901a40fa11e6cdaceb:-722733807,5264c392a8f3291097c9e417b6dbd6f6:-1469535998,72c3cb5206f32910c9f5a4f8316e04c1:-1540839693,e19a3cb5c777a110cf05a4bda700fd42:-791408986,5d79b8359477a1101e183c0e18b8970e:-372202499,e4b7bc719577a1109ea2f4616f0e9460:-926239056,a577b0b11777a110a4ccc73e130cc5a9:-452717985,2eb63c7d4337a1104698c29b4c6d12b5:-1485300150,38498b0269abe550d57c814f27179037:-1540839693,93f803823aabe550e6efa63459edb670:1060689081,4df1f60299e7e5504778919a8b8ee076:-1540839693,668403317c6ba550b98c17caf95175ef:396989151,16744735a56ba5503ca4864b332ed244:-1698697435,79d9f3d67b6f6d103c7e0d051550c536:629744176,c7842da194a36550ab65d87231f8c357:396989151,d274e9a142a365505de6e4a8c6b11b08:-1698697435,d41425610da36550c5d289c030aab904:396989151,18c2ad2141a36550d5ba1799b3bf7651:-1698697435,21f52429512f255001705526b1be22d8:396989151,c39b6895826fe150a370fe4bfe903f55:1081431006,ea7b6895cf6fe150244d7643de8f5e50:1979057726,bc7aecd1556fe15083ea94d3a0dc4f59:-1450301454,1fbe551f315be910764c42498836cc29:-235714049,4b1a59d3d35be910e13b2b12cf943448:-581563577,8e54114e68d3a510b72c682b343d098e:-1025505982,dac195c6fbd3a510451bab34e67c1d90:1392472207,ad71d186aad3a51019fcdbf82ce33cea:-778262961,435fc506f4d3a510c5c5bf04510539ba:-955534718,bf401b21491b2510f56407b575a53c15:793677611,10bec3ed30d725106c1a653a82a5165b:877969016,096ccfa9f2d72510bdab571230e9252d:1804851252,e9aac36948d72510cd2fd623c91c24bb:343058889,3c6a8f2929d725107f1aa71c2a31fcd5:-115010054,15d70b25bfd7251063b3b8d5d5743948:-1127158833,e26643e1abd72510684f214a1ad33c18:-2113805883,25054b2115d725101ff7454c135adaa8:280393638,b4ab322540972510ca625cc5e37c39d6:-300825516,c67bfee1e697251087f4ce86f7e5da89:-241425697,f489722113972510cd77aa5f22f04be2:954842893,f6497221949725100181c47589ae46dc:1407467536,40a5f6a9005725103c037dd51b049976:-1156523516,8445fe695c57251046323c6052a23225:674820669,7f53cf553ed7e110143c4b3436a30d65:10928205,a99143d1fed7e110cad746e608a3577b:-577571922,8b71cf9123d7e110b57758e2d426217c:341455560,f190cf517bd7e1102b0f969f064df68f:-577571922,a930035108d7e110005b9b4a78f053c2:-1239415620,28e89689b0d3a110a91bd72ed4e964c3:-737599667,3aa6928507d3a11043a8d34ee6bb6485:254820562,abf41a852cd3a1105a8ba85b6fdcc347:-737599667,1b131641c4d3a110170b56677e73cee2:1622448362,b47f714df253a11013cb10e5f231626f:1977271231,ae0f1d0dd0df61107abed795803a770e:-1205381741,21ee59c9b7df6110872f35bb97c68d0d:1263109705,379d5d89d6df611066327387427becf4:-1756220657,364c9d4917df6110e9cf5e1e8c50f27f:-128724505,b8cb19496adf6110c1bfc2c8afa934cf:1586022927,c9dad985dedf61106bc613e56565d18f:1382706229,f43ad5859adf6110b6f96e51e501d65c:-809998929,585691c1a8df61102aaa12117850ba01:-1059471259,3915d94182df6110d9700d04f5fa9c1a:-772411239,e694d941b3df6110943353b9d507d211:-1038745320,67345d01badf611005476f1f3fdf6d57:-1574943496,1e12158d5d9f6110bb86e8b3e9b4a930:-603508892,82f1158d769f61107cdc27668b1438f6:949575006,33b0594de19f6110874ba34fbc122fc4:-1354719672,1e3f0d89ac9f61100d8817ba8ae30a3f:1462522587,5eadc109089f6110d975c260f1f4589a:598504177,d31d09c5279f61107a26b82b1737fe87:1294073684,8e7b4985529f6110b34d17312b438baf:928595654,f0e2f8014adb61100127b68dd0bd1342:-1551754645,f442f4cd949b61102a2e54ee9babb2b9:-1418898041,b4e13ccdce9b61104d60930ae3edaf20:-844022553,54a1f4cd569b6110d313111cd0f3c7db:-946295583,826134cd689b61109d21efbd08accce4:-1645708743,5fbf280dc99b6110b5e8a7ec78ec1a4f:-1457147365,d55fa40dc79b6110084dcbdb8a0108e9:-494687921,16902fa879172110be190cc0eebac4fd:1763466759,702b136c3d5321108f083b0c00a6a0d9:1552812869,0ea45dbf5b4f6510ada398b84b6c82c7:483011420,a7f3917fa54f65105ab142f924ecf57f:1894386002,41c111fb964f6510a5c1907f80848a96:4009220,87cc01f7974f65102249fbb626eed691:-970441694,d10ac137594f65108981c24e1fabaeb2:955178356,a5f8c1f3244f6510630e1afb1d9d8152:-406367736,0a72cdf7d20f651055ea5e18b2bfa3bb:-1544447930,71cb3477780f6510ca8cfa5096d7c2a2:-44231863,831b7c379a0f6510afaee12df776340d:-226059548,fd6838b30a0f6510713afdb5867aeb8c:967819180,623c2cf3f9cb65100ac7245f9f0899ca:506495467,7cba243755cb65108bdd3b4b78bde0d8:604457259,a72e44776bc765109dec2fd0d580f72c:-1385889150,0ebd80773ac7651017ee5020a279c496:1331872022,5a9b847391c76510041f50cc6137931e:-1177082370,df9a4033f2c76510049cf63b4e7291ff:-307576886,176884bf808765100d56ea9a84719095:133163129,a103447b96876510bfc4c9f528067d25:-165991208,b0e6ff87c77e2950971bf5890237b48e:633957320,de45ff87b87e2950e601815aba811fc4:-833047029,c09fe707e0fa29509a918d3aa3a59012:38404853,547f8fbe54b2e5502b6fc42f9cdc2279:-486523067,195f877223b2e550e512a0c7afcc5643:873575893,f21d363ab2fea550bf621b2ac9815b6e:-1527469297,4ad53ef273fea55052483fb9c68cb798:148656488,a9f09fbed425ed1024d7d309c6c81299:1199529788,8c0f458cb74d5110d5f5966269af3bf7:629744176,e5ef7026ad6f54109779aa46c92e7e55:1616147809,3b597156de675410891a2698dcd4ca07:1468196792,3a2bad867d2b1410d9dac4514743f219:1772913191,feaaad86952b1410317f8f1d658bbcec:-1254919706,23abdcf57ce7d0103c5b5edb4a71aecf:1764433557,72df74421feda110d985072d5bf5a2b9:1199529788,8c0f458cb74d5110d5f5966269af3bf7:629744176,59ea94b5f8e7d010ea8299fd9e75887a:-753471165,93730c714ea7d01077140b51ed4d3cfe:-751229948,77330c71fea7d01062b3c14a819bdef8:542176913,e28972216e6d61100f52ee72c5eb059b:1199529788,8c0f458cb74d5110d5f5966269af3bf7:629744176,2d6a3ba93b67d0101ce0751dc9ea10bb:1448084201,fe3251402de9e9100266b1c5e37b904a:1199529788,8c0f458cb74d5110d5f5966269af3bf7:629744176,958d10ccf7895110661e86495c643d37:367565038,9dd15880dd895110c5bd8ad7a1bde407:-2054913837,5fc2c0b77b7811106f5e4876b05071b1:-641420426,34a32f2f3fb4111097a05c60643b48cf:136388183,3b7e1f27b9b411106d7f71f378daf509:-808398699,acf5b393eeec91102b92d931d8ca5f83:-1182559545,3cd3f35f72ac9110f753ff5f609c25fb:-1131125810,db5dab1fa42c911038c140c0ac8d81ef:1819644723,494b2f97462c91106ae8d8c0398b7fe5:-1917829990,f13e971baae891101c82a2174aadbbcd:-1731842079,0ad9c7135aa89110d0c9c1ba74753198:1699229083,eaf6035fed689110a318de2fe0683f70:-1894930737,92fc34898460111004436e2e6aaf7b02:1748882675,1e4a78859a601110ae8090c17972b17c:1557170676,f0ffb5e44ae895108ffdb33ce7c5d664:1165021054,fcbe31a4a5e8951098259fb235889485:366292010,1afd3924d5e8951005a8e74fa39221b4:439623403,6f6bf1609ee895101f2ef30f85080b82:-1882649392,05b0b96cc3e49510f9d4bcdc5be1aac2:-977564148,411a7650cfac551011fbb29081676a6b:-2060464463,1f4836dcb56c5510fd5ca3512a8216f9:-1898561669,fe3cd3322fd05110e5beaa30900f88b9:-1560860263,dbdb3128eb9f01100bf1ea41c6177248:-1265442808,498e69e8bb5f0110f65c2599698f9cd0:2103829318,11ba2928685f011028368ccd6756b300:2048096428,9b37e924da5f0110a5777128913d01b3:-1811595200,467b2e9e708f8110e22723d915345339:1281544086,5706d1f068394110d38572951ba00797:-1533081383,fa6328344db14110b18f161579574dd8:-1036126408,4f5b3ce490390110b85b5ce8d8ff3aa2:-1835000926,5f2b466343d5011007102da10b367e05:1154776333,22820e6bbc950110151495b62a1991c2:-1450961810,eff689b42359c1104a57789d23853dda:-719718641,ccd633e025d1c110434e99dfea636da8:-1572128914,b2343720d2d1c110695c250b269d81f4:-1557723472,b19b0af2a7cd0510e499acae7aebcdcd:-1021389136,b72906fe0c8d05105dbbea0a14e5f680:-1746048289,bfdc7172f58d05108f48ef1cca0e04f2:999632631,05a439f6ad4d0510aedd226afe366ec9:-350649459,9bd7e9fa60450510ff0eb71d30e87671:243876813,3bbf95f240450510899704a97c95dc28:-1493676107,32124ae1c981011050b7b4a82abb3b86:1064885258,66fb712d2241011099f353bb14321bb8:-1125083509,597fd89dc589c110634cdef8dda1a6c1:655176559,67fd505d6089c11014854de3c49e8af0:-1401681679,3dcd98598589c11058deccdf9b36893b:-1669894335,f7ec141dc989c1102c3b135753805dc8:-1990917772,987390d1c189c110a6307d1fa94a971b:553910680,a23194911b89c11004d4421313249131:751941818,5ff01c112989c1104965ac62d2fc3add:-1534333768,fd1f8011ae89c110c2ea8fb8f421fdc6:608088248,d35ccc5d1649c11024d7db089ad4ace2:-144626037,75b513818285c11062f79567526d3efb:-330962538,76caeb30570d01103075bc2834960b6f:-1590155110,fe586b7c73c901109be795e9ebb51a09:1407444795,41ce47f84b4901106ecf0cc76257529e:1000879234,683b873887490110869bb410f077277c:-43145653,03473eb4918501102024dac77fb07712:-263253269,15177eb4328501104f23125a26ada018:-1845256507,77c96a3ccf4501109144689efa952c45:574603085,dae82eb02c450110cd1f4b24d2e5bc3e:2131389145,0a504a70c0410110c96bce61b5df9be7:-312362651,2cafaea4500501101347b4e51a3c92d3:86792661,9257e834d9f48110fc32b6ff5b4f7441:496836417,f4a3ac3077f4811081a27349d3dc4b59:-1415126110,f13d28a2b5a44110f5fa861763061c89:-62100545,643ca86257a44110b28d5594c2d9e903:96850688,4b314f0636a001103963cd0ed0a1b79c:5632736,132df28233a001101bf4029950877c04:864336543,da0bbece9f6001109c896e035b63cba4:2140887889,78dba2022b600110156bf4c580d8bca9:-581039121,1fdd12b5dea00110414622158f515e2a:1647833561,c4020d90b66001101fe3c314448f8e20:1049713611,6568d912f758c110bb18b69b812fe843:-77036213,dc3095d62a18c110f208ace2777a7e60:536234621,50bab81ee794c110fcddac1b08fe0ae6:1175523496,e055158aae1c811024f33f5c88047133:-1172052618,c4c05d4a1cd88110dfa81ca7fcd8e062:1175523496,758af006945881101b6ec589b607a99d:-943865048,a6f93086b9588110f4b9e8ee0bf52aaf:-1070738577,ae29b44652588110ccada7707f4242f3:65176175,a51e6b317c5481108110293c7a1448bd:-1575941386,64db6b3104548110c13a81b6b9d10edd:1742200267,2f0d5b6d43944110f1019ba19686729d:1095392960,4c7dc7215a54411088af7157090c0dc4:-1130007410,eb1dc721b6544110754bd65035bfe6be:-462221425,408b4b6d6d1441107b8f14ad51365cfc:693165633,2e1b476d5b1441102d86c28725c52a20:-462221425,4dd4432912144110aaac1010a2591778:1135487407,498cba2db6d041107b2313663ebd9984:989563233,c9f7ea651c9041106408827fa842efd0:1632814603,e9eb8141291801107a402b78979a8a3b:1844725757,3afac5cdd0d4011074a7c1a0645e4c67:856802844,f227a4cd16540110263a66d663fff08d:1976713850,9d602009ec54011021423f9eddda11b1:608216148,e82ed13c9ac801107547302975cc126e:-411647898,7e9dc1fcc88801100abdb32df5e1a19c:1567832582,6ea16db0582b701036f8a54204fc6189:1135532975,07dc1c6c92e730102d001ba4cba5d6f9:-189094993,ae259680d82b701052dca0dd4edc5a6b:1602311214,84e4de40e62b701028fee03f2efc49ad:-1617296883,60ebc284abe7701055b04f30943f6205:1731675711,ac4b4e8016e77010d3f5d167e370a511:1069318496,d0dd338698973010ce6e96229c148407:456601185,d1bc770631973010ed96b84ff6250918:-735810527,470fe21c6fb3730034e4acd01adada0d:280064304,1f74e65c05737300f2a8b70948dcf622:141017344,92c2e65c1673730063873f246388b01c:678875932,deb09144a3bb7300118aa76ff67e1cba:280064304,ab809544febb73007fe599a694298a95:1494440481,dfee010475bb7300fbd0c7fe88ef533c:1381773573,5791e17b0d637300cb2c9a4ee9a92c3c:-1969894150,830d55b3d463730046ee46cc04b1c961:-669344185,c06452945d337300944c75a29cc639fd:907799312,dfdf3d40633733008df14512dcf03f91:50681350,921c69841cf3330099dd8a667db905e8:535357156,7741214016f33300def83efe3ed33dc8:863150788,18ac51c8feb33300a09410bd02542e0d:230182039,697bdd88a0b33300697bd2125a3dcb36:-1337519963,a84ba53926a33300209ddd97ff9de9bb:-1331551696,987e9db949633300bb915c9d87adb702:-1204987844,db2385a1cbe37300bc260a3783ac72ce:811441335,76da5021a2637300fce7e72131319331:1740202500,a6b59c2dac2373006f8fa06c237c209d:-985102419,b4ff8c69cd237300dee7521539b677ca:1945066666,243be34d00e33300c0aaad712704d52f:1044321641,45c8e74dcee33300d92e77bb6c43198c:1725016939,965e5bc5f3e33300497838e9132be89a:1753245222,d2a1ee7846a33300260bb049db96da53:364212093,6554e2e6fb13330010c64d50b684d29d:-1394626435,0466eb21e1173300acf1ece0e3649503:1778433155,100e33d0015b3300cf0383108c233e45:1131244627,21a4ff94c31b33005f5e71e277e08f3d:-1075620266,891ef1249f57301040c25b3b65fabcd9:1470773915,52e309f6aac4bc109b634cce241323e4:-1164771172,2f83493a14c4bc10a3193bd9a1fe5700:-1785983923,189f08fe9cc0bc105032da0bc7749497:484367703,74ea0f2ecfcc7c10138247c15ca236b3:653844417,56a536224fc07c1001c2cb9d7e381cc0:1854644139,3a4a7a9650083c10c2d6e2a750165773:-1651728514,abbb987db5487810574e9b37df1619ed:213554611,0705d435c04878108b46bed693923961:-1647332622,5ddd00f9fc087810d3f6d7c1f9174ace:16459002,f3b67fedad047810caaa77f8672b595f:-1183035278,fadf222102c8f41011ef0bdc7f9725f6:1582148719,16a7de61bb08f4109bf2ce38855191ad:-1968237729,f47553d9aac4b4106e2f2e13be85082b:-1394259762,b2a0ad11b500b4104eb069ed214419f0:500803982,f7ea0ce42e08f010b6b1c88e69fea749:1820385952,017a33100c08f01072d6343d2ffafb50:1306971744,10ec83c4e848b010f292c978da116ec3:1286648248,84a083cc4d08b010a9097d949f7a1cbc:155489049,ef712608d4c4b010a98a2db971f19035:-2141390013,ad79b5c4bcc0b010ed9198a47f269d8c:1644289389,2559bd009fc0b0108f4f6f6e8dc62a42:43605913,f1c339c071c0b010b93617862211448f:1644289389,1c517d401dc0b010572998b495f7c9c0:-1351097034,ed2291cb4ded241013131dfee3ed461b:1055099831,3953b9cef365a010879f0e61063d4c69:-1189841817,212d2cc80b332300b37707f308e476c1:1474472888,f59628442833230071a89ca6b270db68:1965922265,6ba2a04459332300ca516c1c7858641c:1972821307,d1f91d282127230047fb7bb529b251aa:1875771069,9eb751580623a300728067ec014302b1:735878130,b8bb45103323a300eeb03b9d3723b0a4:2106653218,5f29c95c80ef6300bd14f3f931fa2778:-1905033145,459e8c1c886f63001e5629fe3f399576:6470929,3441c0d0746f6300f6a24017558e6142:1065809142,e0e04490ea6f63009b31fe085a3eaac5:-1024757928,8b8f73c0506f6300fe2f5e3dd5f26376:1406690245,99661f48fdeb63007af502f7381a2bca:-2100029723,c2e17fd7a0fc60100b2c969d15cb9faa:-596981149,f8efe5de95c4a0106fd1b0496026b898:205606953,132e5d1234c4a010bf43a33447b8b39d:-960065880,67bb115eba84a010eadba7979b589813:-21633336,2217d5960b84a0107a5915252dc95b43:1740580877,a6235152e084a0103c33be1f72c3d471:1705107376,9100595a9144a01067ac626f449643cc:-1649855386,9f41499e6504a010f5dd1ee0e278f2bc:1265128700,79cdf146170c60102eeec4d465c7533c:1994581026,5ca73d8eeec86010251b88407087d45d:-1004091363,d7f4f1caa8c86010968c7995dc3be964:935160829,9542350ae5c860101e19fa5a820eefdc:-2130383463,786524427a846010479d5816caf764e5:511704233,14e4684a9844601081b0d4a5d7d885d7:871484670,fad9dc0a484460100bb8a798c573f3cb:-298300494,fcc8900a5744601023d143c315e5a286:1290917975,d9179446d0446010df7ea0068fd3c44b:405614430,b94558c2fb446010dcf7d4febd79b3c3:871484670,fc22d082784460103db73bb425fcf4ac:605359006,1dab840e81046010a1e5ec9fa8115a49:1393768782,c96868b9c1482010e244fd9ac1d53f2a:2121208221,a6981cf5f2482010e6d46b133ba1ba33:1050941749,4184112da4709010023afd0e8912e206:-1304121442,59427715a97c5010253d3162c09cd605:1672077125,0e1c9bc9bd70501026072e2fce04603f:-1696037193,0ef9aac54ffc10109e275ed6d9537e16:-1510549871,16f1d768e9e45410bfef2650e98cae0b:-821684643,0bc5329450a814104c71f33c0add4964:1729157361,39a3ba5432a814103e75e7d88e0f250a:1134027802,9680b21090a81410979ddd72407eef45:1343230461,c26b715c286414101b04e2c8a3da224e:-792562923,cc36bd94f9641410b6794fd209216816:-1031812228,a3cc68845f28d010874bdc545005556f:-421654938,4ed80484ca9f30108c5a532263da1c1a:-1015717029,39f64cc0fa9f3010b0c31550b0412b72:-944841963,32c652f7b3033010d6ed21d2b7962609:-1981002383,1ad65f72b90b3010f9a7c280e80965b1:71175648,ec969f72cc0b3010f5d234a4415db1fa:-787161814,19c824027cc330105702e4e5715a2833:181977564,cdb8a0028ac33010e5638a41c059f590:878489733,3948acce988330101607435cbc8f9cb4:181977564,d638accecc8330108174eda2571e031f:878489733,96fb54c67383301028fc98ddfdfa0fcd:181977564,5999d046d58330102e2b3bd220e05f70:-1240321427,611794c2268330104a105ba2c9604614:1330682240,9b1db30dcd3ef01026a1ecae03c2da04:869483494,09f3ae05bb76f01085bd5a162b751294:-1287226192,947201bc6772b01044d0c26ffc61c719:-1676338982,49228ce095b270101c16fb6c21e4023f:100291377,8cba37c0f97630105284c01756e7b83a:1297901649,aa5e04980e7a30102358101574bc36bb:-1977639425,d04b4b43be223010f74ff32c9b0c19a3:89580177,a89bd053086670106b8387b345c68172:-1622356413,38f410d378267010b4dfd2f7992d61bf:1297901649,bffbc4d73ee270100af6d741531aa743:-283218644,96ef7307b2a270108db445f264562c0d:1770879788,7489ffba12a630104b981df93ee94c48:-283218644,59d43fb218a630107c85a7386af8ed71:-386214135,953ee3b64d663010425407552653a27b:719578912,cd2baf32416630108ccd765c46dc8875:-197045120,99bc62a29da670100b7e918270a82c87:-1944227535,2b93871ca66eb010f68ea22fd0ff653a:-1388879811,c76ebad41e6eb010d387cfb0e30b22ea:-1434594629,43c0eadc9eeab0104c928f65c8cfa4d5:323438201,3a32cad4b4aab01089a62e8095144970:-185496997,244b951e6262f0107286bc316c81cbac:-629611778,0b0b911efa62f010a3e75225892036c8:188965628,93b1548eab2a3010aa06881f9b63f59f:442221279,531e488ae02a3010030dd63392f2b958:1858113204,7db8c4468d2a30101b7036634df427d0:6683022,22e7c006ca2a3010dd9c56a9eb440257:1523465003,f14784820b2a3010566cb5eceac7c3c7:-705088097,df1c0fb907a2301079db16c059ba232d:-1375887699,d6a82fe0df2ab0101d5be6c197aa0e9f:-1019751890,1d07f6685766b01036a4612778ae904d:814125057,86c7b91445e2701081d256795aea5845:-185496997,abb1f19cbaa2701003ac015751fc7bca:-1434594629,34ba695492a27010e3ff08f8ddafcd0a:-185496997,19196d901ea27010081b00198075a1a5:-478095717,5fd765509aa27010049c4feae2952b02:-1094659525,df78dddc4e22701056bbd3212b2902c2:-478095717,85d799dcc6227010772a9e2775487eeb:-1094659525,6ec6955ca5227010390e359116058087:1393159355,bcab0990db2270106ff1674c340818eb:854095903,5d7a705098ee3010bd3fdaff14f30d4d:1295778551,1adc70c06e2630103bd5a96b9ef60623:732818390,5eab7080a1263010db2d6d84a88f3c96:555301104,6f968d76ee9af41082bf910e16021c53:1228556162,30a708320692f41053a07886903548b3:-844798282,0e475f5076d2b010d93745c04605c396:51733474,256dc6f706c63010c903f7a053a17ca7:1287472490,e7297457f24230100088e032c023a9d2:-875994977,790304177d4630105a65ca28d5769e71:-888169842,5ade9dde950ab0100c7a9d3c6f36c7ad:768834964,66a094d60846b01041e707f2ed907bad:885101964,0afd6b4ed3c2b010c70ab9b404ad2374:-806694401,c017c00e164a7010252e5f92de9d1fd1:-1413547629,18a03a39604670100899e82846e96f32:1541915399,9d4a66718a467010ed2e677cc813e405:-1589098125,2c09ee3111467010c685bf2a77b583fe:1350531748,7518aef502c270102157a21fac7eb2fb:-1500906667,f7864a3909427010d52e0b7819ecf611:799521308,9b03652d5b423010b413a1f86b58e53c:262245678,31b7859d6306b010e981cc1e47d64817:-952697311,70407499bcc2b010ac9b8f6b34ccc964:-1594004582,3706e89db182b010e747cd9e4d6ca55a:29910427,93912c990f82b010bafd9dd78bd9da83:285554743,9bf66c0d694670102220a5ff3753e88d:1408259077,04c1ac457b4670103000fd98a33dd0a7:-1851191244,bdff330bbf463010f5c51eaed2dbf154:227489425,a0904734b6827410c8ff724094180594:583777009,e0ce7a30158274104eaaf1067d5db300:-1695776868,06c3faf4b542741032b7c4aa2edaa95c:1008082813,1072f674024274105161f29adfa16f5b:353272535,fdcd1980544eb010ebd84451bf4d1b34:1008082813,42bbf3fbcd753010f9ca67119980e039:636595157,c7dd67ffdd353010c302365f09f7b046:982413717,003839a39dfd301083469e550b0891fe:-362548424,e172d2db157530109c575e535adf29d9:-1605362570,297d8e9746753010c0c9b3bbea6f9ea3:205473453,ff04c21fa53530105b28ae7216bf25df:-1502696353,35a3251f49b13010fb6fd2a29af8f1c7:1483777169,b5dd851be3713010f41281c45bcc8e90:630995029,777c78dfb2313010603f22c9118ff397:1183414632,24f9385f19313010063d041df2f5e080:-536901071,63f0376e4d753010ca28cc0ee87da54d:1950651672,290d6ba6f475301027d15d1ddcc61902:-1661788210,9bbb67e2e1753010dde4f5c7396e6077:1206675116,bc996722d17530103b4514606c4b991d:-1630288804,e2476baeeb353010bc0f1e7eddd2cd43:51754812,e542eb6aa83530103ecc98488a4fc512:-1288230358,c6c1676adb3530105cdff1a4c42d702e:-1727538495,8d0ed366613530103b3adfaee044a961:569929523,44db1b62893530104f12e7942ff05d76:-551091724,399a9feeb0f1301004869cd041441ec9:180536586,9f89d76e77f13010d7211fc8b1b5206b:27666623,44079b2a5ef1301097a59ceae24f93ab:-1970997443,ab95972a0ef1301085d3943a6b28af1e:1459156681,63d31726d7f13010ccafc6a8a62dc34e:-1794063134,99f05762bff13010c41bd078ebe3262b:-146210249,60cc872e91b13010dbf000fbf32bc980:1176793343,ecdacfaa32b13010a24dc3f311911851:398214733,f8f8c7e678b130108584d714225c1d8f:-286509012,a4dbac71e2bd701000cf368fb4b31887:244794233,c51fa3e1aef97010c327fca8c73f94c3:555577919,e93d63a1bcf9701097a5b183ff8074df:1572901573,8630ef2931b970101fccdb1d4fbf0ddd:865771422,e7369761dab970100bfeabbccfa2bfa7:-769224553,68c1df6dbb797010bbe651f0db19a0f3:902474542,2b207834eb353010fa29405f40a3d3d7:-939744409,772e5df9ec4930d074055f262473ba8b:-47649525,279f7208868db8909f15cf3475be4976:1376844555,7a17837727b0b890742131731a5d3a81:-1261384886,661503b306b0b89054305b520663ad8e:1991878203,0e538f3370b0b890c9b34009e0d35c47:1491998702,333d91aba93078905366bd8901d2bf31:648314087</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>DELETE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_8f484cb82f77a1904627de1a2799b60d</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="DELETE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 06:32:32</sys_created_on><sys_id>8f484cb82f77a1904627de1a2799b60d</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.user</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_security_acl display_value="x_nuta2_nutanix_ca_environment_subnet_mtom">0f480cb82f77a1904627de1a2799b6f0</sys_security_acl><sys_update_name>sys_security_acl_role_8f484cb82f77a1904627de1a2799b60d</sys_update_name><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 06:32:32</sys_updated_on><sys_user_role display_value="x_nuta2_nutanix_ca.user" name="x_nuta2_nutanix_ca.user">3376fd254f452b001200e5201310c717</sys_user_role></sys_security_acl_role></record_update>]]></payload>
<payload_hash>1164427696</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>d2ab0533c3d4569064971612b4013153</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30960000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>x_nuta2_nutanix_ca_environment_subnet_mtom.x_nuta2_nutanix_ca.user</target_name>
<type>Access Roles</type>
<update_domain>global</update_domain>
<update_guid>303f71075769421049c7ee020a77312c</update_guid>
<update_guid_history>303f71075769421049c7ee020a77312c:1164427696,dca38d7ca2fba19000363ef95f706f02:-1795847409,c3484cb86677a190af0466e5b6497210:-1795847409</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_nutanix_calm_credential_passphrase</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="passphrase" table="x_nuta2_nutanix_ca_nutanix_calm_credential"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;Passphrase&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;passphrase&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;formula/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value=""&gt;password2&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;255&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_nutanix_calm_credential&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-20 23:42:12&lt;/sys_created_on&gt;&lt;sys_id&gt;c8186cd337fda300fdfc097973990e53&lt;/sys_id&gt;&lt;sys_name&gt;Passphrase&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_nutanix_calm_credential_passphrase&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-01-18 07:53:51&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;virtual_type&gt;script&lt;/virtual_type&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>579332729</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>d2ab4133c3d4569064971612b4013121</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f700000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_calm_credential</table>
<target_name>Credentials.Passphrase</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>b30cacb9b9ffbd10362352daeaddcb70</update_guid>
<update_guid_history>b30cacb9b9ffbd10362352daeaddcb70:579332729,c548a417b3fda300e14a1468bccd41c6:501066259,fa8f78ce67ada1101de08850e279ba6d:-1465273763,c548a417b3fda300e14a1468bccd41c6:501066259,51e83ae9f72d611022d6c5693dd4574c:-1465273763,c548a417b3fda300e14a1468bccd41c6:501066259,3de1958c7ca9e91039cb8fe7e79c5968:-1465273763,c548a417b3fda300e14a1468bccd41c6:501066259</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_documentation_x_nuta2_nutanix_ca_subnet_vpc_name_en</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_documentation element="vpc_name" label="VPC Name" language="en" table="x_nuta2_nutanix_ca_subnet"><sys_documentation action="INSERT_OR_UPDATE"><element>vpc_name</element><help/><hint/><label>VPC Name</label><language>en</language><name>x_nuta2_nutanix_ca_subnet</name><plural>VPC Names</plural><sys_class_name>sys_documentation</sys_class_name><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-05-06 09:53:41</sys_created_on><sys_id>caccdaf8938e8e5090acfa497bba108e</sys_id><sys_mod_count>0</sys_mod_count><sys_name>VPC Name</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_documentation_x_nuta2_nutanix_ca_subnet_vpc_name_en</sys_update_name><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-05-06 09:53:41</sys_updated_on><url/><url_target/></sys_documentation></sys_documentation></record_update>]]></payload>
<payload_hash>157469113</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>d2ab4133c3d4569064971612b4013124</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30f70000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_subnet</table>
<target_name>Subnet.VPC Name</target_name>
<type>Field Label</type>
<update_domain>global</update_domain>
<update_guid>4accdaf8db8e8e5070f56f9a7434a09a</update_guid>
<update_guid_history>4accdaf8db8e8e5070f56f9a7434a09a:157469113</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_2f2b341e37f52300fdfc097973990e10</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_CreateCatalogVariables&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_CreateCatalogVariables&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_CreateCatalogVariables = Class.create();
Nutanix_CreateCatalogVariables.prototype = {
    initialize: function() {

        this.start = 110;
        this.end = 500;
        this.order = 111;
        this.subContainerEnd = 160;
        this.fieldLabels = JSON.parse(gs.getProperty('x_nuta2_nutanix_ca.nutanix.fields.labels.mapping'));

        this.exclusionList = gs.getProperty('x_nuta2_nutanix_ca.exclusion.list') + '';
        this.disabledFields = gs.getProperty('x_nuta2_nutanix_ca.disabled.fields') + '';
        this.integerValidation = gs.getProperty('x_nuta2_nutanix_ca.integerValidationList') + '';
        this.boolValidation = gs.getProperty('x_nuta2_nutanix_ca.booleanValidationList') + '';
        this.profileUUIDSysIDRel = {};
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.diffVar = new Nutanix_ImportApplicationProfiles();
    },
    _invalidateCatalogItem: function(CatSysId) {
        var grCat = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
        grCat.addQuery("blueprint", CatSysId);
        grCat.query();
        while (grCat.next()) {
            // 			grCat.state = "inactive";
            // 			grCat.update();
        }
    },


    _checkServiceVarSync: function(cat_sysID, variableList, serviceName, profileUUID, serviceSysId) {

        var arr_var_current = {};
        var arr_var_updated = {};

        var grCatVar = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
        grCatVar.addQuery('service_name', serviceSysId + "");
        grCatVar.addQuery('type', 'Service');
        grCatVar.addQuery('catalog_item', cat_sysID + "");
        grCatVar.query();
        while (grCatVar.next())
            arr_var_current[grCatVar.uuid] = {
                "variable": grCatVar.variable + "",
                "var_name": grCatVar.variable.question_text + ""
            };

        for (var i in variableList)
            arr_var_updated[variableList[i].uuid] = {
                "var_name": ((variableList[i].label + '').trim() != "") ? variableList[i].label + '' : variableList[i].name + '',
                "var_value": variableList[i].value + ""
            };

        for (var uuid in arr_var_current) {

            if (!(uuid in arr_var_updated) || (uuid in arr_var_updated &amp;&amp; (arr_var_current[uuid].var_name + "" != arr_var_updated[uuid].var_name + ""))) {

                // 				this._invalidateCatalogItem(cat_sysID);

                var column_fields = {};
                column_fields.cat_item = "";
                var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(arr_var_current[uuid].variable + "", column_fields, 'update');
                var grCatVarDel = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
                grCatVarDel.addQuery('catalog_item', cat_sysID + "");
                grCatVarDel.addQuery('uuid', uuid + "");
                grCatVarDel.query();
                while (grCatVarDel.next())
                    grCatVarDel.deleteRecord();
            }
        }

    },

    processCatalogVariables: function(current) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables.processCatalogVariables");
            this.logger.info("Catalog Variable creation started.");
            var cat_sysID = current.parameter + '';

            var profileGR = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation + '');
            profileGR.addQuery('catalog_item', cat_sysID);
            profileGR.query();
            while (profileGR.next()) {
                this.profileUUIDSysIDRel[profileGR.application_profile.uuid + ''] = profileGR.application_profile + '';
            }

            this.logger.debug("Mapping for profile uuid and sys_id created. Relation:- " + JSON.stringify(this.profileUUIDSysIDRel));

            var parsed = JSON.parse(current.payload + '');
            this._createDefaultVariables(cat_sysID);

            this.logger.debug("Created default project, appName and profile variables on catalog item.");

            var filterJSON = this._filterJSONDatatoService(parsed);
            this.logger.debug("FilteredJson received for parsing:- " + JSON.stringify(filterJSON));


            // 			var createSrvcVarScpt = new Nutanix_CreateServiceVariables();
            // 			createSrvcVarScpt.createServiceVariables(filterJSON, cat_sysID);


            this._createContainerStartandEnd('Service Configuration', cat_sysID, 100, 50000, 'normal');

            this.logger.debug("Created Service Configuration Container.");

            this.start = 110;
            this.end = 500;
            this.order = this.start + 1;
            this.subContainerEnd = 160;

            //var projectDetail = parsed.project_list;

            for (var i in filterJSON) {

                var service = filterJSON[i];
                var serviceSysId = this._createContainerStartandEnd(service.name, cat_sysID, this.start, this.end, 'normal');

                this.logger.debug("Created Container for " + service.name);

                this.start = this.end + 10;
                this.end = this.end + 500;

                var service_name = service.name.toLowerCase().replace(/ /g, '_');

                this._parseSubstrate(service.substrate, cat_sysID, service_name, serviceSysId);
                this._parseProfile(service.profile, cat_sysID, service_name, serviceSysId);
                if (parsed.service_definition_list[0].uuid + "" != "singleVm-default-service-uuid")
                    this._parseVariables(service['service'], (service.profile) ? Object.keys(service.profile) : Object.keys(service.substrate), cat_sysID, service_name, serviceSysId);

                this.order = this.start + 1;
                this.subContainerEnd = this.order + 50;
            }

            for (var i = 0; i &lt; parsed.app_profile_list.length; i++) {
                var service_name = parsed.app_profile_list[i].name + '';
                if (parsed.app_profile_list[i].snapshot_config_list) {
                    var snapshotConfigList = parsed.app_profile_list[i].snapshot_config_list;
                    for (var j = 0; j &lt; snapshotConfigList.length; i++) {
                        var serviceSysId = this._createContainerStartandEnd(snapshotConfigList[i].name + '', cat_sysID, this.order, this.order + 3, 'normal');
                        this._createField('snapshot_policy', '', cat_sysID, this.order + 1, snapshotConfigList[i].name, j, serviceSysId, '', '');
                        this._createField('snapshot_local_rule', '', cat_sysID, this.order + 2, snapshotConfigList[i].name, j, serviceSysId, '', '');
                        this.order = this.order + 4;
                    }
                }
            }

            this.logger.info("Variables creatios completed.");
        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables.processCatalogVariables :- Exception caught during processing catalog variables. Error :- " + e);
        }
    },

    _parseSubstrate: function(substrateList, cat_sysID, service_name, serviceSysId) {

        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._parseSubstrate. Parsing substrate fields.");

            // 			var tmpOrder = this.order;

            for (var k in substrateList) {

                var substrate = substrateList[k];

                // 				this.order = tmpOrder;

                this._createSubstrateFieldCreateSpec(substrate.create_spec, cat_sysID, k, service_name, serviceSysId, substrate.editables.create_spec);

                if (substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.block_device_map) {
                    var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.block_device_map) ? substrate.editables.create_spec.resources.block_device_map : '';

                    this._createSubstrateFieldStorage(substrate.create_spec.resources.block_device_map, cat_sysID, k, service_name, serviceSysId, edit);
                }

                if (substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.disks) {
                    var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.disks) ? substrate.editables.create_spec.resources.disks : {};

                    this._createSubstrateFieldDisks(substrate.create_spec.resources.disks, cat_sysID, k, service_name, serviceSysId, edit);
                }

                if (substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.blankDisks) {
                    var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.blankDisks) ? substrate.editables.create_spec.resources.blankDisks : {};

                    this._createSubstrateFieldBlankDisks(substrate.create_spec.resources.blankDisks, cat_sysID, k, service_name, serviceSysId, edit);
                }

                if (substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.networkInterfaces) {
                    var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.networkInterfaces) ? substrate.editables.create_spec.resources.networkInterfaces : {};

                    this._createSubstrateFieldNetworkInterfaces(substrate.create_spec.resources.networkInterfaces, cat_sysID, k, service_name, serviceSysId, edit);
                }

                if (substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.disk_list) {
                    var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.disk_list) ? substrate.editables.create_spec.resources.disk_list : {};

                    this._createSubstrateFieldDiskList(substrate.create_spec.resources.disk_list, cat_sysID, k, service_name, serviceSysId, edit);


                    if (substrate.create_spec.resources.disk_list[0] &amp;&amp; Object.keys(substrate.create_spec.resources.disk_list[0]).toString().includes('data_source_reference')) {
                        var bootIndex = (substrate.create_spec.resources.boot_config &amp;&amp; substrate.create_spec.resources.boot_config.boot_device &amp;&amp; substrate.create_spec.resources.boot_config.boot_device.disk_address &amp;&amp; substrate.create_spec.resources.boot_config.boot_device.disk_address.device_index + '') ? substrate.create_spec.resources.boot_config.boot_device.disk_address.device_index : -1;

                        this._createSubstrateCreateImage(substrate.create_spec.resources.disk_list, cat_sysID, k, service_name, serviceSysId, edit, bootIndex);
                    }
                }

                if (substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.nic_list) {
                    var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.nic_list) ? substrate.editables.create_spec.resources.nic_list : {};

                    this._createSubstrateFieldNicList(substrate.create_spec.resources.nic_list, cat_sysID, k, service_name, serviceSysId, edit);
                }

                if (substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.nw_profile) {
                    var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.nw_profile) ? substrate.editables.create_spec.resources.nw_profile : {};

                    this._createSubstrateFieldNwProfile(substrate.create_spec.resources.nw_profile, cat_sysID, k, service_name, serviceSysId, edit);
                }

                if (substrate.create_spec &amp;&amp; substrate.create_spec.categories) {

                    //	var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.categories)?substrate.editables.create_spec.categories:{};

                    //	this._createSubstrateFieldCategories(substrate.create_spec.categories, cat_sysID, k, service_name, serviceSysId, edit);
                }

                if (substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; (substrate.create_spec.resources.guest_customization || substrate.create_spec.resources.guest_customization + '' == 'null')) {

                    var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.guest_customization) ? substrate.editables.create_spec.resources.guest_customization : {};

                    this._createSubstrateFieldGuestCustomization(substrate.create_spec.resources.guest_customization, cat_sysID, k, service_name, serviceSysId, edit, substrate.create_spec.type + '');
                }

                if (substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.guestCustomization) {

                    var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.guestCustomization) ? substrate.editables.create_spec.resources.guestCustomization : {};

                    this._createSubstrateFieldGuestCustomizationGCP(substrate.create_spec.resources.guestCustomization, cat_sysID, k, service_name, serviceSysId, edit, substrate.create_spec.type + '', substrate.create_spec.resources.tags);
                }

                if (substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.os_profile) {

                    var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.os_profile) ? substrate.editables.create_spec.resources.os_profile : {};

                    this._createSubstrateFieldOsProfile(substrate.create_spec.resources.os_profile, cat_sysID, k, service_name, serviceSysId, edit);
                }

                if (substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.storage_profile) {

                    var edit = (substrate.editables &amp;&amp; substrate.editables.create_spec &amp;&amp; substrate.editables.create_spec.resources &amp;&amp; substrate.editables.create_spec.resources.storage_profile) ? substrate.editables.create_spec.resources.storage_profile : {};

                    this._createSubstrateFieldStorageProfile(substrate.create_spec.resources.storage_profile, cat_sysID, k, service_name, serviceSysId, edit);
                }

                if (substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.sshKeys) {

                    this.order = this.subContainerEnd + 2;
                    this.subContainerEnd = this.subContainerEnd + 2 + 5;
                    var categorySysId = this._createContainerStartandEnd('SSH Keys', cat_sysID, this.order, this.subContainerEnd, 'normal', service_name);
                    this.order = this.order + 1;

                    var metaData = substrate.create_spec.resources.metadata.items;
                    var blockValue = false;


                    for (var data in metaData)
                        if (metaData[data].key + '' == 'block-project-ssh-keys')
                            blockValue = metaData[data].value + '';

                    this._createField('block_project_wide_ssh_key', blockValue, cat_sysID, this.order, service_name, k, serviceSysId, categorySysId, true);


                    this.order = this.order + 1;

                    var editable = substrate.editables.create_spec;

                    var sshKeys = substrate.create_spec.resources.sshKeys;

                    for (var key in sshKeys)
                        this._createField('key_' + key, sshKeys[key], cat_sysID, this.order, service_name, k, serviceSysId, categorySysId, (editable &amp;&amp; editable.resources &amp;&amp; editable.resources.sshKeys) ? editable.resources.sshKeys[key] : '');

                }

                if (substrate.create_spec &amp;&amp; substrate.create_spec.resources &amp;&amp; substrate.create_spec.resources.serviceAccounts &amp;&amp; substrate.create_spec.resources.serviceAccounts[0]) {

                    this.order = this.subContainerEnd + 2;
                    this.subContainerEnd = this.subContainerEnd + 2 + 5;
                    var categorySysId = this._createContainerStartandEnd('API ACCESS', cat_sysID, this.order, this.subContainerEnd, 'normal', service_name);
                    this.order = this.order + 1;

                    var editable = (substrate.editables &amp;&amp; substrate.editables.create_spec) ? substrate.editables.create_spec.resources : '';

                    this._createField('service_account', substrate.create_spec.resources.serviceAccounts[0].email, cat_sysID, this.order, service_name, k, serviceSysId, categorySysId, (editable &amp;&amp; editable.serviceAccounts &amp;&amp; editable.serviceAccounts[0]) ? editable.serviceAccounts[0].email : '');

                    this._createField('scopes', (substrate.create_spec.resources.serviceAccounts[0].scopes.length == 10) ? 'Full Access' : 'Default Access', cat_sysID, this.order, service_name, k, serviceSysId, categorySysId, '');
                }


                this._createSubstrateFieldReadinessProbe(substrate.readiness_probe, cat_sysID, k, service_name, serviceSysId, substrate.editables.readiness_probe);
            }
        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._parseSubstrate :- Exception caught during parsing substrate. Error :- " + e);
        }
    },

    _createSubstrateCreateImage: function(diskList, cat_sysID, profileUUID, serviceName, serviceSysId, editables, bootIndex) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateCreateImage. Parsing Substrate Field Disk/Storage Data.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;
            var categorySysId = this._createContainerStartandEnd('Images', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;

            var i = 0;

            for (var k in diskList) {

                if (diskList[k].data_source_reference) {

                    this.order = this.order + 3;

                    this._createContainerStartandEnd('Image Device ' + i, cat_sysID, this.order, this.order + 2, 'normal', serviceName + '_' + k);

                    this._createOnlyField('image', diskList[k].data_source_reference.name, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                    this._createOnlyField('device_type', diskList[k].device_properties.device_type, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                    this._createOnlyField('device_bus', diskList[k].device_properties.disk_address.adapter_type, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                    this._createOnlyField('bootable', (diskList[k].device_properties.disk_address.device_index + '' == bootIndex + '') + '', cat_sysID, this.order + 1, serviceName + '_' + k, 7);

                    diskList[k].runtime = (editables[k]) ? editables[k] : {};
                    diskList[k].disabled = (editables[k]) ? editables[k] : {};
                    diskList[k].bootable = (diskList[k].device_properties.disk_address.device_index + '' == bootIndex + '') + '';

                }

                i++;
            }

            this._insertCatalogVariableProperties(profileUUID, JSON.stringify(diskList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateCreateImage. Error :- " + e);
        }

    },

    _createSubstrateFieldDiskList: function(diskList, cat_sysID, profileUUID, serviceName, serviceSysId, editables) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldDiskList. Parsing Substrate Field Disk/Storage Data.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;
            var categorySysId = this._createContainerStartandEnd('VDisks', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;

            for (var k in diskList) {
                this.order = this.order + 3;

                this._createContainerStartandEnd('vdisk', cat_sysID, this.order, this.order + 2, 'normal', serviceName + '_' + k);

                if (diskList[k].adapter_type) {

                    this._createOnlyField('adapter_type', diskList[k].adapter_type, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                    this._createOnlyField('device_type', diskList[k].disk_type, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                    this._createOnlyField('size', diskList[k].disk_size_mb, cat_sysID, this.order + 1, serviceName + '_' + k, 6);

                } else if (diskList[k] &amp;&amp; diskList[k].data_source_reference &amp;&amp; diskList[k].data_source_reference.kind == 'image') {

                    continue;

                } else {

                    this._createOnlyField('device_type', diskList[k].device_properties.device_type, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                    this._createOnlyField('device_bus', diskList[k].device_properties.disk_address.adapter_type, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                    this._createOnlyField('size', diskList[k].disk_size_mib, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                }

                if (!diskList[k])
                    diskList[k] = {};

                diskList[k].runtime = (editables[k]) ? editables[k] : {};
                diskList[k].disabled = (editables[k]) ? editables[k] : {};
            }

            this._insertCatalogVariableProperties(profileUUID, JSON.stringify(diskList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldDiskList :- Exception caught during creation of Substrate Field Storage. Error :- " + e);
        }

    },

    _createSubstrateFieldStorageProfile: function(storageProfileList, cat_sysID, profileUUID, serviceName, serviceSysId, editables) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldStorageProfile. Parsing Substrate Field Disk/Storage Data.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;
            var categorySysId = this._createContainerStartandEnd('Storage Profile', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;


            this._createField('use_custom_image', (storageProfileList.image_details.use_custom_image + '' == 'true') ? 'true' : 'false', cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editables.image_details) ? editables.image_details.use_custom_image : '');

            this._createContainerStartandEnd('VM Image Details', cat_sysID, this.order + 1, this.order + 3, 'normal', serviceName + '_' + k);

            this._createField('publisher', storageProfileList.image_details.publisher, cat_sysID, this.order + 2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.image_details) ? editables.image_details.publisher : '');
            this._createField('offer', storageProfileList.image_details.offer, cat_sysID, this.order + 2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.image_details) ? editables.image_details.offer : '');
            this._createField('sku', storageProfileList.image_details.sku, cat_sysID, this.order + 2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.image_details) ? editables.image_details.sku : '');
            this._createField('version', storageProfileList.image_details.version, cat_sysID, this.order + 2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.image_details) ? editables.image_details.version : '');



            this._createField('use_managed_disks', storageProfileList.is_managed, cat_sysID, this.order + 4, serviceName, profileUUID, serviceSysId, categorySysId, (editables.is_managed) ? editables.is_managed : '');

            this._createContainerStartandEnd('OS Disk Details', cat_sysID, this.order + 5, this.order + 7, 'normal', serviceName + '_' + k);

            this._createField('disk_name', storageProfileList.os_disk_details.name, cat_sysID, this.order + 6, serviceName, profileUUID, serviceSysId, categorySysId, (editables.os_disk_details) ? editables.os_disk_details.name : '');
            this._createField('storage_type', storageProfileList.os_disk_details.storage_type, cat_sysID, this.order + 6, serviceName, profileUUID, serviceSysId, categorySysId, (editables.os_disk_details) ? editables.os_disk_details.storage_type : '');
            this._createField('disk_caching_type', storageProfileList.os_disk_details.caching_type, cat_sysID, this.order + 6, serviceName, profileUUID, serviceSysId, categorySysId, (editables.os_disk_details) ? editables.os_disk_details.caching_type : '');
            this._createField('disk_create_options', storageProfileList.os_disk_details.create_option, cat_sysID, this.order + 6, serviceName, profileUUID, serviceSysId, categorySysId, (editables.os_disk_details) ? editables.os_disk_details.create_option : '');


            var categorySysId = this._createContainerStartandEnd('Storage Profile Data Disks', cat_sysID, this.order + 8, this.order + 50, 'normal', serviceName + '');

            this.order = this.order + 9;

            var dataList = storageProfileList.data_disk_list;

            for (var k in dataList) {
                this.order = this.order + 3;

                this._createContainerStartandEnd('disk_config_' + k, cat_sysID, this.order, this.order + 2, 'normal', serviceName + '_' + k);

                this._createOnlyField('disk_name', dataList[k].name, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('storage_type', dataList[k].storage_type, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('disk_caching_type', dataList[k].caching_type, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('size_gb', dataList[k].size_in_gb, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('disk_lun', dataList[k].lun, cat_sysID, this.order + 1, serviceName + '_' + k, 6);

                dataList[k].runtime = (editables.data_disk_list) ? editables.data_disk_list[k] : {};
                dataList[k].disabled = (editables.data_disk_list) ? editables.data_disk_list[k] : {};
            }

            this._insertCatalogVariableProperties(profileUUID, JSON.stringify(dataList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldStorageProfile :- Exception caught during creation of Substrate Field Storage. Error :- " + e);
        }
    },

    _createSubstrateFieldOsProfile: function(osProfileList, cat_sysID, profileUUID, serviceName, serviceSysId, editables) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldOsProfile. Parsing Substrate Field Disk/Storage Data.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;

            if (osProfileList.linux_config) {
                var categorySysId = this._createContainerStartandEnd('OS Profile Script', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
                this.order = this.order + 1;

                this._createField('cloud_init_script', (osProfileList.linux_config.custom_data) ? osProfileList.linux_config.custom_data + '' : '', cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, true);





            } else if (osProfileList.windows_config) {


                var categorySysId = this._createContainerStartandEnd('OS Profiles', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
                this.order = this.order + 1;

                this._createField('provision_windows_guest_agent', osProfileList.windows_config.provision_vm_agent, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_config) ? editables.windows_config.provision_vm_agent : '');
                this._createField('automatic_os_upgrade', osProfileList.windows_config.auto_updates, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_config) ? editables.windows_config.auto_updates : '');

                this._createField('setting_name', (osProfileList.windows_config.additional_unattend_content &amp;&amp; osProfileList.windows_config.additional_unattend_content[0] &amp;&amp; osProfileList.windows_config.additional_unattend_content[0].setting_name) ? osProfileList.windows_config.additional_unattend_content[0].setting_name : '', cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_config &amp;&amp; editables.windows_config.additional_unattend_content &amp;&amp; editables.windows_config.additional_unattend_content[0] &amp;&amp; editables.windows_config.additional_unattend_content[0].setting_name) ? editables.windows_config.additional_unattend_content[0].setting_name : '');

                this._createField('xml_content', (osProfileList.windows_config.additional_unattend_content &amp;&amp; osProfileList.windows_config.additional_unattend_content[0] &amp;&amp; osProfileList.windows_config.additional_unattend_content[0].xml_content) ? osProfileList.windows_config.additional_unattend_content[0].xml_content : '', cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_config &amp;&amp; editables.windows_config.additional_unattend_content &amp;&amp; editables.windows_config.additional_unattend_content[0] &amp;&amp; editables.windows_config.additional_unattend_content[0].xml_content) ? editables.windows_config.additional_unattend_content[0].xml_content : '');

                var windList = (osProfileList.windows_config.winrm_listeners &amp;&amp; osProfileList.windows_config.winrm_listeners[0]) ? osProfileList.windows_config.winrm_listeners[0].protocol : '';

                for (var win = 1; win &lt; osProfileList.windows_config.winrm_listeners.length; win++)
                    windList = "," + osProfileList.windows_config.winrm_listeners[win].protocol;

                this._createField('protocol', windList, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, '');

            }







            var categorySysId = this._createContainerStartandEnd('OS Profile', cat_sysID, this.order + 1, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 2;

            osProfileList = osProfileList.secrets;

            for (var k in osProfileList) {
                this.order = this.order + 4;

                this._createContainerStartandEnd('secrets_' + k, cat_sysID, this.order, this.order + 3, 'normal', serviceName + '_' + k);

                this._createOnlyField('valut_id', (osProfileList[k]) ? osProfileList[k].source_vault_id : '', cat_sysID, this.order + 1, serviceName + '_' + k, 6);

                if (osProfileList[k] &amp;&amp; osProfileList[k].vault_certificates) {
                    for (var w in osProfileList[k].vault_certificates) {

                        this._createOnlyField('certificate_config_url_' + w, osProfileList[k].vault_certificates[w].certificate_url, cat_sysID, this.order + 2, serviceName + '_' + k, 6);
                    }

                    if (!osProfileList[k])
                        osProfileList[k] = {};

                    osProfileList[k].runtime = (editables[k]) ? editables[k] : {};
                    osProfileList[k].disabled = (editables[k]) ? editables[k] : {};

                }
            }

            this._insertCatalogVariableProperties(profileUUID, JSON.stringify(osProfileList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldOsProfile :- Exception caught during creation of Substrate Field Storage. Error :- " + e);
        }
    },

    _createSubstrateFieldGuestCustomization: function(guestCustomization, cat_sysID, profileUUID, serviceName, serviceSysId, editables, providerType) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldGuestCustomization. Parsing Substrate Field Disk/Storage Data.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;

            if ((providerType + '').includes('vmware') || (providerType + '').includes('VMWARE')) { //} guestCustomization.linux_data){

                var categorySysId = this._createContainerStartandEnd('Guest Customization', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
                this.order = this.order + 1;

                this.order = this.order + 3;

                if (guestCustomization.linux_data) {

                    this._createField('hostname', guestCustomization.linux_data.hostname, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data) ? editables.linux_data.hostname : '');
                    this._createField('domain', guestCustomization.linux_data.domain, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data) ? editables.linux_data.domain : '');
                    this._createField('timezone', guestCustomization.linux_data.timezone, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data) ? editables.linux_data.timezone : '');
                    this._createField('hardware_clock_utc', guestCustomization.linux_data.hw_utc_clock, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data) ? editables.linux_data.hw_utc_clock : '');


                    this._createField('dns_primary', guestCustomization.linux_data.dns_primary, cat_sysID, this.order + 2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data) ? editables.linux_data.dns_primary : '');
                    this._createField('dns_secondary', guestCustomization.linux_data.dns_secondary, cat_sysID, this.order + 2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data) ? editables.linux_data.dns_secondary : '');
                    this._createField('dns_tertiary', guestCustomization.linux_data.dns_tertiary, cat_sysID, this.order + 2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data) ? editables.linux_data.dns_tertiary : '');
                    this._createField('dns_search_path', guestCustomization.linux_data.dns_search_path[0], cat_sysID, this.order + 2, serviceName, profileUUID, serviceSysId, categorySysId, (editables.linux_data &amp;&amp; editables.linux_data.dns_search_path) ? editables.linux_data.dns_search_path[0] : '');


                    this.order = this.subContainerEnd + 2;
                    this.subContainerEnd = this.subContainerEnd + 2 + 50;
                    var categorySysId = this._createContainerStartandEnd('Guest Customization DHCP', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
                    this.order = this.order + 1;

                    for (var k in guestCustomization.linux_data.network_settings) {

                        this._createOnlyField('use_dhcp', guestCustomization.linux_data.network_settings[k].is_dhcp, cat_sysID, this.order + 1, serviceName + '_' + k, 6);

                        guestCustomization.linux_data.network_settings[k].runtime = (editables.linux_data &amp;&amp; editables.linux_data.network_settings &amp;&amp; editables.linux_data.network_settings[k]) ? editables.linux_data.network_settings[k] : {};
                        guestCustomization.linux_data.network_settings[k].disabled = (editables.linux_data &amp;&amp; editables.linux_data.network_settings &amp;&amp; editables.linux_data.network_settings[k]) ? editables.linux_data.network_settings[k] : {};

                    }

                    this._insertCatalogVariableProperties(profileUUID, JSON.stringify(guestCustomization.linux_data.network_settings), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

                } else if (guestCustomization.windows_data) {


                    this._createField('predefined_guest_customization', '', cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, '');
                    this._createField('computer_name', guestCustomization.windows_data.computer_name, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data) ? editables.windows_data.computer_name : '');
                    this._createField('full_name', guestCustomization.windows_data.full_name, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data) ? editables.windows_data.full_name : '');
                    this._createField('organization_name', guestCustomization.windows_data.organization_name, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data) ? editables.windows_data.organization_name : '');
                    this._createField('product_id', guestCustomization.windows_data.product_id, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data) ? editables.windows_data.product_id : '');
                    this._createField('timezone', guestCustomization.windows_data.timezone, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data) ? editables.windows_data.timezone : '');
                    this._createField('admin_password', guestCustomization.windows_data.domain_password, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data) ? editables.windows_data.domain_password : '');
                    this._createField('automatically_logon_as_admin', guestCustomization.windows_data.auto_logon, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data) ? editables.windows_data.auto_logon : '');
                    this._createField('num_of_times_to_logon_automatically', guestCustomization.windows_data.login_count, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data) ? editables.windows_data.login_count : '');
                    this._createField('command_list', guestCustomization.windows_data.command_list[0], cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data &amp;&amp; editables.windows_data.command_list) ? editables.windows_data.command_list[0] : '');
                    this._createField('join_a_domain', guestCustomization.windows_data.is_domain, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data) ? editables.windows_data.is_domain : '');
                    this._createField('workgroup', guestCustomization.windows_data.workgroup, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.windows_data) ? editables.windows_data.workgroup : '');


                    this.order = this.subContainerEnd + 2;
                    this.subContainerEnd = this.subContainerEnd + 2 + 50;
                    var categorySysId = this._createContainerStartandEnd('Guest Customization DHCP', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
                    this.order = this.order + 1;

                    for (var k in guestCustomization.windows_data.network_settings) {

                        this._createOnlyField('use_dhcp', guestCustomization.windows_data.network_settings[k].is_dhcp, cat_sysID, this.order + 1, serviceName + '_' + k, 6);

                        guestCustomization.windows_data.network_settings[k].runtime = (editables.windows_data &amp;&amp; editables.windows_data.network_settings &amp;&amp; editables.windows_data.network_settings[k]) ? editables.windows_data.network_settings[k] : {};
                        guestCustomization.windows_data.network_settings[k].disabled = (editables.windows_data &amp;&amp; editables.windows_data.network_settings &amp;&amp; editables.windows_data.network_settings[k]) ? editables.windows_data.network_settings[k] : {};

                    }

                    this._insertCatalogVariableProperties(profileUUID, JSON.stringify(guestCustomization.windows_data.network_settings), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);
                } else {

                    var guestType = (guestCustomization.cloud_init) ? 'Cloud-init' : 'Custom Spec';

                    this._createField('type', guestType, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, 'false');

                    if (guestType == 'Cloud-init') {

                        this._createField('predefined_guest_customization', guestCustomization.customization_name, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, editables.customization_name);
                        if (!guestCustomization.customization_name)
                            this._createField('script', guestCustomization.cloud_init, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, editables.cloud_init);

                    }

                }



            } else {

                var categorySysId = this._createContainerStartandEnd('Guest Customization', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
                this.order = this.order + 1;

                this.order = this.order + 3;

                if (guestCustomization) {
                    var guestType = (guestCustomization.sysprep) ? 'Sysprep' : 'Cloud-init';

                    this._createField('type', guestType, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, 'false');

                    if (guestType == 'Sysprep') {

                        this._createField('install_type', guestCustomization.sysprep.install_type, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, 'false');
                        this._createField('script', guestCustomization.sysprep.unattend_xml, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables) ? editables : '');

                    } else {

                        this._createField('script', guestCustomization.cloud_init.user_data, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables) ? editables : '');

                    }
                } else {

                    this._createField('type', '', cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, 'false');
                    this._createField('install_type', '', cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, 'false');
                    this._createField('script', '', cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables) ? editables : '');
                }


            }

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldGuestCustomization :- Exception caught during creation of Substrate Field Storage. Error :- " + e);
        }

    },

    _createSubstrateFieldGuestCustomizationGCP: function(guestCustomization, cat_sysID, profileUUID, serviceName, serviceSysId, editables, providerType, tags) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldGuestCustomizationGCP. Parsing Substrate Field Disk/Storage Data.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;

            var categorySysId = this._createContainerStartandEnd('Management Optional', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;

            this.order = this.order + 3;

            this._createField('startup_script', guestCustomization.startupScript, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editables.startupScript) ? editables.startupScript : '');

            var groups = (tags.items &amp;&amp; tags.items[0]) ? tags.items[0] : '';

            if (tags.items)
                for (var i = 1; i &lt; tags.items.length; i++)
                    groups = groups + ',' + tags.items[i];


            this._createField('network_tags', groups, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, true);


        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldGuestCustomizationGCP :- Exception caught during creation of Substrate Field Storage. Error :- " + e);
        }

    },

    _createSubstrateFieldCategories: function(categories, cat_sysID, profileUUID, serviceName, serviceSysId, editables) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldCategories. Parsing Substrate Field Disk/Storage Data.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;
            var categorySysId = this._createContainerStartandEnd('Categories', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;

            for (var k in categories) {

                this._createField((k + '').toLowerCase(), categories[k], cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, editables);

                //	this._createOnlyField((k+'').toLowerCase(), categories[k], cat_sysID, this.order+1, serviceName+'_'+k, 6);
            }

            //this._insertCatalogVariableProperties(profileUUID, JSON.stringify(categories), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldCategories :- Exception caught during creation of Substrate Field Storage. Error :- " + e);
        }

    },

    _createSubstrateFieldDisks: function(diskList, cat_sysID, profileUUID, serviceName, serviceSysId, editables) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldDisks. Parsing Substrate Field Disk/Storage Data.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;
            var categorySysId = this._createContainerStartandEnd('Disks', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;

            for (var k in diskList) {
                this.order = this.order + 3;

                this._createContainerStartandEnd('disks_' + k, cat_sysID, this.order, this.order + 2, 'normal', serviceName + '_' + k);

                this._createOnlyField('use_existing', (diskList[k].source) ? true : false, cat_sysID, this.order + 1, serviceName + '_' + k, 7);
                this._createOnlyField('storage_type', diskList[k].initializeParams.diskType, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('source_image', diskList[k].initializeParams.sourceImage, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('size_in_gb', diskList[k].initializeParams.diskSizeGb, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('delete_when_instance_is_deleted', diskList[k].autoDelete, cat_sysID, this.order + 1, serviceName + '_' + k, 7);
                this._createOnlyField('disk', diskList[k].source, cat_sysID, this.order + 1, serviceName + '_' + k, 6);

                if (!diskList[k])
                    diskList[k] = {};

                diskList[k].runtime = (editables[k]) ? editables[k] : {};
                diskList[k].disabled = (editables[k]) ? editables[k] : {};
            }

            this._insertCatalogVariableProperties(profileUUID, JSON.stringify(diskList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldDisks :- Exception caught during creation of Substrate Field Storage. Error :- " + e);
        }

    },

    _createSubstrateFieldBlankDisks: function(diskList, cat_sysID, profileUUID, serviceName, serviceSysId, editables) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldBlankDisks. Parsing Substrate Field Disk/Storage Data.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;
            var categorySysId = this._createContainerStartandEnd('Blank Disks', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;

            for (var k in diskList) {
                this.order = this.order + 3;

                this._createContainerStartandEnd('blank_disks_' + k, cat_sysID, this.order, this.order + 2, 'normal', serviceName + '_' + k);

                this._createOnlyField('disk_type', diskList[k].disk_type, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('disk_name', diskList[k].name, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('size_in_gb', diskList[k].sizeGb, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('delete_when_instance_is_deleted', diskList[k].autoDelete, cat_sysID, this.order + 1, serviceName + '_' + k, 7);

                if (!diskList[k])
                    diskList[k] = {};

                diskList[k].runtime = (editables[k]) ? editables[k] : {};
                diskList[k].disabled = (editables[k]) ? editables[k] : {};
            }

            this._insertCatalogVariableProperties(profileUUID, JSON.stringify(diskList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldBlankDisks :- Exception caught during creation of Substrate Field Storage. Error :- " + e);
        }

    },

    _createSubstrateFieldNetworkInterfaces: function(nicList, cat_sysID, profileUUID, serviceName, serviceSysId, editables) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldNetworkInterfaces.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;
            var categorySysId = this._createContainerStartandEnd('Networking', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;

            for (var k in nicList) {
                this.order = this.order + 3;

                this._createContainerStartandEnd('network_' + k, cat_sysID, this.order, this.order + 2, 'normal', serviceName + '_' + k);

                this._createOnlyField('associate_public_ip_address', nicList[k].associatePublicIP, cat_sysID, this.order + 1, serviceName + '_' + k, 7);
                this._createOnlyField('network', nicList[k].network, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('subnetwork', nicList[k].subnetwork, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('access_configuration_name', (nicList[k].accessConfigs &amp;&amp; nicList[k].accessConfigs[0]) ? nicList[k].accessConfigs[0].name : '', cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('access_configuration_type', (nicList[k].accessConfigs &amp;&amp; nicList[k].accessConfigs[0]) ? nicList[k].accessConfigs[0].config_type : '', cat_sysID, this.order + 1, serviceName + '_' + k, 6);

                if (!nicList[k])
                    nicList[k] = {};

                nicList[k].runtime = (editables[k]) ? editables[k] : {};
                nicList[k].disabled = (editables[k]) ? editables[k] : {};
            }

            this._insertCatalogVariableProperties(profileUUID, JSON.stringify(nicList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldNetworkInterfaces. Error :- " + e);
        }

    },

    _createSubstrateFieldNicList: function(nicList, cat_sysID, profileUUID, serviceName, serviceSysId, editables) {
        try {
            // 			this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldNicList.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;
            var categorySysId = this._createContainerStartandEnd('Network Adapters', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;
            var clusterPosition = '';
            var clusterName = '';
            var grSubnet;
            for (var k in nicList) {
                this.order = this.order + 3;

                if (nicList[k].net_name) {

                    this._createContainerStartandEnd('network_' + k, cat_sysID, this.order, this.order + 2, 'normal', serviceName + '_' + k);

                    this._createOnlyField('adapter_type', nicList[k].nic_type, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                    this._createOnlyField('network_type', nicList[k].net_name, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                } else {

                    if (k == 0) {
                        clusterPosition = this.order + 1;
                        this.order += 1;
                    }
                    if (nicList[k].subnet_reference.uuid) {
                        grSubnet = new GlideRecord(this.appUtil.configuration.table.subnet + '');
                        grSubnet.addQuery('uuid', nicList[k].subnet_reference.uuid);
                        grSubnet.query();
                        if (grSubnet.next())
                            clusterName = grSubnet.cluster_name; //

                    }
                    var subnetRegex = '@@{.*}@@';
                    var reg = new RegExp(subnetRegex);
                    var nicVal = (!reg.test(nicList[k].subnet_reference.uuid + '')) ? nicList[k].subnet_reference.uuid : "";
                    this._createOnlyField('nic_' + (parseInt(k) + 1), '', cat_sysID, this.order + 1, serviceName + '_' + k, 18);
                    if (k == nicList.length - 1) {
                        this._createOnlyField('cluster_name', clusterName, cat_sysID, clusterPosition, serviceName + '', 6);

                    }

                }


                if (!nicList[k])
                    nicList[k] = {};

                nicList[k].runtime = (editables[k]) ? editables[k] : {};
                nicList[k].disabled = (editables[k]) ? editables[k] : {};
            }

            this._insertCatalogVariableProperties(profileUUID, JSON.stringify(nicList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldNicList. Error :- " + e);
        }

    },

    _createSubstrateFieldNwProfile: function(nicList, cat_sysID, profileUUID, serviceName, serviceSysId, editables) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldNwProfile.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;
            var categorySysId = this._createContainerStartandEnd('Network Profiles', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;

            nicList = nicList.nic_list;

            for (var k in nicList) {
                this.order = this.order + 3;

                this._createContainerStartandEnd('nic_' + k, cat_sysID, this.order, this.order + 2, 'normal', serviceName + '_' + k);

                this._createOnlyField('nic_name', nicList[k].nic_name, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('security_group', nicList[k].nsg_name, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('virtual_network', nicList[k].vnet_name, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('subnet', nicList[k].subnet_name, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('public_ip_config_name', (nicList[k] &amp;&amp; nicList[k].public_ip_info) ? nicList[k].public_ip_info.ip_name : '', cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('public_ip_config_adapter_method', (nicList[k] &amp;&amp; nicList[k].public_ip_info) ? nicList[k].public_ip_info.ip_allocation_method : '', cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('public_ip_config_dns_label', (nicList[k] &amp;&amp; nicList[k].public_ip_info) ? nicList[k].public_ip_info.dns_label : '', cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('private_ip_config_allocation_method', (nicList[k] &amp;&amp; nicList[k].public_ip_info) ? nicList[k].private_ip_info.ip_allocation_method : '', cat_sysID, this.order + 1, serviceName + '_' + k, 6);

                if (!nicList[k])
                    nicList[k] = {};

                nicList[k].runtime = (editables[k]) ? editables[k] : {};
                nicList[k].disabled = (editables[k]) ? editables[k] : {};
            }

            this._insertCatalogVariableProperties(profileUUID, JSON.stringify(nicList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldNwProfile. Error :- " + e);
        }

    },

    _parseProfile: function(profileList, cat_sysID, service_name, serviceSysId) {

        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._parseProfile. Parsing profile/deployment varaibles.");
            for (var k in profileList) {
                var prof = profileList[k];

                this._createProfileField(prof, cat_sysID, k, service_name, serviceSysId, prof.editables);
            }
        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._parseProfile :- Exception caught during parsing profile. Error :- " + e);
        }
    },

    _parseVariables: function(serviceVar, profilesUUIDArray, cat_sysID, service_name, serviceSysId) {

        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._parseVariables");
            for (var k in profilesUUIDArray) {
                this._createServiceFieldVariableList(serviceVar.variable_list, cat_sysID, profilesUUIDArray[k], service_name, serviceSysId);
                //this._createServiceFieldPortList(serviceVar.port_list, cat_sysID, profilesUUIDArray[k], service_name, serviceSysId);
            }
        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._parseVariables :- Exception caught during parsing variables. Error :- " + e);
        }
    },

    _createSubstrateFieldCreateSpec: function(specs, cat_sysID, profileUUID, serviceName, serviceSysId, editable) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldCreateSpec. Parsing and creating substrate field variables.");
            var categorySysId = this._createContainerStartandEnd('VM Configuration', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;

            if (specs) {

                if (specs.name || (specs.resources &amp;&amp; specs.resources.name) || (specs.resources &amp;&amp; specs.resources.vm_name)) {

                    var edit = '';

                    if (editable) {
                        if (editable.name)
                            edit = editable.name;
                        else if (editable.resources)
                            edit = (editable.resources.name) ? editable.resources.name : editable.resources.vm_name;
                    }

                    this._createField('name', (specs.name) ? specs.name : (specs.resources.name) ? specs.resources.name : specs.resources.vm_name, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, edit);
                }

                if (specs.host)
                    this._createField('host', specs.host, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.host) ? editable.host : '');

                if (specs.template)
                    this._createField('template', specs.template, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.template) ? editable.template : '');

                if (specs.datastore)
                    this._createField('datastore', specs.datastore, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.datastore) ? editable.datastore : '');

                if (specs.storage_pod)
                    this._createField('storage_pod', specs.storage_pod, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.storage_pod) ? editable.storage_pod : '');

                if (specs.cluster)
                    this._createField('cluster', specs.cluster, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.cluster) ? editable.cluster : '');

                if (specs.address)
                    this._createField('ip_address', specs.address, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.address) ? editable.address : '');





                // 				if(specs.drs_mode)
                // 					this._createField('drs_mode', specs.drs_mode, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.drs_mode)?editable.drs_mode:'');

                // 				if(/* (specs.drs_mode &amp;&amp; specs.drs_mode+''=='true') || */specs.cluster || specs.storage_pod)
                // 					this._createField('drs_mode', true, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.datastore)?editable.datastore:'');
                // 				else if(/* (specs.drs_mode &amp;&amp; specs.drs_mode+''=='false') ||*/ specs.datastore || specs.host)
                // 					this._createField('drs_mode', false, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.datastore)?editable.datastore:'');



                if (specs.cluster || specs.storage_pod || specs.datastore || specs.host || specs.template) {

                    var drsVal = (specs.cluster || specs.storage_pod) ? true : false;

                    this._createField('drs_mode', drsVal, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.drs_mode) ? editable.drs_mode : '');
                    // 					this._createField('host', specs.host, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.host)?editable.host:'');
                    // 					this._createField('template', specs.template, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.template)?editable.template:'');
                    // 					this._createField('datastore', specs.datastore, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.datastore)?editable.datastore:'');
                    // 					this._createField('cluster', specs.cluster, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.cluster)?editable.cluster:'');
                    // 					this._createField('storage_pod', specs.storage_pod, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.storage_pod)?editable.storage_pod:'');
                }








                this.order++;

                var resource = specs.resources;

                for (var i in resource) {

                    if (i == 'security_group_list') {
                        var secStr = (resource[i][0]) ? resource[i][0].security_group_id + '' : '';

                        for (var k = 1; k &lt; resource[i].length; k++)
                            secStr = secStr + ',' + resource[i][k].security_group_id + '';

                        this._createField(i, secStr, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.resources) ? editable.resources[i] : '');
                    } else if (i == 'block_device_map' || i == 'guest_customization' || i == 'guestCustomization') {
                        continue;
                    } else if (i == 'tag_list') {

                        continue;

                        // 						for(var k in resource[i]){
                        // 							this._createField(resource[i][k].key+'', resource[i][k].value+'', cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.resources &amp;&amp; editable.resources[i] &amp;&amp; editable.resources[i])?editable.resources[i]:'');
                        // 						}

                    } else if (i == 'hw_profile') {

                        this._createField('hardware_profile', resource[i].vm_size, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.resources &amp;&amp; editable.resources[i]) ? editable.resources[i].vm_size : '');

                    } else if (resource[i] &amp;&amp; (resource[i].constructor === Object || resource[i].constructor === Array)) {

                        continue;

                    } else if (i == 'zone') {

                        this._createField(i, resource[i], cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.resources) ? editable.resources[i] : '');
                    } else if (this.exclusionList.includes(i) || i == 'vm_name') {
                        continue;

                    } else {
                        this._createField(i, resource[i], cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.resources) ? editable.resources[i] : '');
                    }

                }
            }


        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldCreateSpec :- Exception caught during creation of Substrate Field Specs. Error :- " + e);
        }

    },

    _createSubstrateFieldStorage: function(diskList, cat_sysID, profileUUID, serviceName, serviceSysId, editables) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldStorage. Parsing Substrate Field Disk/Storage Data.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;
            var categorySysId = this._createContainerStartandEnd('Storage', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;

            diskList.root_disk.runtime = (editables &amp;&amp; editables.root_disk &amp;&amp; editables.root_disk.size_gb) ? editables.root_disk.size_gb + '' : 'false';
            diskList.root_disk.disabled = (editables &amp;&amp; editables.root_disk &amp;&amp; editables.root_disk.size_gb) ? editables.root_disk.size_gb + '' : 'false';

            this._createContainerStartandEnd('Root Disk', cat_sysID, this.order, this.order + 2, 'normal', serviceName);

            this._createOnlyField('device_name', diskList.root_disk.device_name, cat_sysID, this.order + 1, serviceName, 6);
            this._createOnlyField('size_gb', diskList.root_disk.size_gb, cat_sysID, this.order + 1, serviceName, 6);
            this._createOnlyField('volume_type', diskList.root_disk.volume_type, cat_sysID, this.order + 1, serviceName, 6);
            this._createOnlyField('delete_on_termination', diskList.root_disk.delete_on_termination, cat_sysID, this.order + 1, serviceName, 7);

            var dataDiskList = diskList.data_disk_list;

            for (var k in dataDiskList) {
                this.order = this.order + 3;

                this._createContainerStartandEnd('ebs', cat_sysID, this.order, this.order + 2, 'normal', serviceName + '_' + k);

                this._createOnlyField('device_name', dataDiskList[k].device_name, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('size_gb', dataDiskList[k].size_gb, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('volume_type', dataDiskList[k].volume_type, cat_sysID, this.order + 1, serviceName + '_' + k, 6);
                this._createOnlyField('delete_on_termination', dataDiskList[k].delete_on_termination, cat_sysID, this.order + 1, serviceName + '_' + k, 7);

                if (!dataDiskList[k])
                    dataDiskList[k] = {};

                dataDiskList[k].runtime = (editables &amp;&amp; editables.data_disk_list &amp;&amp; editables.data_disk_list[k] &amp;&amp; editables.data_disk_list[k].size_gb) ? editables.data_disk_list[k].size_gb + '' : 'false';
                dataDiskList[k].disabled = (editables &amp;&amp; editables.data_disk_list &amp;&amp; editables.data_disk_list[k] &amp;&amp; editables.data_disk_list[k].size_gb) ? editables.data_disk_list[k].size_gb + '' : 'false';
            }

            this._insertCatalogVariableProperties(profileUUID, JSON.stringify(diskList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldStorage :- Exception caught during creation of Substrate Field Storage. Error :- " + e);
        }

    },

    _createSubstrateFieldReadinessProbe: function(connectionList, cat_sysID, profileUUID, serviceName, serviceSysId, editable) {
        try {

            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createSubstrateFieldReadinessProbe. Parsing Connection Probe variables.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;
            var categorySysId = this._createContainerStartandEnd('Connection', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;

            for (var i in connectionList) {

                var connection = connectionList[i];

                if (i == 'login_credential_local_reference') {

                    this._createField('credential', connection.name + '', cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, (editable &amp;&amp; editable.login_credential_local_reference) ? editable.login_credential_local_reference.name : '');

                } else {

                    if (i == 'disable_readiness_probe') {

                        this._createField(i, (connection + '' == 'true') ? false : true, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editable) ? editable[i] : '');
                    } else {

                        this._createField(i, connection + '', cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, (editable) ? editable[i] : '');
                    }

                }

            }
        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createSubstrateFieldReadinessProbe :- Exception caught during creation of Substrate Field Readiness Probe. Error :- " + e);
        }
    },

    _createProfileField: function(profile, cat_sysID, profileUUID, serviceName, serviceSysId, editable) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createProfileField. Parsing profile deployment vairables.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;
            var categorySysId = this._createContainerStartandEnd('Deployment Config', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;

            this._createField('default_replicas', profile.default_replicas, cat_sysID, this.order + 1, serviceName, profileUUID, serviceSysId, categorySysId, editable.default_replicas);
            this._createField('min_number_of_replicas', profile.min_replicas, cat_sysID, this.order + 2, serviceName, profileUUID, serviceSysId, categorySysId, editable.min_replicas);
            this._createField('max_number_of_replicas', profile.max_replicas, cat_sysID, this.order + 3, serviceName, profileUUID, serviceSysId, categorySysId, editable.max_replicas);
        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createProfileField :- Exception caught during creation of profile field. Error :- " + e);
        }
    },

    _createServiceFieldPortList: function(portList, cat_sysID, profileUUID, serviceName, serviceSysId) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createServiceFieldPortList. Parsing Service Field Configuration variables.");

            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;
            var categorySysId = this._createContainerStartandEnd('Port List', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);

            for (var i in portList) {
                this.order = this.order + 1;
                this._createOnlyField('protocol', portList[i].protocol, cat_sysID, this.order + 1, serviceName + '_' + i, 6);
                this._createOnlyField('target_port', portList[i].target_port, cat_sysID, this.order + 1, serviceName + '_' + i, 6);
                this._createOnlyField('endpoint_name', portList[i].endpoint_name, cat_sysID, this.order + 1, serviceName + '_' + i, 6);
            }

            this._insertCatalogVariableProperties(profileUUID, JSON.stringify(portList), 'false', categorySysId, cat_sysID, serviceSysId, categorySysId);

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createServiceFieldPortList :- Exception caught during creation of service field port list. Error :- " + e);
        }
    },

    _createOnlyField: function(name, value, catSysID, order, serviceName, type) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createOnlyField");
            var variable = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
            variable.addEncodedQuery('cat_item=' + catSysID + '^name=' + serviceName + '_' + name + '');
            variable.query();
            var column_fields = {};
            if (variable.next()) {
                column_fields.variable_width = '50';
                column_fields.type = type + '';
                column_fields.default_value = (value) ? value : '';
                if (type + '' == 18) {
                    column_fields.lookup_table = 'x_nuta2_nutanix_ca_subnet';
                    column_fields.lookup_value = 'uuid';
					//Adding Subnet_type FEAT-15844
					column_fields.lookup_label = 'name,cluster_name,subnet_type';
					// Adding ref qualifier to filter the subnets that belonged to a environment
                    column_fields.reference_qual = 'javascript: new x_nuta2_nutanix_ca.Nutanix_FetchConfigureSettingDropdown().getSubnetRefQual(current.variables.default_environment);';
                    column_fields.attributes = 'ref_qual_elements=default_environment';
                    column_fields.include_none = true;

                }
                column_fields.question_text = (this.fieldLabels[name] &amp;&amp; this.fieldLabels[name].label) ? this.fieldLabels[name].label + '' : this._toTitleCase(name.replace(/_/g, ' ')); //'profile_configuration';
                var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(variable.sys_id, column_fields, 'update');

            } else {
                column_fields = {};
                column_fields.type = type + '';
                column_fields.default_value = (value) ? value : '';
                if (type + '' == 18) {
                    column_fields.lookup_table = 'x_nuta2_nutanix_ca_subnet';
                    column_fields.lookup_value = 'uuid';
                    column_fields.lookup_label = 'name,cluster_name';
                    column_fields.include_none = true;
                    column_fields.default_value = '';
                    // Adding ref qualifier to filter the subnets that belonged to a environment
                    column_fields.reference_qual = 'javascript: new x_nuta2_nutanix_ca.Nutanix_FetchConfigureSettingDropdown().getSubnetRefQual(current.variables.default_environment);';
                    column_fields.attributes = 'ref_qual_elements=default_environment';
                }
                column_fields.cat_item = catSysID;
                column_fields.active = true;
                column_fields.question_text = (this.fieldLabels[name] &amp;&amp; this.fieldLabels[name].label) ? this.fieldLabels[name].label + '' : this._toTitleCase(name.replace(/_/g, ' ')); //'profile_configuration';
                column_fields.name = serviceName + '_' + name + '';
                column_fields.order = order;
                column_fields.variable_width = '50';
                var fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');

            }
        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createOnlyField :- Exception caught while adding field in item_option_new table. Error :- " + e);
        }
    },

    _createServiceFieldVariableList: function(variableList, cat_sysID, profileUUID, serviceName, serviceSysId, editable) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createServiceFieldVariableList. Parsing Service variable list.");
            this.order = this.subContainerEnd + 2;
            this.subContainerEnd = this.subContainerEnd + 2 + 50;

            if (variableList.length == 0) {
                this.order = this.order + 1;
                return;
            }

            var categorySysId = this._createContainerStartandEnd('Variables', cat_sysID, this.order, this.subContainerEnd, 'normal', serviceName);
            this.order = this.order + 1;

            this._checkServiceVarSync(cat_sysID, variableList, serviceName, profileUUID, serviceSysId);

            for (var index = 0; index &lt; variableList.length; index++) {

                var edit = (variableList[index].editables &amp;&amp; variableList[index].editables.value == true &amp;&amp; variableList[index].is_hidden == false) ? true : false;
                this._createField(variableList[index].name, variableList[index].value, cat_sysID, this.order, serviceName, profileUUID, serviceSysId, categorySysId, edit, 'serviceVariables', true, variableList[index]);
                this.order = this.order + 1;
            }
        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createServiceFieldVariableList :- Exception caught during creation of service field variables. Error :- " + e);
        }

    },

    _createField: function(name, value, catSysID, order, serviceName, profileUUID, serviceSysId, categorySysId, editable, isServiceVariable, serviceVar, field) {
        try {

            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createField");
            var variable = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
            variable.addEncodedQuery('cat_item=' + catSysID + '^name=' + serviceName + '_' + name + '');
            variable.query();

            var fieldSysd = '';
            var varType = (serviceVar) ? this.diffVar._returnVarType(field) : '';
            var column_fields = {};
            if (variable.next()) {
                column_fields.variable_width = '50';

                if (this.boolValidation.includes(',' + name + ',')) {
                    column_fields.type = '7';
                }
                if (name === 'drs_mode' &amp;&amp; variable.question_text != 'DRS mode') {
                    column_fields.question_text = 'DRS mode';
                }
                if (serviceVar) {
                    column_fields.question_text = (serviceVar &amp;&amp; (field.label + '').trim() != "") ? field.label + '' : field.name + '';
                    column_fields.show_help = true;
                    column_fields.type = varType.type + '';
                    column_fields.tooltip = field.description + '';
                    column_fields.help_text = (field.description + '') ? field.description + '' : '';
                    column_fields.mandatory = (field.is_mandatory + '') ? field.is_mandatory : '';
                    if (varType.type == 21) {
                        column_fields.list_table = this.appUtil.configuration.table.dropDownTable + '';
                        column_fields.attributes = "glide_list";
                    }
                }
                if (name == 'snapshot_policy' || name == 'snapshot_local_rule') {
                    column_fields.type = '18';
                }
                fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable(variable.sys_id, column_fields, 'update');
                if (serviceVar &amp;&amp; (varType.type + '' == '5' || varType.type + '' == '21')) {
                    this.diffVar._updateOtions(fieldSysd, varType.opt, varType.type);
                }

            } else {
                var column_fields = {};
                column_fields.type = ((serviceVar) ? varType.type + '' : this.boolValidation.includes(',' + name + ',') ? 7 : ((name == 'user_data' || name == 'script' || name == 'startup_script' || name == 'cloud_init_script' || name == 'command_list' || name == 'xml_content') ? 2 : 6)) + ''; //
                column_fields.cat_item = catSysID + '';
                column_fields.active = true;
                column_fields.question_text = (serviceVar &amp;&amp; (field.label + '').trim() != "") ? field.label + '' : (this.fieldLabels[name] &amp;&amp; this.fieldLabels[name].label) ? this.fieldLabels[name].label + '' : this._toTitleCase(name.replace(/_/g, ' ')); //'profile_configuration';
                column_fields.name = serviceName + '_' + name + '';
                column_fields.default_value = (value) ? value + '' : '';
                column_fields.variable_width = '50';
                column_fields.tooltip = (serviceVar) ? field.description + '' : '';
                column_fields.order = order;
                if (this.boolValidation.includes(',' + name + ',')) {
                    column_fields.type = '7';
                }
                if (name === 'drs_mode' &amp;&amp; variable.question_text != 'DRS mode') {
                    column_fields.question_text = 'DRS mode';
                }
                if (serviceVar) {
                    column_fields.question_text = (serviceVar &amp;&amp; (field.label + '').trim() != "") ? field.label + '' : field.name + '';
                    column_fields.show_help = true;
                    column_fields.type = varType.type + '';
                    column_fields.tooltip = field.description + '';
                    column_fields.help_text = (field.description + '') ? field.description + '' : '';
                    column_fields.mandatory = (field.is_mandatory + '') ? field.is_mandatory : '';
                    if (varType.type == 21) {
                        column_fields.list_table = this.appUtil.configuration.table.dropDownTable + '';
                        column_fields.attributes = "glide_list";
                    }
                }
                if (name == 'snapshot_policy' || name == 'snapshot_local_rule') {
                    column_fields.type = '18';
                }
                fieldSysd = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                if (serviceVar &amp;&amp; (varType.type + '' == '5' || varType.type + '' == '21')) {
                    this.diffVar._updateOtions(fieldSysd, varType.opt, varType.type);
                }

            }

            this._insertCatalogVariableProperties(profileUUID, value, editable, fieldSysd, catSysID, serviceSysId, categorySysId, isServiceVariable, name, field);
        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createField :- Exception caught wjile adding field in item_option_new table. Error :- " + e);
        }
    },

    _insertCatalogVariableProperties: function(profileUUID, default_value, runtime_config, fieldSysd, catalogSysId, serviceSysId, categorySysId, isServiceVariable, fieldName, field) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._insertCatalogVariableProperties");
            var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            gr.addQuery('application_profile', this.profileUUIDSysIDRel[profileUUID] + '');
            gr.addQuery('catalog_item', catalogSysId + '');
            gr.addQuery('variable', fieldSysd + '');
            gr.query();

            if (gr.next()) {

                var notSupported = (default_value + '' == 'Cloud-init' || default_value + '' == 'Sysprep' || (default_value + '').indexOf('@@') != -1 || (fieldName + '').startsWith('key_') || (this.disabledFields.includes("," + fieldName + ",") &amp;&amp; fieldName + '' != 'name')) ? false : true;
                if (isServiceVariable == "serviceVariables" &amp;&amp; field.is_hidden &amp;&amp; (field.is_hidden + '' != gr.is_hidden + "")) {
                    // 					this._invalidateCatalogItem(catalogSysId);
                    // 					this.logger.info("Deactivated catalog due to private variable field.is_hidden!");
                } //Check Service Varibale.

                if (isServiceVariable == "serviceVariables" &amp;&amp; gr.runtime_config + "" != runtime_config + "") {
                    // 					this._invalidateCatalogItem(catalogSysId);
                    // 					this.logger.info("Deactivated catalog due to private variable runtime_config!");
                }

                if (isServiceVariable == "serviceVariables" &amp;&amp; field.val_type + "" != gr.value_type + "") {
                    // 					this._invalidateCatalogItem(catalogSysId);
                    // 					this.logger.info("Deactivated catalog due to private variable val_type!");
                }

                gr.application_profile = this.profileUUIDSysIDRel[profileUUID] + '';
                gr.catalog_item = catalogSysId + '';
                gr.default_value = (field &amp;&amp; (field.val_type + '' == 'DATE' || field.val_type + '' == 'DATE_TIME')) ? this.diffVar._formttedDateTime(field.value + '', field.val_type + '') : (default_value) ? default_value + '' : ''; //(this.disabledFields.includes(","+fieldName+","))?'Use Calm to set/edit this field':(default_value)?default_value+'':'';
                gr.runtime_config = ((default_value + '').indexOf('@@') != -1 || notSupported + '' == 'false') ? false : runtime_config + '';
                gr.variable = fieldSysd + '';
                gr.isprofilevariable = false;

                gr.isservicevariable = (isServiceVariable == "serviceVariables") ? true : false;

                gr.type = (isServiceVariable == "serviceVariables") ? "Service" : "";
                gr.service_name = serviceSysId + '';
                gr.category_name = categorySysId + '';

                gr.isdisabled = ((default_value + '').indexOf('@@') != -1 || notSupported + '' == 'false') ? true : (runtime_config + '' == 'true') ? false : true; //(runtime_config+'' == 'true') ? false : true;

                gr.issupported = notSupported;

                /**advanced var**/

                gr.value_type = (field) ? field.val_type + '' : this.integerValidation.includes(',' + fieldName + ',') ? 'INT' : "";
                gr.data_type = (field) ? (field.type + '' == "LOCAL" &amp;&amp; field.options &amp;&amp; field.options.type + '' == "PREDEFINED" &amp;&amp; field.options.choices &amp;&amp; (field.options.choices).length &gt; 0) ? "PREDEFINED" : field.type + '' : '';

                /*regex validation*/

                var validation = (field) ? ((field.regex &amp;&amp; field.regex.should_validate) ? field.regex.value + '' : this.diffVar._fieldRegex(field)) : this.integerValidation.includes(',' + fieldName + ',') ? '^[\\d]*$' : "";
                if (field &amp;&amp; gr.data_type + '' == "LOCAL" &amp;&amp; (field.val_type + '' == "DATE" || field.val_type + '' == "DATE_TIME"))
                    validation = this.diffVar._fieldRegex(field);
                gr.field_regex = validation;

                /* End regex Validation */


                //gr.field_regex = (field) ? ((field.regex &amp;&amp; field.regex.should_validate) ? field.regex.value+'' : this.diffVar._fieldRegex(field) ) :  this.integerValidation.includes(','+fieldName+',') ? '^[\\d]*$' : "";
                gr.uuid = (field) ? field.uuid + '' : '';
                gr.is_hidden = ((field) &amp;&amp; field.is_hidden + '' == 'true') ? true : false;
                /**advanced var**/

                if (isServiceVariable == "serviceVariables") {
                    if (field) {
                        gr.field_json = JSON.stringify(field);
                    }
                }

                gr.update();

                this.logger.debug("Updated the entry of variable " + gr.variable.name + " with default value and runtime in " + gr.catalog_item.name);

            } else {

                var notSupported = (default_value + '' == 'Cloud-init' || default_value + '' == 'Sysprep' || (default_value + '').indexOf('@@') != -1 || (fieldName + '').startsWith('key_') || (this.disabledFields.includes("," + fieldName + ",") &amp;&amp; fieldName + '' != 'name')) ? false : true;
                //added (default_value+'').indexOf('@@') != -1 
                gr.initialize();
                gr.application_profile = this.profileUUIDSysIDRel[profileUUID] + '';
                gr.catalog_item = catalogSysId + '';
                gr.default_value = (field &amp;&amp; (field.val_type + '' == 'DATE' || field.val_type + '' == 'DATE_TIME')) ? this.diffVar._formttedDateTime(field.value + '', field.val_type + '') : (default_value) ? default_value + '' : ''; //(this.disabledFields.includes(","+fieldName+","))?'Use Calm to set/edit this field':(default_value)?default_value+'':'';
                gr.runtime_config = ((default_value + '').indexOf('@@') != -1 || notSupported + '' == 'false') ? false : runtime_config + '';
                gr.variable = fieldSysd + '';
                gr.isprofilevariable = false;

                gr.isservicevariable = (isServiceVariable == "serviceVariables") ? true : false;
                gr.type = (isServiceVariable == "serviceVariables") ? "Service" : "";
                gr.service_name = serviceSysId + '';
                gr.category_name = categorySysId + '';
                gr.isdisabled = ((default_value + '').indexOf('@@') != -1 || notSupported + '' == 'false') ? true : (runtime_config + '' == 'true') ? false : true; //(runtime_config+'' == 'true') ? false : true;

                gr.issupported = notSupported;

                /**advanced var**/

                gr.value_type = (field) ? field.val_type + '' : this.integerValidation.includes(',' + fieldName + ',') ? 'INT' : "";
                gr.data_type = (field) ? (field.type + '' == "LOCAL" &amp;&amp; field.options &amp;&amp; field.options.type + '' == "PREDEFINED" &amp;&amp; field.options.choices &amp;&amp; (field.options.choices).length &gt; 0) ? "PREDEFINED" : field.type + '' : '';

                /*regex validation*/

                var validation = (field) ? ((field.regex &amp;&amp; field.regex.should_validate) ? field.regex.value + '' : this.diffVar._fieldRegex(field)) : this.integerValidation.includes(',' + fieldName + ',') ? '^[\\d]*$' : "";
                if (field &amp;&amp; gr.data_type + '' == "LOCAL" &amp;&amp; (field.val_type + '' == "DATE" || field.val_type + '' == "DATE_TIME"))
                    validation = this.diffVar._fieldRegex(field);
                gr.field_regex = validation;

                /* End regex Validation */

                //gr.field_regex = (field) ? ((field.regex &amp;&amp; field.regex.should_validate) ? field.regex.value+'' : this.diffVar._fieldRegex(field) ) : this.integerValidation.includes(','+fieldName+',') ? '^[\\d]*$' : "" ;
                gr.uuid = (field) ? field.uuid + '' : '';
                gr.is_hidden = ((field) &amp;&amp; field.is_hidden + '' == 'true') ? true : false;
                /**advanced var**/
                if (isServiceVariable == "serviceVariables") {
                    if (field) {
                        gr.field_json = JSON.stringify(field);
                    }
                }

                gr.insert();

                this.logger.debug("Created a entry of variable " + gr.variable.name + " with default value and runtime in " + gr.catalog_item.name);
            }

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._insertCatalogVariableProperties :- Exception caught while adding field in catalog variables properties table. Error :- " + e);
        }

    },

    _createContainerStartandEnd: function(name, catSysID, start, end, type, serviceName) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._createContainerStartandEnd");
            serviceName = (serviceName) ? serviceName + '_' : '';

            var startSysId = '';

            var variable = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
            variable.addQuery('name', (serviceName + name).toLowerCase().replace(/ /g, '_'));
            variable.addQuery('cat_item', catSysID + '');
            //variable.addQuery('order', start);
            variable.query();

            if (variable.next()) {
                startSysId = variable.sys_id + '';
            } else {
                var column_fields = {};
                column_fields.type = '19';
                column_fields.display_title = 'true';
                column_fields.cat_item = catSysID;
                column_fields.active = 'true';
                column_fields.order = start;
                column_fields.question_text = name;
                column_fields.name = (serviceName + name).toLowerCase().replace(/ /g, '_'); //(name+((serviceName)?serviceName:'')).toLowerCase().replace(/ /g, '_'	);//'profile_configuration';
                column_fields.layout = (type) ? type : '2across';
                startSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                column_fields = {};
                column_fields.type = '20';
                column_fields.cat_item = catSysID;
                column_fields.active = 'true';
                column_fields.order = end;
                var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
            }

            return startSysId;

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createContainerStartandEnd :- Exception caught while creating start and end containers. Error :- " + e);
        }
    },

    _filterJSONDatatoService: function(parsed) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._filterJSONDatatoService");
            var sub_deploy_rel = {};
            var deploy_pack_rel = {};
            var app_profile_list = parsed.app_profile_list;

            for (var i = 0; i &lt; app_profile_list.length; i++) {
                var appProfile = app_profile_list[i];
                var deployment_create_list = appProfile.deployment_create_list;

                for (var j = 0; j &lt; deployment_create_list.length; j++) {

                    var deployemnt = deployment_create_list[j];
                    sub_deploy_rel[deployemnt.substrate_local_reference.uuid] = {
                        "name": deployemnt.substrate_local_reference.name,
                        "deployemnt_uuid": deployemnt.uuid,
                        "deployemnt_name": deployemnt.name,
                        "profile_uuid": appProfile.uuid
                    };

                    var package_local_reference_list = deployemnt.package_local_reference_list;
                    for (k = 0; k &lt; package_local_reference_list.length; k++) {
                        var pack = package_local_reference_list[k];
                        if (!deploy_pack_rel[deployemnt.uuid])
                            deploy_pack_rel[deployemnt.uuid] = [];

                        deploy_pack_rel[deployemnt.uuid].push({
                            "name": deployemnt.name,
                            "package_uuid": pack.uuid,
                            "package_name": pack.name
                        });
                    }
                }
            }

            this.logger.debug("Substrate and Deployment mapping created:- " + JSON.stringify(sub_deploy_rel));
            this.logger.debug("Deployment and Package mapping created:- " + JSON.stringify(deploy_pack_rel));

            var packageList = parsed.package_definition_list;
            var pack_serv_rel = {};
            for (var i = 0; i &lt; packageList.length; i++) {

                var pack = packageList[i];
                var uuid = pack.uuid;
                var serviceList = pack.service_local_reference_list;

                for (var j = 0; j &lt; serviceList.length; j++) {
                    var service = serviceList[j];
                    if (!pack_serv_rel[uuid])
                        pack_serv_rel[uuid] = [];

                    pack_serv_rel[uuid].push({
                        "name": pack.name,
                        "serv_name": service.name,
                        "serv_uuid": service.uuid
                    });
                }
            }

            this.logger.debug("Package and Service mapping created:- " + JSON.stringify(pack_serv_rel));

            var variablesJson = {};

            var serviceList = parsed.service_definition_list;
            for (var i = 0; i &lt; serviceList.length; i++) {

                var service = serviceList[i];

                variablesJson[service.uuid] = {};
                variablesJson[service.uuid].service = {};

                variablesJson[service.uuid].service.port_list = service.port_list;
                variablesJson[service.uuid].service.editables = service.editables;
                variablesJson[service.uuid].service.variable_list = service.variable_list;
                variablesJson[service.uuid].name = service.name;
            }

            var profileList = parsed.app_profile_list;
            for (var i = 0; i &lt; profileList.length; i++) {
                var profile = profileList[i];
                var deploymentList = profile.deployment_create_list;

                for (var j = 0; j &lt; deployment_create_list.length; j++) {

                    var deployment = deploymentList[j];
                    var servUUID = "";
                    if (parsed.service_definition_list[0].uuid == "singleVm-default-service-uuid") {
                        servUUID = "singleVm-default-service-uuid";
                    } else {
                        var packUUID = deploy_pack_rel[deployment.uuid][0].package_uuid;
                        servUUID = pack_serv_rel[packUUID][0].serv_uuid;
                    }

                    if (!variablesJson[servUUID].profile)
                        variablesJson[servUUID].profile = {};

                    if (!variablesJson[servUUID].profile[profile.uuid])
                        variablesJson[servUUID].profile[profile.uuid] = {};


                    variablesJson[servUUID].profile[profile.uuid].min_replicas = deployment.min_replicas;
                    variablesJson[servUUID].profile[profile.uuid].max_replicas = deployment.max_replicas;
                    variablesJson[servUUID].profile[profile.uuid].default_replicas = deployment.default_replicas;
                    variablesJson[servUUID].profile[profile.uuid].editables = deployment.editables;
                    variablesJson[servUUID].profile[profile.uuid].variable_list = deployment.variable_list;
                    variablesJson[servUUID].profile[profile.uuid].uuid = profile.uuid;
                    variablesJson[servUUID].profile[profile.uuid].name = profile.name;
                }
            }

            var substrateList = parsed.substrate_definition_list;
            for (var i = 0; i &lt; substrateList.length; i++) {

                var substrate = substrateList[i];

                var deployUUID = sub_deploy_rel[substrate.uuid].deployemnt_uuid;

                var servUUID = "";

                if (parsed.service_definition_list[0].uuid == "singleVm-default-service-uuid") {

                    servUUID = "singleVm-default-service-uuid";
                } else {

                    var packUUID = deploy_pack_rel[deployUUID][0].package_uuid;
                    servUUID = pack_serv_rel[packUUID][0].serv_uuid;
                }

                if (!variablesJson[servUUID].substrate)
                    variablesJson[servUUID].substrate = {};

                if (!variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid])
                    variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid] = {};

                variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid].readiness_probe = substrate.readiness_probe;
                variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid].editables = substrate.editables;
                variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid].create_spec = substrate.create_spec;
                variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid].variable_list = substrate.variable_list;
                variablesJson[servUUID].substrate[sub_deploy_rel[substrate.uuid].profile_uuid].name = substrate.name;

            }

            return variablesJson;
        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._filterJSONDatatoService :- Exception caught while filtering JSON data for variables creation. Error :- " + e);
        }
    },

    _createDefaultVariables: function(cat_sysID) {
        try {
            var settingScript = new Nutanix_ConfigureSettingScripts();
            this.logger.debug("Inside Nutanix_CreateCatalogVariables.proc_createDefaultVariablesessCatalogVariables");
            var target_class_name = '';
            var category = '';
            var catalog_item = new GlideRecord('sc_cat_item');
            if (catalog_item.get(cat_sysID)) {
                target_class_name = catalog_item.sys_class_name + '';
                category = catalog_item.getDisplayValue('category') + '';
            }

            var variableGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
            if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                variableGR.addEncodedQuery('cat_item=' + cat_sysID + '^nameINdefault_project,default_app_name,default_profile,default_environment');

            } else {
                variableGR.addEncodedQuery('cat_item=' + cat_sysID + '^nameINdefault_project,default_app_name,default_profile');
            }


            variableGR.query();

            if (!variableGR.hasNext()) {
                var column_fields = {};
                if (target_class_name == 'x_nuta2_nutanix_ca_runbooks' || category == 'Marketplace Runbook') {
                    column_fields = {};
                    column_fields.type = '5';
                    column_fields.cat_item = cat_sysID + '';
                    column_fields.active = true;
                    column_fields.question_text = 'Endpoint';
                    column_fields.name = 'default_endpoint';
                    column_fields.order = 3;
                    var column_id = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                } else {
                    column_fields = {};
                    column_fields.type = '15';
                    column_fields.cat_item = cat_sysID + '';
                    column_fields.active = true;
                    column_fields.question_text = 'Providers';
                    column_fields.name = 'provider_icons';
                    column_fields.ui_page = gs.getProperty('x_nuta2_nutanix_ca.variableGR.ui_page') + '';
                    column_fields.order = 0;
                    var column_id = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');

                    if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) &gt;= parseFloat("3.2")) {
                        column_fields = {};
                        column_fields.type = '5';
                        column_fields.cat_item = cat_sysID + '';
                        column_fields.active = true;
                        column_fields.question_text = 'Environment';
                        column_fields.name = 'default_environment';
                        column_fields.order = 3;
                        var column_id = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                    }
                    column_fields = {};
                    column_fields.type = '6';
                    column_fields.cat_item = cat_sysID + '';
                    column_fields.active = true;
                    column_fields.question_text = 'Name of the Application';
                    column_fields.name = 'default_app_name';
                    column_fields.mandatory = 'true';
                    column_fields.order = 1;
                    var column_id = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');

                    column_fields = {};
                    column_fields.type = '5';
                    column_fields.cat_item = cat_sysID + '';
                    column_fields.active = true;
                    column_fields.question_text = 'Profile';
                    column_fields.name = 'default_profile';
                    column_fields.order = 4;
                    var column_id = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                }
                column_fields = {};
                column_fields.type = '5';
                column_fields.cat_item = cat_sysID + '';
                column_fields.active = true;
                column_fields.question_text = 'Project';
                column_fields.name = 'default_project';
                column_fields.order = 2;
                var column_id = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
            }

        } catch (e) {
            this.logger.error("Nutanix_CreateCatalogVariables._createDefaultVariables :- Exception caught while creating default variables of blueprint. Error :- " + e);
        }
    },

    _toTitleCase: function(str) {
        try {
            this.logger.debug("Inside Nutanix_CreateCatalogVariables._toTitleCase");
            str = str.toLowerCase().split(' ');
            for (var i = 0; i &lt; str.length; i++) {
                str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);
            }
            return str.join(' ');
            return str;
        } catch (e) {
            this.logger.debug("Nutanix_CreateCatalogVariables._toTitleCase :- Exception caught while changing case of string to title case. Error :- " + e);
        }
    },
    type: 'Nutanix_CreateCatalogVariables'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-17 22:31:26&lt;/sys_created_on&gt;&lt;sys_id&gt;2f2b341e37f52300fdfc097973990e10&lt;/sys_id&gt;&lt;sys_mod_count&gt;455&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_CreateCatalogVariables&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_2f2b341e37f52300fdfc097973990e10&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;subuhee.fathima&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-05-21 10:16:06&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-302947271</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>d6ab0533c3d4569064971612b401314f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c31500000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Nutanix_CreateCatalogVariables</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>bcc17fe9a49e0a5031dc02b6e481d56c</update_guid>
<update_guid_history>bcc17fe9a49e0a5031dc02b6e481d56c:-302947271,7e31fb61d1de0a502fefa0db01d00ded:-905977853,f511bb216eda46d0b1a3b432b6e0de07:-763142382,704e8c2b680e0e1018390f1e22698064:694856859,7765570a7fce46108b40b82ad73f16d3:-2117040218,4835d386c1ce4610a40d29a7eb1a0299:1996790882,9b470feecb79c250ff07f9d4769ddb33:749601426,c6c17ced7bfc06108e39d6308eb98add:-909578920,f930bc2d29fc0610dbe2445c556917e0:598648057,2b63cf2223b906502bcdc07b65f1e30d:-763142382,333dfd4928e4021087eaba929b30a0ba:-1679872919,f9acb1493ce402100edc5f197c6d9a80:971514760,21d979f8319cce9020297ff55bf87a06:1734582989,c533b534e65cce90f4e54c1b0100af2e:2043352552,4423717cfa5cce90b7da4153d1114cb1:363568079,021231f8cc5cce90121f94e0169d2462:-1769877233,ad41752c11d88e905773b601f6a00329:-538139585,398f65a42ed88e90cf5588084832e761:1665500700,5e3d6964e5d88e90cbe3f4f58d45fc70:85530001,c88b25600ad88e905dce454453b4cb80:-227264427,0e0a6120aad88e90438214720369c459:838258566,5f29e1ec79988e903f68b21fe490d98e:-1153844378,fa98612cf0988e90551138bf6af79997:-1814618554,2c96212c8d988e9014c9bd85c93d9a4f:1345606184,ae31a92088988e909e355dd09f6f8494:316469355,4a106dac08588e90849bf5fc39b99b47:1045492875,5b2495a472148e90ea66145ae5a722aa:-1180509537,094b7460ce908e903ffec08cfcc88715:-1109018107,2ffdb4895a601110855cbcab4c0e3ab6:1894929550,87a0b2a293b563004651f222fdd6e99e:-404863281,e020ba6276b563001d87d1ab6346cbfb:-1002654562,ed8fa66208b563004818a4caf2b940a7:306198172,b8cd662258b56300b109c79a5f9d1f74:1523547733,e40d6aeef975630072bed7efc9f18f69:321130654,c3af7402b3eda11030c09ae87dca5142:1960618906,2ffdb4895a601110855cbcab4c0e3ab6:1894929550,138ba6ae8b7563006cc6b1fbe63df8fd:337254969,144aaaea1b756300fa4c2d81e9eea222:1802063413,9739a62e0275630095dd140a2df4e158:1919447395,d2893221026d6110577d37919155d6fb:1960618906,2ffdb4895a601110855cbcab4c0e3ab6:1894929550,9cf6a1a6d9f16300e1cdc48e130050f0:-1125548035,d10215cc2da9e910fead7de41ac3afcd:1960618906,2ffdb4895a601110855cbcab4c0e3ab6:1894929550,8f7125a066e49510fb713cf3e0109e57:-690704510,632f95ac7ea49510296cf0c4f7aec42b:665248814,4ee70b5c9eac551080e476248e89917e:-1096721730,e39a0e66d41011106fd9a2f9169ea346:1843138608,9fd18a5a081411104f732195b6548603:843606819,fc61ce9a7d141110e57f5793806cf1c9:953810154,20228ee1888101101de15c11f6978c15:1201899016,9f1b71e99d410110fbb61e79a1efc1eb:1375599984,a028f92906410110a8c5d3b21ff8a0d5:-1889236364,c2e7f1295f410110a874f2f0545714bc:-834867668,6c077129e8410110ea337495b348e29d:416808247,233b2330aa0d01106b37079f4d08eca5:-935810380,3636637c8dc901102767f3b3acd8870c:762444368,e7b327f8d7c90110acff3710ecce9f16:-1271247109,ad3ed3f497c9011079352e7a211bb4f6:746175865,99ed9bb41ac901101e842fd3d55c8b46:-1094004441,7702977cc24901101e1c0cb637e576d3:1287034407,0881d73c4c4901104fc60d73ba379d08:2095547872,976776f449850110c076789a5cb71975:-884521730,410142b037410110acf94bbf948f40f5:-716593790,997f3dfc1a010110f2d11e6061319f0e:-669081382,7bb07ea872050110d896aa461a7422f4:-1395643755,31977904397c81107b6e3688c17b211d:1710490438,aba635400b78811060d9aaa636516cec:-279460600,0f46a0008fb48110f80b5d58b86ef356:1710490438,90314746b5a001101dbb88333923de9c:-279460600,5956724e4c600110ade414d11be890ae:-508089463,34fb9d1e8d62f01079a72c4ab551f4c4:-1751859196,130db7421ba67010ded6c0d8553ccf99:1199378372,14b04c8e53e630104e03ee23c2c3b373:-497296730,c2e97ff52be630109103d1557e54cfe7:-668022080,111578b9b85e701022919bd440e7663b:197839176,51d4061b34e87450102ad12419daea60:-1080825046,02d551d35be83450a940431947e07036:-1923496502,b43511d32ce834507cfce16af588dff7:-1648404726,3e58d1f91fecf810be8b3e3e3ea15794:1319322639,df471db955ecf810ee77ab755ffb3c5b:-1881201699,188af0fd5ce8f8105ba74bc904c8130d:-929776554,7d87df111be8b8105104e2265515825f:864621987,437657ddbba8b8108b265f86fbee8838:335985101,55261bddc3a8b810501fc931721c7217:-1250497604,3bf4531d6ca8b810108d53f0ef9c5157:-1905729307,5a71531dc7a8b810b7f85a8513b0954e:-929500719,ad3f0f1983a8b8105febb1758ad9df6b:-2110441838,450d471910a8b8103a91c4ce89080998:651880346,afd64f999f68b810413ec8873940f817:1710332330,a9064f997568b8109b3ceddb1983a210:-799191596,82248399d768b81006f2b53bc99ed0e6:-1518492529,49830f198d68b81069affd6dcdd37add:2026421040,7262c719e368b8109b0625d477249ccd:-1514368368,b4124f552268b8103d23cd0783ffe567:-1202998280,84d0c7555768b810889468511f1d5691:-1729432887,7e104b951c68b8100edec0545bfe583a:-2022278103,878eb651f768b81058fd2fef881ffbf5:-47317177,15fb7e917d68b8105a209d7b769ee4f5:91311956,dd2abaddec28b81012fb0303c5d55865:589182181,fa9932110268b810d3e81f149589457e:518865386,95c77e9dd228b810589396842a50eb9b:1505586473,2d277e9db628b810554f1d8688398889:-904353495,335576191528b810a225bee1e24a0de5:-17193924,7da4fa1df728b810d4e24a84f4ab2af6:-413458740,c2e3721d7b28b810fd32011ce3c4e021:287060204,90dfe619c528b8102dd8e34c4aa2afdf:-176892978,a2fea2197928b810ba06567af2c517a6:1099671581,a47b6e157e28b810f126a69b9a74a3b2:-270140386,86f9e2dd94e4b810d4e56a487f74cfe2:-1717302210,f7f3a6d98ae4b81065eedd6ab5d50832:-674487650,1923a6d9a5e4b81019b55a4907ed1085:806897054,1c41861a440f6c1045f09a5bc2ad045b:-1595472172,a9678552c7cb2c107cdfde553ac99ff3:563808280,1fd4c9de018b2c10f96b7886c3447bcb:166394049,8c3a6bedeb4b281074c8f0808a33e070:180485146,9279efe9c44b281004cc3f892331852f:-1058931977,90e327fcedcfe410444b9c88d7e85f5b:374113876,4fa4d9504ecb641085bac843961b725c:1933956211,16c85900ef8be0104715a510907ad35b:-1254233752,39f14c09c6956490331536faf403d6b2:756516883,f8e84c4f83c1ec507009002357537fc4:-1676025091,889b30fa828d6c508163b19f97a74de3:757627196,38589c725f4d6c50b01cb2e4a6455700:-399545352,7a66a7529c8d2c50ab92bd0f294bb421:-2147090540,bd43c0326b052c10d3fdb44c212623a8:-1549357672,d33280beaec12c102a3a8e2fa222d6c1:667937144,c4592865f1cd28506e6cd0a7ac8c3446:-1455871176,b5a5286c06d31c10742ad35620eb56d8:-1312776822,de4639bebdee5450cecf285c0301e298:1678243968,273d6a8216eed0508bda2751704766ea:313034078,6fdca6c250eed05008e2f198662a9691:746607584,3d75c1f96caa90501bc3fbd8446046f7:1628711776,11450db9a0aa9050f951b28054d4baa3:-69022912,cbf867c55aea1050a0e34a0c8c4ad162:-320981770,2114c3c2be58141051d05d9668a09af8:249537967,b1654e0f191f80100e1388cfd2c1c3d5:1860593000,9c2ffd07501f8010d527f37344f91190:-55650950,2f9efd07c81f801075faf09f9fb7aa8a:-1167299967,2d5b710f0bdb8010c8ecb2ad188afb78:-248646205,fa88b187fadb80105018f7eff326dd53:1247398386,96a67547a2db80102b40d78aa522b98e:1360944827,c843398fa09b8010acb68e180a7b6d86:-2055529982,85e27da3a60b0810871c1e7eb1afcf50:1485319167,02303da3960b0810280af53e9fa34b6c:-1354628397,62f6e9a7aac70810d961de0adb313de6:109744573,088565a755c70810e7436e6626b5ac20:124184791,284a3c63c7070810566e0216e64f1d6d:-808262693,49d17463c0c30810fd7130abd53313ce:1266360391,1f0d28a7118308102735a63c64056edc:-1976361752,e2cb2ce716830810b41883c0185f8a24:-1556237187,09c8886b978fc4107205e525315ddfdb:1388761890,5ae6c867cc8fc4104b1f8548b339c0fb:1727062746,bbe58c2b1d8fc41024c26a9ff0ede6dd:-935194465,13b3c0a7488fc41018e9d335ed9de27d:-1570088606,39d28ce3d88fc41028e96fa33aedaa08:-880228356,f2d0c863a08fc410a42a86b1c9abd9ea:203092107,74aff7dbea4fc4107c57d93d6300b2c3:1883816050,37ce7b1ffc4fc410f6bae46f974caeb6:1033952913,6e7c3717d94fc410b45a6dcf489688a2:2044067657,d45b33d3d44fc4109e72d3ddfbb5e391:-1117331717,ecb9b353ea4fc410924a40431e37b701:1593036483,14e6f3dfae0fc41063316c2d4ae2c360:-1508145389,c4f4bf5fc70fc4108d46a4b31bf55793:-426317592,eef2f75b660fc410a62d986c6de424da:-2040145992,02e2bb1b920fc4103a730952b7668540:1002871698,2da13f1ba20fc4101440872969696fb0:-1093912136,49da2f539f0fc41049ab7f10ab20e99a:212694224,db936f57a5cbc4102ae788f67c31a6a9:-1317475934,6ea0a353eacbc410039ce80661ae3c54:1839979819,69f1652ea447441065ee403b3f0d7adf:593775857,d441adaaa0474410d90158bfdc779744:-1274928192,b7702d2672474410288a9a87b30e6910:-2090422090,671f912a4c47441065a9394c41fc164e:1237171595,6f9d9d26764744107d7d13d0f29c0b30:1294412829,3989d12aa407441035a045ea7c8156c1:-507840334,0358d1629347441026776e8c4b7783df:80345685,050bb86e3a83441067d5ade8bb91a3b2:-1748406936,bdb6770a7e470410e0d36806863ddae3:1213799268,a8a2b30ae34704100789669b2f59df92:-1493163526,dae1fb4e16070410d8225ac70bac7bb5:1244932399,3180b782a44704105607432d44aa8558:-1979239442,ac9ea7822f4704107bd5dac3c3ec1c83:418039507,ce24a3cae90704104f935e1f8789a097:325416816,08a2eb0a9e070410a22a27bad9d5bb31:-1059702461,d13d07c6bdc304108cccaee81097f649:699437883,90cb07ce3e830410183f9bc1311f9368:935290312,140837b817cf001012917351e7fa68df:940552476,3e13db70668f0010e0e3947c51198e7c:-1316725787,8fe80b38c04f00104a0342199cce321e:1914071995,043990135dfe4850d6c1a0506691dcf7:-369022853,1874d4ca12b68450bab3d23ac78376a6:-2066996611,cde020b20f1180104f942f62c94e8def:674672493,363b5fba25410410d33ac99ba8481044:-2032387635,d32e04f2fc33f300ff8fc685704277dd:-1644686549,ded8ff8a8bf7730067f4cd6774b275d7:-15774702,c0cc57ca66777300d69b3c60de656f44:-1578549838,bbcb570e0a777300ca52d4818452e6db:-1497867136,7ede7886e1bf3300f9bca113259193ef:-46600300,52afbed9d23733007c7fb13204f33882:-1448961741,9f9a0c9d8d3b3300968529403c2712cf:-1067278893,da5ec64046337300fd807010a51c0d87:1497686986,5b30f2004fff730073806f98d4c5d50b:-647715151,b8bdeac856bf7300fc77f95d3194d475:-1001859175,e30894fbf06f3300e694061d7e52e0ca:624332517,23125c737d6f33004c2009f919e3e46f:-921817607,052766c2a223f300070c58e4c6058cef:-1756341959,6a4d8935cfe3b300e0d3d0ed4c36bf0c:2034910071,6d8b09e11fab7300b1d906a6f33f6a9d:-659092863,ed06d3cd2d2373008cdd01e4a1f9ae13:-28674904,9ce5170d30237300fffda04a46379d9f:-595332612,59b2f58d57eb33007f79de712ef3073a:1310690930,510fe5c1a6eb330011d42ab8e8c60706:-451322510,844dad0d29ab33000113fbea43e93376:-2019305767,748ba50db5ab3300604f79afdb040891:-211786583,e75ab167dd9f33006ebf16b189bf5d67:-1126371746,738726aaf813330002b02da73f17cc70:1272246158,59ae7764ef537300aa33ac6c4b471c9a:-718917716,5f6ffe60051373000a06ee2fb37d12ee:-1800549916,7e5e32a08f137300016c3be9aa102198:-638627137,257cb2a03713730049376be0378eb36b:-1061016966,7f32aeb776477700901df62dcd387100:-478945160,027e06b7b00777008a60493be778f7f3:923603928,bbbc9adf078ff30039dccbb7d1012918:1177106262,132612175e8ff3000650bc62cb255f28:-248146828,802bd30791c7f300ce7c90c2ade3ff48:800291110,5399db839487f3003cc28188d91080f1:32423580,08217ac76b83f300534c5eda61942171:1634133382,6e9dea039d43f30086594137cc4df904:1588255286,6dd726c78303f30051c9f8b9138e9611:-51971455,a48c92cb728fb3008c72cc7aec4570a2:-1610204381,0caab54fcd0fb300f183a729e694bd0a:1443684141,968f49cf124bb30012fe3160922bc828:1325782911,b9ed0183988bb300f312572de7679494:-753487674,43a29af6f283b30032c67145f9bc3ff4:-685547464,414ecaf63d83b3003e740edf63afbcf5:-2004027367,d398c9f6d9cf7300fc077a7f3bd644ac:1826992435,a8e345b22dcf73008d011a682f9f8d7d:1827732143,f9a2c5b21acf7300474f95899d86f4f6:-1144303559,edf32cfa5a4f73003030e1acc9608848:1092351172,ec981f1212cf33005c7f26492e2254a3:-1474359090,d2189f12b3cf3300caff3fcdb9cf9794:-1890638253,d7c9d6c5538f3300d9ced15530f02431:1947959447,294cce782007330097d6d0378f859bfb:583327819,db5b112824873300f7a78c6c59a9edde:1654997300,def591e4ea4733009f94e5fff14a9289:-1838532822,1405916442473300edfb93fd6252a3e5:649427590,f0b45ce4014333002a94758e240f4717:-792922562,73b26b84f78333007d6593cb9e052fec:-511507830,64569f8433433300b39202a544cfc064:-783101979,5886db36567e7300485a598b41f9d071:248968354,7c90cbf290fa73003561df6aa7795559:759515182,e2ce7e36a5fa7300c79375e665fbc729:1094158057,8589faf2f8fa730020f003336f3a5c69:1915723317,d495f63223fa7300955bcd71ecf32406:-968511430,8654727255fa73005376038926256b1a:297574901,4c4332feb8ba730042081802571afb84:-1654952302,d6b08e4c8df23700d62f1f1661116b4b:1464584101,1f5d490cec7237004fbd4efcb4fcee44:1554921448,af1f594b69aa73004ba20b97cbc64ad1:-818725870,07fed903ceea7300045c1c2fe56219b2:2027168081,7c7c6212afa233002b68742609874926:1250510481,f599e29ab8623300b9b7c5fcd279a914:-318469664,5549e2da0b623300e6498995259d506c:-1013072295,26972a9aff6233008acf12d92b003610:-1432248807,12fc4656e02233009efd1287bead6049:-1740063368,eb412a8a27227300905ca2c27a646327:82485929,0a006606d52273005cdb7631d17ad1bc:-565109757,752b82b23c123300d1341dd23097d6e8:-1017446154,511abe35341a3300fbcef412f67cfe33:-526220996,e9d9f2f1b41a3300a3aaf9ad3941ab80:2143219659,9e7532b17d1a33004c9e11e82e7dc322:1628879179,0ff3f27d87d63300d7f8478735a09f0b:95839231,723fa6b565d63300947c0c58abe44cd1:-995715943,36e009034ac23300c7074e7b15278922:694784765,e764fe99ae82b300d64e75ec5f63eb0f:81300591,6a6fa2198982b300a1375feb5ea90605:-1902648625,262f0181624233008cb190a2540bc8d3:-2022745629,4d7fe9fa92b1330005bbbb5b4bf6a406:1064574211,ee54e9fa423133004b1567d356291fb7:682222495,cb6185ba8931330007c736626c8ccbdb:1573300148,86fee2aae9d7b3002aadad6f3081ac1d:-183109857,11bc7770fc1f330078758dcecb9052b3:480412876,35abe9594f697300152a8ebdbbb2e67c:1864499135,b25be51d5669730005352b860e602e18:446087309,dfc6e959c9697300576f782e6dcf30a6:-297147040,ed16ed19f4697300d45a81333556c23d:792894267,04062159c96973004571d9a7bcf5be0a:1489629144,849cea08b925730091b3e24744f88dc8:1672129779,9069f9c4c6a17300cc6d21e9ac67db63:1799896047,1b12744001ed33004bfa1d4ff1620c17:-1382347329,8a8920c475ad33009d64ebe732a7e183:1385076243,dcbf3b9323d573006d0615e02609d92e:1558341906,da7c3fd74f957300a8dcb5900b9f8e10:1796721394,6f893bd74a957300ee2065a0dc41585c:461203270,6411ff9355557300aedb41f681876a8c:-362641508,b6a22f575ad173000b2f9332625fecc6:1317756272,7dd6571f9611730019f2ab7b012474a6:316703778,35697c881f1d3300df99c02aa80ec955:-1174557968,ebe8f488db1d3300f9cf54eb3c81aeb4:70124202,a848b884581d33000b93f3fdfd84f1b1:-1403747481,efd5f884501d3300d74f66a6f9b6cb36:-1879378283,f9737c4ca7d93300bf4813d365abfe4d:-1216986235,ca5227bb19c53300a9c7780f2651f7ea:1585583877,78bf9ff7efc53300411a764ea1102034:-750712504,bf5fd3f735c53300896a2b68a9334e22:-1308217063,b31f17b7dac533008d2b1c782eef1d47:906693158,22ee93772fc533002a100fd9c5247f13:154585901,5e7a13ffdd85330078dc1f2a4e5f7e23:1502757199,f9641b3b4485330085688b94ca3b6a01:-1383371483,035c03ff9a45330047d3757b4661a4e1:599780029,9db0a9efd0053300cfc9a53f7f55f399:606905571,7781647a4bc533006712350adca04612:-1909784081,025bd07a70c53300a39d4b94ea34b9d9:847672115,26833ee1a9c57300caf9f827cec48f3a:1651808006,9d533aa188c57300b998cf2d39eea90e:-127881047,cfcdaa6171857300058286d3506cdd59:1651808006,69adeaedef45730025ca10b8309a09fe:-1133813385,8e8b26e96b457300e1d862c16aa5c7b0:-714227305,b05ab5ed1f817300c8e986f029546cda:62887065,1725e9ad7341730081b3bf39da9ddcef:190375097,969461a9d94173008c072beb4d4d9bba:1826801305,33ea9d65ed4173000455bc1e1aa88923:801149037,0da2cd9512853300dcbc55a13ea456f2:1359836781,73a1cc191dc133002fba7ca8d63e662d:1457211342,920503d34eb0730086a44ddb35028bc8:1300973562,65ecae1bf5307300f1a5625a77170f32:1853418951,57aad6535e3073000fb61022f33a8092:-1018612615,9efe551f117c330023f616849b9f8420:423423026,f6dd159b357c33007fc7a39a070ec5b4:-1038215413,b8b9b64fd6f43300f472852c87f2876e:646474162,3f95350307743300a4873be91637c9fb:1365821127,0e72698b8ff0330000e0c929161f8437:-1277351851,75322d8b74f0330071ebdd4a6642d684:-191464227,c81c510703f0330005bca05e338b93c3:-1864320739,ffe851c3d5f03300d421fa19279c2a41:475898245,470ac1c7b1b0330053549cbdd83468fb:1980234984,31bd8043b5303300d07fd7a35c25e20e:1668930170,016e79f636b833008a150dce168fbef7:-916227237,718b31bad1783300b069e467e9d70296:1733731160,1466b17a867833006a404c0f3e7b7135:75792814,ecb5757afe783300bc864a7ee385ea84:-1709040123,1235793a937833007b59f2771dc6113c:-327716744,37b4fd3adf7833007c0fe2543df487c4:1593078290,1f747d3ab97833006fec64210b4e5e6d:1473845200,1f14b1f6107833001249db60a6ad8812:2013168675,5ad3713a10783300b3059a02d181e3de:9240563,1f93b1f6887833002f2b778c24aadff0:456108736,c142b1f6d7783300c38f5ac39fbf6b08:991181415,6021b976a5783300f318691216124cdd:-986115342,bf1fa176557833006b3d84be3d59875b:886194977,8e71d9725e383300e5e521d30a1bac3c:646474920,193051b22f3833008f5625466e4f06df:-1919543182,a35f01fe9ff433005138c5a6ebdd8e8a:227081092,e8d634f2eef433008ab554c9988cab65:-2087987388,c42570b2fff433006723402c2d7ef725:899571811,1a63687ebc743300cac58b6c5c83be32:1304424216,0040ac727a7433001617253c0575f18d:1941835462,177e18724974330068a9dc91dcc16b8a:-1863367580,7ce284f27ef03300ad71cba4c4385f2f:175095074,adcb376e72b03300b93fb944cadf80ca:-596355144,c6642d11bfbc3300fdbd9b953f7fcbdf:-1261720651,11188745563833008e404330739f4959:1244983755,77ea56cdcb743300d2fd678d874b1cb6:-166661235,3f9d8e85f1743300a27b8b25604f58ab:1128305616,ae2c8e052174330035dd26dde0d9f9f6:1633935052,480c424554743300b4f660d90d2e5410:1764032283,10144a4dd8343300ab0cc3afdfeccc18:1848800031,1629f581d83433007392803e3c715dde:-2022401835,f83e15386a70f3005c593a879279e291:1288664481,fa9d11381e70f300aee6368562007c8f:1195100062,01dc59b4b070f30020543ae155fca1db:-1689842223,fd1c5db4cf70f30073aa42febbf16a18:-1262055311,b1fb5db4ed70f3004bcf088381335913:982825751,9787d9344e30f300c7373ea2bd601e3f:948538085,230a0d785ffcb300e28828c27ff4898c:1245124349,f5bdb870fdfcb300e22baca779c20a25:-2085567940,a53f8834617cb300370033eb3d621bbe:-1820183070,61f96bacc2f8b3006d9dc4adff246105:-2135527418,de9378646434b3008516475491111cd7:-1103384180,8b97a7d0c770b3003fc14041b6811d96:-1887595433,dd2f549c333873001c26d61752a99186:2045996868,6a00ef8cc6347300671532e575c8dbc7:1045586461,2ffed3cc9d347300d92c47a4b843e9fa:-1540737005,6d7953c8983473003586a2079e5df987:-1854365219,3e145f48c93473003472a2fedccfe8fa:-1447708498,4265c30ceff07300bb1308409d3940bb:-2102727131,206ff284c3f07300186e00b9bbc9c34d:1696642819,75d6aa880470730000309642973df73a:-1002004347,af06ea4c8c707300d8ae0d4a929c2fc6:-516821481,39f4a2481a707300083beab6a1a72c9f:778575037,f99d1e04e0707300e14776074e8b69d3:1011058803,90cb164853307300d3e281081fb8f106:497308439,54eada08b23073007aa9d17a0d8dc6c1:689277193,c03a5604a23073003a47586ecf538367:469458611,5b775e4c77fc3300986665b941091bf3:-1383554195,c376528ca0fc33008b6720ab4fd7215a:1235008212,0a36964cbbfc330055d73c8eb24e1d3b:415317186,55851e88affc33002169f62f25f4aa23:-1702446416,11045a0cd1fc330016441398582621da:-1908986280,7dbb0acc85bc330091955d43ae95ce5f:1348083141,ec98c6cc17bc3300a6e388bb63652e39:1511075157,71305dc81dfcb30083d53d22c3eb375a:-554187662,279b414876fcb30091029f0393a27056:-516689868,815bcdc4c0bcb3002418ad3724af384e:1216894669,0c34cdc801bcb3002e5b10cd0c89f183:500379543,3fb5fcc87abcb300be79028a88733e69:1304293644,37b3748c107cb300cb70bb3a9d0523b7:-1551324743,7973bc886278b3006059738aafe67de3:7227247,0231b8448ff8b3000a404e521f2cb2cd:1592483640,898f24c4e33cb30096a8499929d3d36d:2131008149,318dac04f37cb30034effa39a2ed3c28:426201532,8eb2debb7c28b300632ac2ed6b2a4f1a:-637079506,e3fd2223a820b30031b9a3eb59fd4130:-410241832,09d981677c64730027d49e02a3f20e43:1856738640,0d15d3c3b5ac330076bca3123be1ff1b:-2093402587,2d1397476e6c3300a46fb351cef5d307:305833485,abe2d78ba16c3300a5f822b3cb5c1967:319804519,49dccfcb076c3300ff4968c687a92070:-1033478098,882d7a07e86c3300ae7f812a81760a53:-846911904,83dabe833a6c3300bd3070a0aa87b332:876547571,a647d1ff8aa03300f96d01ade4308d26:1796134333,9ee890a3932073004d621ea5a73a769c:1377423975,ff78982fd9ec3300d6f084970674d0f5:536184839,25a3d0eba0ec3300d17d200e8093cfba:1892062005,938190e71dec33003216296892e9a791:993443511,326190e79cec3300c20839e6b02f37e6:1892062005,3f5e046304ec3300a353c05dc599f2cb:-615265483,717140ef316c3300f69111a5512a2b7f:1412560567,70c02222cfe43300cb18fc7cc1fad8ed:496890794,aa12f5c844b72300fe1e45858ef0efc7:1127102654,3e1364c0c03323004119948ecffda9f8:323400285,bee264446c3323009a4d8c91eb7ed313:89401649,0808e096fe532300fb709d02f3941833:-2072060428,92a916be3bf2230029b76e69b0bc0505:265927182,4089ca72c5f22300947666125aa897a9:-572313027,4c5469b6033223001ee5086bce803053:-2053381258,ff04253a3432230073f28f855b5b3a94:1473686336,63716db20932230020ab39aeccc4b546:-1202679959,31dedd32ac322300d030a4c7c940b7a0:-551099879,4734fd6e4c7223007cc7018f48cb015f:226026258,fee4febd5e2223008425120ff520757d:794673558,6833beb97b222300a6f60a006f8339a7:1666898330,b6cb3a90cd222300ccf60ac7183134a8:1843535087,ec9b7e588c22230053d73dd59f418a4d:-515754961,30ea3a90b5222300e3710bbc24ed94a3:-1347621679,4149b250dc222300cdfb23c6391f8634:649888993,fbd335f530522300adb3d3b2001f58ca:773985597,ace955e039de23007667ca8a51e27b79:-1739072355,e98b7b8f1d8a630034191fe3e680e62b:-1301153733,555a7b0f888a6300a673a4ab17404681:-2044766871,99be12cf94826300a4e2cdf199aeba53:2126953709,cbceed25960e2300e844b8f4f4c29d4a:1319455225,450e98e9a1062300eb2983346013eee8:1880179707,f68c1ca96d062300fbdf92c473cfe957:-1497483074,09dbd0a9a20623007e74119f6fbd6ad9:-2013346164,67f2fb9140c22300e8c2957bc05a7852:1922623672,9fa1bfdd7b822300a49f91db8f3b2672:95236082,2ecdafddfa82230038b4b245a626496c:257640257,3a1af98515c66b00212de25f7f2753b2:1312625635,be1e304db1066b0081cc97cc270ae580:-928269639,5f93847cd9822b0092fd66e977ca8959:1244638891,8cf997ac48022b00714d195306c10488:477002571,7ec6dfa816cee700dc60c820ae409199:-1898134736,9bb6dfa8e7cee7008b738252fdfe3a36:-106240368,45761ba882cee7007b43fcb96a1bbe9f:-64198115,4e06536852cee7009b531571f78fb002:-1277104017,ddc3dfe497cee700b17d86a116a59647:1615034840,2b435b28fdcee7003790ffa131ef78c0:-1131960482,8db25fe4bbcee7000b34c2a0b745b363:981602613,ae32dfe425cee700dd8d654625be2250:-1608704555,4c61176084cee7005436ad841429c7d2:-1838081795,1c2b0364258ee7002a85db2a925c34b3:355106723,02683264d98ee700dc7f33b44c62f01d:-1386130621,f83a82501306e700ef76227afd070a56:1358783253,f79942506b06e700e1cb7a57eaf0dbc3:397635509,c65359986b02e7004fc715ef15dfb170:430728857,a7f2d5986c02e70035360563c634789c:1715406225,9872d958ab02e700881cde5813ab4031:-1635387773,39ad0d10b402e7005e247e84e7f2caf4:-1420197883,71ced458bb4ea700532b4a5c5316e0a0:524557453,73bb4c98750ea700ffb6b5d4eb9d2365:70600196,86200c1cb20aa700ed323832daae2cfa:450786057,062ff7c8930aa700a85a09bc2af74a69:-186955407,593ef7c8a30aa7009d9767bb05952e61:156462643,b48d3788080aa700ea6309c087ac00b2:-1699872587,ad2dff48bc0aa7005d767fbd4b505c66:1831597932,7cecb3886b0aa7008b244bdabacb5527:-1616821896,f1eb3348690aa700fb8a4d5250dc7152:1076611168,a849bf44080aa7000ea36fa26a8761d5:-1771794013,9b85bbc0680aa700112379acd4d5b3cf:2034285040,5e42fb0cdfc6a700f767072d30a9b750:1999866589,a491deeb20752700ad72f9b829b5e422:1849162112,715f02abb17527009acf43d4b052ed7b:656849005,21de066b02752700af5f3cc73f9a4293:1408896122,ba9d0e2b8b75270081c950cc06daaba5:-669575119,a3af34eb337de300182c5f549f899f7c:767827567,1678f0a37d7de300f164c8817ee3e71b:1211821957,5cd2f86b163de30010ef97f0ae536142:-429627095,c6a2706bf93de300c2a42d6fb470c58e:-1197846776,06e17c2b173de300f418e7974b90a652:155437480</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_4b484cb82f77a1904627de1a2799b611</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl"><sys_security_acl action="INSERT_OR_UPDATE"><active>true</active><admin_overrides>true</admin_overrides><advanced>false</advanced><condition/><description>Default access control on x_nuta2_nutanix_ca_environment_subnet_mtom</description><name>x_nuta2_nutanix_ca_environment_subnet_mtom</name><operation display_value="read">read</operation><script/><sys_class_name>sys_security_acl</sys_class_name><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 06:32:32</sys_created_on><sys_id>4b484cb82f77a1904627de1a2799b611</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_security_acl_4b484cb82f77a1904627de1a2799b611</sys_update_name><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 06:32:32</sys_updated_on><type display_value="record">record</type></sys_security_acl></record_update>]]></payload>
<payload_hash>1393104776</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>d6ab0533c3d4569064971612b4013152</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c305a0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>x_nuta2_nutanix_ca_environment_subnet_mtom</target_name>
<type>Access Control</type>
<update_domain>global</update_domain>
<update_guid>dca34d7ccdfba19099deb23fc344e9fa</update_guid>
<update_guid_history>dca34d7ccdfba19099deb23fc344e9fa:1393104776,c7484cb82c77a1903c2e438ff575ba13:1393104776</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_environment_subnet_mtom_environment_uuid</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="environment_uuid" table="x_nuta2_nutanix_ca_environment_subnet_mtom"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;Environment UUID&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;environment_uuid&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;formula/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value="String"&gt;string&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;40&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_environment_subnet_mtom&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;ratakondala.arun&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-06-30 06:32:31&lt;/sys_created_on&gt;&lt;sys_id&gt;f04280742f77a1904627de1a2799b67e&lt;/sys_id&gt;&lt;sys_name&gt;Environment UUID&lt;/sys_name&gt;&lt;sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Nutanix Calm"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_environment_subnet_mtom_environment_uuid&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;ratakondala.arun&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-06-30 06:32:31&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;virtual_type&gt;script&lt;/virtual_type&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>1011920548</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>d6ab4133c3d4569064971612b4013120</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c302a0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>Environment Subnet MTOM.Environment UUID</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>44a34d7c39fba190923820f0b8ebfdeb</update_guid>
<update_guid_history>44a34d7c39fba190923820f0b8ebfdeb:1011920548,07480cb88577a190a3d3c5ea79a375e7:1011920548</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>DELETE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_documentation_x_nuta2_nutanix_ca_nutanix_marketplaceitems_version_en</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_documentation action="DELETE" element="version" label="Version" language="en" table="x_nuta2_nutanix_ca_nutanix_marketplaceitems"><sys_documentation action="DELETE"><element>version</element><help/><hint/><label>Version</label><language>en</language><name>x_nuta2_nutanix_ca_nutanix_marketplaceitems</name><plural>Versions</plural><sys_class_name>sys_documentation</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2018-12-07 09:36:49</sys_created_on><sys_id>5bc90520db9e2300570c9b81ca9619fc</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Version</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_documentation_x_nuta2_nutanix_ca_nutanix_marketplaceitems_version_en</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2018-12-07 09:36:49</sys_updated_on><url/><url_target/></sys_documentation></sys_documentation></record_update>]]></payload>
<payload_hash>916507729</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>d6ab4133c3d4569064971612b4013123</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f880000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_marketplaceitems</table>
<target_name>Marketplace Items.version</target_name>
<type>Field Label</type>
<update_domain>global</update_domain>
<update_guid>8c78303dca33fd1001ca343499a53f29</update_guid>
<update_guid_history>8c78303dca33fd1001ca343499a53f29:916507729,dfc945202b9e2300433610404455a804:801834279,905f308e8cada110e44c0c5cc9141c29:486074231,dfc945202b9e2300433610404455a804:801834279,6988f6a5182d6110f7868e8231032ed0:486074231,dfc945202b9e2300433610404455a804:801834279,cfa119c89fa9e9102d05beb28ddf0ce1:486074231,dfc945202b9e2300433610404455a804:801834279</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>DELETE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_29d6ad62db643300bd097dda8c961938</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="DELETE"><operation>delete</operation><source_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2019-04-04 13:12:48</sys_created_on><sys_id>29d6ad62db643300bd097dda8c961938</sys_id><sys_mod_count>0</sys_mod_count><sys_name>syslog_app_scope</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_scope_privilege_29d6ad62db643300bd097dda8c961938</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2019-04-04 13:12:48</sys_updated_on><target_name>syslog_app_scope</target_name><target_scope display_value="Global">global</target_scope><target_type>sys_db_object</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>746424584</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>daab0533c3d4569064971612b401314e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2f2b0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>syslog_app_scope</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>16c52a71628f7110656296a38e810467</update_guid>
<update_guid_history>16c52a71628f7110656296a38e810467:746424584,61d6ad62a4643300d6e45c5131725c3a:743613884,fdafb002eeeda1103d58e3dd839dcfbe:-384744504,61d6ad62a4643300d6e45c5131725c3a:743613884,4d4936ad5d2d61100f3df766121a09a4:0,61d6ad62a4643300d6e45c5131725c3a:743613884,540291cc35a9e9102be58c91670a04e6:-384744504,61d6ad62a4643300d6e45c5131725c3a:743613884</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_eb0201073775a300fdfc097973990eda</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_CatalogFormScripts&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_CatalogFormScripts&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_CatalogFormScripts = Class.create();
Nutanix_CatalogFormScripts.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
    },


    fetchProjectAndProfileList: function(catSysID) {
        try {
            this.logger.debug("Inside Nutanix_CatalogFormScripts.fetchProjectAndProfileList");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            gr.addQuery('item_name', catSysID);
            gr.query();
            var ans = {};

            if (gr.next()) {

                var blueprintSysId = gr.blueprint + '';
                var profileList = gr.application_profile.getDisplayValue();

                ans.profileList = profileList;
                ans.projectList = [];

                ans.projectList.push({
                    'name': gr.project.name + '',
                    'uuid': gr.project.uuid + ''
                });

            }
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.debug("Nutanix_CatalogFormScripts.fetchProjectAndProfileList :- Exception caught during fetching projects and profile list. Error :- " + e);
            this.logger.error("Exception caught during fetching projects and profile list. Error :- " + e);
        }
    },

    fetchOrderFormData: function(profile, catSysID, envsysid) {
        try {
            this.logger.debug("Inside Nutanix_CatalogFormScripts.fetchProjectAndProfileList");
            profile = profile.trim();
            //gs.info('ENVUUID' + envsysid);
            var envuuid = envsysid;
            var variableData = new GlideRecord(this.appUtil.configuration.table.variablesProperties + '');
            //gs.info("Parth profile value: " + profile);
            if (profile != "") {
                variableData.addEncodedQuery('catalog_item=' + catSysID + '^application_profile.name=' + profile + '^ORapplication_profileISEMPTY');
            } else {
                variableData.addQuery('catalog_item', catSysID);
            }
            variableData.query();


            var ans = {};

            while (variableData.next()) {
                gs.info("RV:variabledata" + variableData.variable.mandatory + '');
                if (variableData.variable.question_text + '' == 'Storage') {
                    var diskList = JSON.parse(variableData.default_value + '');

                    var rootDisk = diskList.root_disk;

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    if (rootDisk) {
                        ans[servicename + '_device_name'] = {
                            "value": rootDisk.device_name + '',
                            "readOnly": true
                        };
                        ans[servicename + '_size_gb'] = {
                            "value": rootDisk.size_gb + '',
                            "readOnly": true //disable in 1.1(rootDisk.runtime+''=='true')?false:true,
                        };
                        ans[servicename + '_volume_type'] = {
                            "value": rootDisk.volume_type + '',
                            "readOnly": true //disable in 1.1true
                        };
                        ans[servicename + '_delete_on_termination'] = {
                            "value": rootDisk.delete_on_termination + '',
                            "readOnly": true //disable in 1.1true
                        };
                    }


                    var dataList = diskList.data_disk_list;
                    for (var k in dataList) {
                        ans[servicename + '_' + k + '_device_name'] = {
                            "value": dataList[k].device_name + '',
                            "readOnly": true
                        };
                        ans[servicename + '_' + k + '_size_gb'] = {
                            "value": dataList[k].size_gb + '',
                            "readOnly": true //disable in 1.1(dataList[k].runtime+''=='true')?false:true,
                        };
                        ans[servicename + '_' + k + '_volume_type'] = {
                            "value": dataList[k].volume_type + '',
                            "readOnly": true
                        };
                        ans[servicename + '_' + k + '_delete_on_termination'] = {
                            "value": dataList[k].delete_on_termination + '',
                            "readOnly": true
                        };
                    }

                } else if (variableData.variable.question_text + '' == 'Port List') {

                    var portList = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in portList) {
                        ans[servicename + '_' + k + '_protocol'] = {
                            "value": portList[k].protocol + '',
                            "readOnly": true
                        };
                        ans[servicename + '_' + k + '_target_port'] = {
                            "value": portList[k].target_port + '',
                            "readOnly": true
                        };
                        ans[servicename + '_' + k + '_endpoint_name'] = {
                            "value": portList[k].endpoint_name + '',
                            "readOnly": true
                        };
                    }
                } else if (variableData.variable.question_text + '' == 'Images') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_image'] = {
                            "value": (list[k].data_source_reference) ? list[k].data_source_reference.name + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.data_source_reference &amp;&amp; list[k].runtime.data_source_reference.name &amp;&amp; list[k].runtime.data_source_reference.name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_device_type'] = {
                            "value": (list[k].device_properties) ? list[k].device_properties.device_type + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.device_properties &amp;&amp; list[k].runtime.device_properties.device_type &amp;&amp; list[k].runtime.device_properties.device_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_device_bus'] = {
                            "value": (list[k].disk_address &amp;&amp; list[k].disk_address.adapter_type) ? list[k].disk_address.adapter_type + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.disk_address &amp;&amp; list[k].runtime.disk_address.adapter_type &amp;&amp; list[k].runtime.disk_address.adapter_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_bootable'] = {
                            "value": list[k].bootable + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.bootable &amp;&amp; list[k].runtime.bootable+''=='true')?false:true
                        };
                    }

                } else if (variableData.variable.question_text + '' == 'Storage Profile Data Disks') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_disk_name'] = {
                            "value": list[k].name + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.name &amp;&amp; list[k].runtime.name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_storage_type'] = {
                            "value": list[k].storage_type + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.storage_type &amp;&amp; list[k].runtime.storage_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_disk_caching_type'] = {
                            "value": list[k].caching_type + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.caching_type &amp;&amp; list[k].runtime.caching_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_size_gb'] = {
                            "value": list[k].size_in_gb + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.size_in_gb &amp;&amp; list[k].runtime.size_in_gb+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_disk_lun'] = {
                            "value": list[k].lun + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.lun &amp;&amp; list[k].runtime.lun+''=='true')?false:true
                        };
                    }
                } else if (variableData.variable.question_text + '' == 'OS Profile') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_valut_id'] = {
                            "value": list[k].source_vault_id + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.source_vault_id &amp;&amp; list[k].runtime.source_vault_id+''=='true')?false:true
                        };

                        if (osProfileList[k] &amp;&amp; osProfileList[k].vault_certificates) {
                            for (var w in osProfileList[k].vault_certificates) {
                                ans[servicename + '_' + k + '_certificate_config_url_' + w] = {
                                    "value": list[k].vault_certificates[w].certificate_url + '',
                                    "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.vault_certificates &amp;&amp; list[k].runtime.vault_certificates[w] &amp;&amp; list[k].runtime.vault_certificates[w].certificate_url &amp;&amp; list[k].runtime.vault_certificates[w].certificate_url+''=='true')?false:true
                                };
                            }
                        }
                    }
                } else if (variableData.variable.question_text + '' == 'Guest Customization DHCP') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_use_dhcp'] = {
                            "value": list[k].is_dhcp + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.is_dhcp &amp;&amp; list[k].runtime.is_dhcp+''=='true')?false:true
                        };
                    }
                } else if (variableData.variable.question_text + '' == 'Disks') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_use_existing'] = {
                            "value": (list[k].source) ? true : false,
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.source &amp;&amp; list[k].runtime.source+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_storage_type'] = {
                            "value": (list[k].initializeParams) ? list[k].initializeParams.diskType + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.initializeParams &amp;&amp; list[k].runtime.initializeParams.diskType &amp;&amp; list[k].runtime.initializeParams.diskType+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_source_image'] = {
                            "value": (list[k].initializeParams) ? list[k].initializeParams.sourceImage + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.initializeParams &amp;&amp; list[k].runtime.initializeParams.sourceImage &amp;&amp; list[k].runtime.initializeParams.sourceImage+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_size_in_gb'] = {
                            "value": (list[k].initializeParams) ? list[k].initializeParams.diskSizeGb + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.initializeParams &amp;&amp; list[k].runtime.initializeParams.diskSizeGb &amp;&amp; list[k].runtime.initializeParams.diskSizeGb+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_delete_when_instance_is_deleted'] = {
                            "value": list[k].autoDelete + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.autoDelete &amp;&amp; list[k].runtime.autoDelete+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_disk'] = {
                            "value": list[k].source + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.source &amp;&amp; list[k].runtime.source+''=='true')?false:true
                        };
                    }
                } else if (variableData.variable.question_text + '' == 'Blank Disks') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_disk_type'] = {
                            "value": list[k].disk_type + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.disk_type &amp;&amp; list[k].runtime.disk_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_disk_name'] = {
                            "value": list[k].name + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.name &amp;&amp; list[k].runtime.name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_size_in_gb'] = {
                            "value": list[k].sizeGb + '',
                            "readOnly": true //disable in 1.1 (list[k].runtime &amp;&amp; list[k].runtime.sizeGb &amp;&amp; list[k].runtime.sizeGb+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_delete_when_instance_is_deleted'] = {
                            "value": list[k].autoDelete + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.autoDelete &amp;&amp; list[k].runtime.autoDelete+''=='true')?false:true
                        };
                    }
                } else if (variableData.variable.question_text + '' == 'Networking') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_associate_public_ip_address'] = {
                            "value": list[k].associatePublicIP + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.associatePublicIP &amp;&amp; list[k].runtime.associatePublicIP+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_network'] = {
                            "value": list[k].network + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.network &amp;&amp; list[k].runtime.network+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_subnetwork'] = {
                            "value": list[k].subnetwork + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.subnetwork &amp;&amp; list[k].runtime.subnetwork+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_access_configuration_name'] = {
                            "value": (list[k].accessConfigs &amp;&amp; list[k].accessConfigs[0]) ? list[k].accessConfigs[0].name + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.accessConfigs &amp;&amp; list[k].runtime.accessConfigs[0] &amp;&amp; list[k].runtime.accessConfigs[0].name &amp;&amp; list[k].runtime.accessConfigs[0].name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_access_configuration_type'] = {
                            "value": (list[k].accessConfigs &amp;&amp; list[k].accessConfigs[0]) ? list[k].accessConfigs[0].config_type + '' : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.accessConfigs &amp;&amp; list[k].runtime.accessConfigs[0] &amp;&amp; list[k].runtime.accessConfigs[0].config_type &amp;&amp; list[k].runtime.accessConfigs[0].config_type+''=='true')?false:true
                        };
                    }

                } else if (variableData.variable.question_text + '' == 'VDisks') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_adapter_type'] = {
                            "value": list[k].adapter_type + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.adapter_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_device_type'] = {
                            "value": (list[k].disk_type) ? list[k].disk_type : (list[k].device_properties) ? list[k].device_properties.device_type + '' : '',
                            "readOnly": true //disable in 1.1 (list[k].runtime &amp;&amp; list[k].runtime.disk_type &amp;&amp; list[k].disk_type+''=='true')?false:(list[k].runtime &amp;&amp; list[k].runtime.device_properties &amp;&amp; list[k].runtime.device_properties.device_type &amp;&amp; list[k].runtime.device_properties.device_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_size'] = {
                            "value": (list[k].disk_size_mb) ? list[k].disk_size_mb : list[k].disk_size_mib + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.disk_size_mb)?list[k].runtime.disk_size_mb:(list[k].runtime &amp;&amp; list[k].runtime.disk_size_mib+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_device_bus'] = {
                            "value": (list[k].device_properties &amp;&amp; list[k].device_properties.disk_address) ? list[k].device_properties.disk_address.adapter_type + '' : '',
                            "readOnly": true //disable in 1.1 (list[k].runtime &amp;&amp; list[k].runtime.device_properties &amp;&amp; list[k].runtime.device_properties.disk_address &amp;&amp; list[k].runtime.device_properties.disk_address.adapter_type+''=='true')?false:true
                        };
                    }

                } else if (variableData.variable.question_text + '' == 'Network Adapters') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    var clusterReadOnly = true;

                    for (var k in list) {
                        ans[servicename + '_' + k + '_adapter_type'] = {
                            "value": list[k].nic_type + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.nic_type &amp;&amp; list[k].runtime.nic_type+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_network_type'] = {
                            "value": list[k].net_name + '',
                            //"value": list[k].nic_type+'',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.net_name &amp;&amp; list[k].runtime.net_name+''=='true')?false:true
                        };
                        var subnetuuid = (list[k].subnet_reference) ? list[k].subnet_reference.uuid + '' : '';
						//gs.info('subnetuuid1 '+subnetuuid);
                        var subnet_reference_uuid = '';
                        var sub = new GlideRecord('x_nuta2_nutanix_ca_environment_subnet_mtom');
						sub.addEncodedQuery('environment_uuid='+envuuid+'^subnet_uuid='+subnetuuid);
                        // sub.addQuery('environment_uuid', envuuid);
                        sub.query();
                        if (sub.next()) {
                            subnet_reference_uuid = sub.subnet_uuid;
                           
                        }
                       // gs.info('subnet_reference_uuid' + subnet_reference_uuid);

                        ans[servicename + '_' + k + '_nic_' + (parseInt(k) + 1)] = {
                            // "value": (list[k].subnet_reference) ? list[k].subnet_reference.uuid + '' : '',
                            "value": subnet_reference_uuid + '',
                            "readOnly": (list[k].runtime &amp;&amp; list[k].runtime.subnet_reference &amp;&amp; list[k].runtime.subnet_reference + '' == 'true') ? false : true
                        };
                        if (list[k].runtime &amp;&amp; list[k].runtime.subnet_reference &amp;&amp; list[k].runtime.subnet_reference + '' == 'true')
                            clusterReadOnly = false;
                        var clus_name = '';
                        var gr = new GlideRecord('x_nuta2_nutanix_ca_subnet');
						gr.addQuery('uuid',subnet_reference_uuid);
                        //gr.addQuery('uuid', (list[k].subnet_reference) ? list[k].subnet_reference.uuid + '' : '');
                        gr.query();
                        if (gr.next()) {
                            clus_name = gr.cluster_name;
                        }
                        ans[servicename + '_cluster_name'] = {
                            "value": clus_name + '',
                            "readOnly": clusterReadOnly
                        };

                    }

                } else if (variableData.variable.question_text + '' == 'Network Profiles') {

                    var list = JSON.parse(variableData.default_value + '');

                    var servicename = variableData.service_name.question_text.toLowerCase().replace(/ /g, '_');

                    for (var k in list) {
                        ans[servicename + '_' + k + '_nic_name'] = {
                            "value": list[k].nic_name + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.nic_name &amp;&amp; list[k].runtime.nic_name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_security_group'] = {
                            "value": list[k].nsg_name + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.nsg_name &amp;&amp; list[k].runtime.nsg_name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_virtual_network'] = {
                            "value": list[k].vnet_name + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.vnet_name &amp;&amp; list[k].runtime.vnet_name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_subnet'] = {
                            "value": list[k].subnet_name + '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.subnet_name &amp;&amp; list[k].runtime.subnet_name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_public_ip_config_name'] = {
                            "value": (list[k] &amp;&amp; list[k].public_ip_info) ? list[k].public_ip_info.ip_name : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.public_ip_info &amp;&amp; list[k].runtime.public_ip_info.ip_name &amp;&amp; list[k].runtime.public_ip_info.ip_name+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_public_ip_config_adapter_method'] = {
                            "value": (list[k] &amp;&amp; list[k].public_ip_info) ? list[k].public_ip_info.ip_allocation_method : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.public_ip_info &amp;&amp; list[k].runtime.public_ip_info.ip_allocation_method &amp;&amp; list[k].runtime.public_ip_info.ip_allocation_method+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_public_ip_config_dns_label'] = {
                            "value": (list[k] &amp;&amp; list[k].public_ip_info) ? list[k].public_ip_info.dns_label : '',
                            "readOnly": true //disable in 1.1(list[k].runtime &amp;&amp; list[k].runtime.public_ip_info &amp;&amp; list[k].runtime.public_ip_info.dns_label &amp;&amp; list[k].runtime.public_ip_info.dns_label+''=='true')?false:true
                        };
                        ans[servicename + '_' + k + '_private_ip_config_allocation_method'] = {
                            "value": (list[k] &amp;&amp; list[k].public_ip_info) ? list[k].private_ip_info.ip_allocation_method + '' : '',
                            "readOnly": true //disable in 1.1 (list[k].runtime &amp;&amp; list[k].runtime.private_ip_info &amp;&amp; list[k].runtime.private_ip_info.ip_allocation_method &amp;&amp; list[k].runtime.private_ip_info.ip_allocation_method+''=='true')?false:true
                        };
                    }

                } else if (variableData.variable.type + '' == 21) {
                    var listValue = variableData.default_value + '';
                    var gr = new GlideRecord(this.appUtil.configuration.table.dropDownTable + '');
                    //gr.addEncodedQuery('variable='+variableData.variable+'^valueIN'+listValue);
                    gr.addEncodedQuery(variableData.variable.reference_qual + '^valueIN' + listValue);
                    gr.query();

                    var listValSys = '';
                    while (gr.next()) {
                        listValSys += gr.sys_id + ',';

                    }
                    if (listValSys.endsWith(','))
                        listValSys = listValSys.substr(0, listValSys.length - 1);
                    gs.info("RV:variableData.variable.mandatory+'' " + variableData.variable.mandatory + '');
                    ans[variableData.variable.name + ''] = {
                        "value": listValSys + '',
                        "readOnly": (variableData.runtime_config + '' == 'true') ? false : true,
                        "mandatory": variableData.variable.mandatory + ''
                        //"container": variableData.category_name.name+''
                    };
                } else {
                    ans[variableData.variable.name + ''] = {
                        "value": variableData.default_value + '',
                        "readOnly": (variableData.runtime_config + '' == 'true') ? false : true,
                        "mandatory": variableData.variable.mandatory + ''
                        //"container": variableData.category_name.name+''
                    };
                }
            }
            //gs.info('answer catalogform ' + JSON.stringify(ans));
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.debug("Nutanix_CatalogFormScripts.fetchProjectAndProfileList :- Exception caught during fetching launch page variables values. Error :- " + e);
            this.logger.error("Exception caught during fetching launch page variables values. Error :- " + e);
        }
    },
    fetchMultipleProjectAndProfileList: function(catSysID) {
        try {
            this.logger.debug("Inside Nutanix_CatalogFormScripts.fetchMultipleProjectAndProfileList");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            gr.addQuery('item_name', catSysID);
            gr.query();

            var ans = {};

            if (gr.next()) {

                var blueprintSysId = gr.blueprint + '';
                var profileList = gr.multiple_application_profile.getDisplayValue();

                ans.profileList = profileList;
                ans.projectList = [];

                var projects = gr.multiple_projects;
                var project = projects.split(',');

                var pro = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                for (var i in project) {
                    if (pro.get(project[i])) {
                        ans.projectList.push({
                            'name': pro.name + '',
                            'uuid': pro.uuid + ''
                        });
                    }
                }

            }

            return JSON.stringify(ans);
        } catch (e) {
            this.logger.debug("Nutanix_CatalogFormScripts.fetchMultipleProjectAndProfileList :- Exception caught during fetching projects and profile list. Error :- " + e);
            this.logger.error("Exception caught during fetching projects and profile list. Error :- " + e);
        }
    },
    fetchMultipleProjectAndEndpointList: function(catSysID) {
        try {
            this.logger.debug("Inside Nutanix_CatalogFormScripts.fetchMultipleProjectAndProfileList");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            gr.addQuery('item_name', catSysID);
            gr.query();
            var ans = {};
            if (gr.next()) {
                var runbookSysId = gr.blueprint + '';
                var endpointList = gr.endpoint;
                if (endpointList != '') {
                    var endpointLists = endpointList.split(',');
                }
                ans.projectList = [];
                var projects = gr.multiple_projects;
                var project = projects.split(',');

                var pro = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                for (var i in project) {
                    if (pro.get(project[i])) {
                        ans.projectList.push({
                            'name': pro.name + '',
                            'uuid': pro.uuid + ''
                        });
                    }
                }
                ans.endpointList = [];
                var endpoint = new GlideRecord('x_nuta2_nutanix_ca_endpoints');
                endpoint.query();
                if (endpointList == '') {
                    ans.endpointList.push({
                        'name': '',
                        'uuid': ''
                    });
                    while (endpoint.next()) {
                        if (project.indexOf(endpoint.project.sys_id + '') != -1)
                            ans.endpointList.push({
                                'name': endpoint.name + '',
                                'uuid': endpoint.uuid + ''
                            });
                    }
                } else {
                    for (var j in endpointLists) {
                        if (endpoint.get(endpointLists[j])) {
                            ans.endpointList.push({
                                'name': endpoint.name + '',
                                'uuid': endpoint.uuid + ''
                            });
                        }
                    }
                }

            }
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.debug("Nutanix_CatalogFormScripts.fetchMultipleProjectAndEndpointList :- Exception caught during fetching projects and endpoint list. Error :- " + e);
            this.logger.error("Exception caught during fetching projects and profile list. Error :- " + e);
        }
    },
    fetchSelectedEndpointList: function(catSysID) {
        try {
            this.logger.debug("Inside Nutanix_CatalogFormScripts.fetchSelectedEndpointList");
            var gr = new GlideRecord(this.appUtil.configuration.table.runtimeConfig + '');
            gr.addQuery('item_name', catSysID);
            gr.query();
            var ans = {};
            if (gr.next()) {
                var runbookSysId = gr.blueprint + '';
                var endpointList = gr.endpoint;
                if (endpointList != '') {
                    var endpointLists = endpointList.split(',');
                }
                ans.projectList = [];
                var projects = gr.multiple_projects;
                var project = projects.split(',');
                var pro = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
                for (var i in project) {
                    if (pro.get(project[i])) {
                        ans.projectList.push({
                            'name': pro.name + '',
                            'uuid': pro.uuid + ''
                        });
                    }
                }
                ans.endpointList = [];
                var endpoint = new GlideRecord('x_nuta2_nutanix_ca_endpoints');
                endpoint.query();
                if (endpointList == '') {
                    ans.endpointList.push("");
                } else {
                    for (var j in endpointLists) {
                        if (endpoint.get(endpointLists[j])) {
                            ans.endpointList.push({
                                'name': endpoint.name + '',
                                'uuid': endpoint.uuid + ''
                            });
                        }
                    }
                }
            }
            return JSON.stringify(ans);
        } catch (e) {
            this.logger.debug("Nutanix_CatalogFormScripts.fetchSelectedEndpointList :- Exception caught during fetching projects and endpoint list. Error :- " + e);
            this.logger.error("Exception caught during fetching projects and profile list. Error :- " + e);
        }
    },
    fetchEndpointAssociatedToProject: function(projectID, selected_endpoint) {
        try {
            this.logger.debug("Inside Nutanix_CatalogFormScripts.fetchEndpointAssociatedToProject");
            //gs.info("Parth1 project id ::" + projectID);
            //gs.info("Parth1 Selected endpoint ::" + selected_endpoint);
            //gs.info("Parth1 Selected endpoint stringify ::" + selected_endpoint);
            var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_project');
            gr.addQuery('uuid', projectID);
            gr.query();
            if (gr.next()) {
                var projectSysID = gr.sys_id;
            }
            var ans = {};
            ans.endpointList = [];
            var all_endpoint_associated_to_project = [];
            //gs.info("Parth1 project sys_id ::" + projectSysID);
            var gr = new GlideRecord('x_nuta2_nutanix_ca_endpoints');
            gr.addQuery('project', projectSysID);
            gr.query();
            while (gr.next()) {
                var endpoint = gr.name;
                //gs.info("Parth1 all endpoint ::" + endpoint);
                ans.endpointList.push({
                    'name': gr.name + '',
                    'uuid': gr.uuid + ''
                });
            }
            var parsed_selected_endpoint = JSON.parse(selected_endpoint);
            var last_selected_name = [];
            var last_all_name = [];

            if (parsed_selected_endpoint[0] != "") {
                //gs.info("Parth1 inside common codition");
                selected_endpoint = JSON.parse(selected_endpoint);
                for (var i in selected_endpoint) {
                    last_selected_name.push(selected_endpoint[i].name);
                }
                gs.info("last_selected_name ::" + last_selected_name);

                for (var i in ans.endpointList) {
                    //gs.info("Parth1 endpoints ::" + JSON.stringify(ans.endpointList[i]));
                    last_all_name.push(ans.endpointList[i].name);
                }
                gs.info("last_all_name ::" + last_all_name);
                var common = [];
                for (var i in last_all_name) {
                    var array_util = new global.ArrayUtil();
                    if (array_util.contains(last_selected_name, last_all_name[i])) {
                        common.push(last_all_name[i]);
                    }
                }
                gs.info("common ::" + common);
                var single_endpoint = {};
                single_endpoint.single = [];

                if (common.length != 0) {
                    for (var i = 0; i &lt; common.length; i++) {
                        var gr = new GlideRecord('x_nuta2_nutanix_ca_endpoints');
                        gr.addQuery('name', common[i]);
                        gr.query();
                        while (gr.next()) {
                            var endpoint_uuid = gr.uuid;
                            gs.info("endpoint_uuid ::" + endpoint_uuid);
                            single_endpoint.single.push({
                                'name': gr.name + '',
                                'uuid': gr.uuid + ''
                            });
                        }
                    }
                } else {
                    gs.info("endpointList1 ::" + ans.endpointList);
                    gs.info("endpointList1 ::" + JSON.stringify(ans.endpointList));
                    single_endpoint.single = ans.endpointList;
                }
                gs.info("Final endpointList ::" + single_endpoint);
                gs.info("Final endpointList ::" + JSON.stringify(single_endpoint));
                return JSON.stringify(single_endpoint);
            } else {
                var single_endpoint = {};
                single_endpoint.single = [];
                //gs.info("Hi there Parth");
                //gs.info("ans.endpointList2 ::" + ans.endpointList);
                //gs.info("ans.endpointList2 ::" + JSON.stringify(ans.endpointList));
                single_endpoint.single = ans.endpointList;
                return JSON.stringify(single_endpoint);
            }

        } catch (e) {
            this.logger.debug("Nutanix_CatalogFormScripts.fetchEndpointAssociatedToProject :- Exception caught during fetching projects and endpoint list. Error :- " + e);
            this.logger.error("Exception caught during fetching projects and profile list. Error :- " + e);
        }
    },
    type: 'Nutanix_CatalogFormScripts'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-20 06:58:59&lt;/sys_created_on&gt;&lt;sys_id&gt;eb0201073775a300fdfc097973990eda&lt;/sys_id&gt;&lt;sys_mod_count&gt;174&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_CatalogFormScripts&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_eb0201073775a300fdfc097973990eda&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-05-21 07:41:08&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>109924601</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>daab0533c3d4569064971612b4013151</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c31460000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Nutanix_CatalogFormScripts</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>3e4ec3e990da0a503f1e6dbcc6caff55</update_guid>
<update_guid_history>3e4ec3e990da0a503f1e6dbcc6caff55:109924601,3e4ec3e990da0a503f1e6dbcc6caff55:109924601,97fdc3e972da0a5077845f513fc2e9aa:33037561,21d58eccbcd602501b514775d1e0e05e:452340574,5564ca0c15d602509243362b527b9d85:1275945180,4536e98cde160250a5450246ff6c3455:1836096002,33fe9d04871602508590795ece02d04d:1372078229,6041918c3f92025056691e9ee014e4c2:1430630799,975015cc5892025005e6a8ad4bbaf4b5:-287039254,520ec9c8f39202500611980d48a753dc:1050145981,b93581bb5d4e8e10376f33287d869293:1610456353,e6b4857b994e8e10480206127658e297:-456177727,ce7affe370468e109ea36571e058c67b:-898148995,6444f4ebb6024e10601d08a0b2619128:-1148007899,ed04f8e7ef024e1082f92b7a2c030f94:1273013347,ec9038e77c024e1035c9956b5a89a833:-1167543475,3bbf206752024e10eefdeb8db71e7dd1:30316711,334fe0a393024e106f24b0b29e86e8a4:2066739971,109ee4a3bc024e10ade97342bfffe8c2:-1005169751,dfad20236d024e1081768f79040c4bd5:-261050891,2f5c2cef63ce0e10d94ad36e278880b3:-483705804,33f1d7938a860e10262a6be034adf27f:-461263779,53dd076108544110b1e33d4d92d31314:-896553141,16104982f2eda1108d07325d1ab71a3e:-1211545769,53dd076108544110b1e33d4d92d31314:-896553141,6f89f221cf6d611030e903a769cc0176:-1211545769,53dd076108544110b1e33d4d92d31314:-896553141,0da21504b5e9e910765017f53965d9f0:-1211545769,53dd076108544110b1e33d4d92d31314:-896553141,b6a40fe57b1441103131e9678a407bbc:1264874765,7646bae53ed041104fad323db54e16d2:501312243,22e57ea5a4d04110e3a81cd9820e706c:-1181926093,6f84f26596d04110276b72aa5aa73a04:506473436,6404ba25c7d04110fdc24c8cbd5a32db:-1651501540,74437a6174d04110d508759f935922aa:615693250,9c92be6127d04110891d16136417b195:2026192221,39258c4dcd90011086cf54ff2712efb3:1123580853,8039a402edc33010b4b8bd9c5be871b1:1187481301,fd29e402f9c33010d5c238ea3579a246:-107860430,8877e4ce9683301058f66e4467d0c385:1187481301,5d9410824a833010b58c7db149b347a6:-123695871,602b3375a2433010c8b5ca8cd85744f2:-364436852,d6cabb35e14330103855726234e84d3f:208919868,056a7b35fb433010c38c867719ff2945:-1158627732,63f97ff13c4330106f7dd545acd651a0:-745694803,3b09bbf1ba43301090435108a8f88aaa:-741156165,c5b87bf1a8433010ca234949705cb26a:85487411,d027b7b151433010232d6cfbb7c630fa:1146988885,d2a6b7b1de433010744223836e0253ab:204169789,fcdea7bdb1033010676ed7aff6450d70:-1247881144,58fb6b3d020330104bbfb1fa9027ac7c:1390630760,c62aefb96503301069291a348815fc07:390343324,e93763b9510330104a83b8843b4997c0:799005530,ef300be57883301075e21541e6f5d340:-946835377,d272faa1c24330103432ed60769e4282:1646323922,1c703a6180433010e6ed3fd64d3392e2:-764912244,1d4416a15303301010a244cd5aa06253:-1046459777,5e935661bb033010ff14787237fdd153:-1671313889,4ee43e1975473010a446919751db127c:1132939491,ce54f2199c473010e6a30b2871b01556:-198509466,a3837ed54f473010379a3bca9a0814ce:-2048789470,1c02fa95fa4730106f80b2908634f037:-1594501618,b311ba95d147301024096a0393adbba4:1119204150,6f6c6215564730104376197ae99b9732:-1855568515,6eaa22d1b74730101f0c27d3626810c5:1070961698,71a9aa5108473010280d596f18e71b1b:377136284,8c96eedd8e073010358ce967988476fd:206316553,6885221188473010b976b29a505160fb:2073872037,a815e2ddf30730105745ace5bf5b5dc5:-1235938185,5413ea5d06073010323cb64a687f1b59:-1722815537,58a1aa5d5e073010575be988968beba6:-388413706,cc61a25d720730108ed652a8df864752:1826450134,cba0621d49073010447f5d39da907baf:998761685,eb2f5ed96c07301035690bb0f8c59ef1:1137791812,cabe92d9010730101d2bff4df50029c8:277634381,9ebd12d9880730106e5041036b944c17:-775915008,01ec5e5927073010384f5ac98f692ba3:-447586150,ba1b1659aa073010dadaad0854436dbd:-1722600403,a88756d57f073010f2c00f2d4b8ba299:375152352,681792d5000730107c132fe3ba13ac56:10402453,d8035e155e073010219696994380f3fe:2131517962,3352d615fd073010f78e178b6d9ff94b:1664144455,3ece8e51c20730107cfbcfc4a927bba4:-2054291919,ec5ec6519e073010d9b90da7ef1cd265:-91188302,392d421187073010d6590e35c83317fe:2054324933,e9ec4211df0730101b9e877adfddc934:1180410490,d4ab0edd40c330108a88f239bf08aeec:1230449795,2f4a42ddf7c33010032b3182fa79b50a:-288998999,71df29196f433010cb60fd3b7ccf2f91:-1396924233,00afa119f3433010d51311b8322af2b0:-246761018,1a1fa1d5a9433010ce320b557dd77326:-687713861,5efd61d53a433010bed2babc9390f4a4:352319451,746ce195874330107129ba06d2b7e4b1:301335362,b20ced557043301063011907522095e5:-1163405617,b1466d510143301048b145b104094948:1676720069,d065a1519a4330101e3fb9445c0baad4:-191954251,f7d46151344330107e1e6979daec73e8:-2017603245,66646d119543301085d4945e1ca4a7d8:1005833173,bff2eddd1f0330104b0e49d85036611e:1447432160,7c9c1d99c8033010c6605b865fa71051:396781077,497c1dd9240330106e448624df5d8e85:-229240913,c22c5999af03301025e76757e1a6ca27:-1961464641,6c6bbf45383ef010a58f130909da6007:2095028194,a8337a05f7b6f0104ed97dfd9661c801:468160862,f78032819cb6f010032ee36e5d794810:-207351729,0e7fa6cd2476f010431f94ade1a3a58e:1964301743,f00962ee206670109acccdbd1a8d11e1:1874601762,7d80096e532270101aab243ae87c3720:1158520444,2effb82ebb2270106462b4260c67bad4:-1073091073,d65f782e582270108d4b8e630ab74e4f:-904840278,f5ddb8aaeb227010f847c12f9e92e4f7:-646435044,8ecc78aa13227010fe618dbe70f0410c:1051846002,6771759c92a2701081ca5e6acc981f51:-91842813,54e0791c32a27010bde4f0c7937d642a:-532147363,be9fa9d889a27010240efb156016ed30:-958521768,ac2cf480902630103d5587868c8aeae6:843730453,8779f4cc93e2301082a09e907860b396:1773330961,751974cc41e230109a4dc53b553c6c63:-296044244,279d1c3bf31e3010c27296b96d5f60b9:-484192771,8215cc733cda301058916eea84eabee6:-1483582082,b9a83ba7f39a3010c65d8f1120f6d0a1:186198845,e208bb671e9a3010fc84bde21bbc51fe:1578770071,dff1bfaf135a3010596eac8459bd5bd0:-972969112,201ea7ebb95a3010419c5f363426f5ba:-1541962273,51bdefab735a3010961f8583c77927cc:-861624718,a2e82367785a3010541095ba24e614d3:1227271087,e522a3239a5a3010b30fe76b445c1a40:-861624718,d1fc9beb141a301081f3760971f2c800:-1771970918,047c53ebc11a3010fd4be5a2dddbb94b:-107135032,ec479a73870a30100d2b875c4d9be702:-1368994013,15509a97406c7450c2b89b4c646c9566:2074489529,cd634a130de8745071c35d63ab3d150e:-1704875748,c7d6add7c66874502b1169b7303a3091:-2082517453,da04add340687450625650e59ef83882:-1709852938,631e59d364e07450592096c2a57ff4bd:-1177533576,3203ab42ab412c50a9a335be98f15261:1407777480,135cc4cd9204a010e25fe1912b85a73e:-1813562865,ec37f8551b561410e2583b3d98574954:905411811,b0c0fb8ec5b77300d19be98ab54b193e:-999251320,a05baf9ce6973300b20fdc7fddb0c007:-552489831,f568671cf797330099f089a29eb83889:76310828,fb442b94bc973300d6848d050219b714:-355156944,c9c3eb94f2973300989f5baa72a2665a:-377897469,99232b1440973300c3c6e3bec635144f:-306376084,35e1e7d0df9733007cfd36c686fc6065:-1477127476,5e60110c035d3300cbb1d6ebcd5659ef:436289256,d0cec9880f5d3300658465b99792454f:201825225,5647cd5125c53300ca843cde4e0f6f9e:156136167,73c285d5e085330067bad3b9dda09596:-1252833340,4b32c195fa8533006652f0e6ae57d273:927072954,7ed14d55858533003fdcf34a3d33f388:-1195742905,b4d0895528853300ba60be8f17befaa8:1910426473,3da2cb0f2cf43300f1100d77f4efbe6d:877351541,6c09be8b33f43300549efa91e4d7cae6:-2032736725,64a8b20f82f43300b83dfa0bd67eb897:-607805851,a36872cb9cf433007d729d96fd8c3417:1533122211,a4a7320f3cf433006e99506ee7630447:1385279048,2d67fa8b0ef43300df662e66c60dce1e:-1545288925,e0e42d118bbc330015e159b54a22deda:1005886519,91e8423285f223008010316fd687fd7e:232774686,9cc88a7e9fb223005f67bc0f96ca4b4b:-1876066574,3e504efabdb22300922f386cf941d1c2:-1751129580,b0400afa52b2230025a91cb6bd9b5d92:-497889261,df008afa46b2230012959ff40299af43:47140497,5adff9fa23b2230037a50ab92b71208f:159904144,614f35fa8fb223008b06d105e563446d:-1721134862,5b8d7d7a7fb22300dbf82bf6e1f7948e:-2145018029,b75d7d7ae1b22300e3e6aa2310dcfcf0:-374038248,f7baf132bcb2230034a9aa6c92d5736c:-403878985,d2e3f57eaa722300844eabc697f227ed:1003340183,7281b9beb2722300fb9c694dcc1d0e12:1869128132,3797fd37874e2300cbcffc880260f02b:-350586866,ab4e98e93d0623005a4e2457610815ed:2004163924,6e92b791cdc22300e3f1b686dde8f707:850947648,8418dd01b8866b009f35d10855947d74:-467456267,cd069d8d05466b00c5b25eca6b47b958:1642131042,fea59d8ded466b005dc7f306ce346705:-812238363,4075598de7466b00709e57bd723b398b:-1878484485,584059893f466b006727decbfb904160:-847468102,1d8fc58943466b0088cdb60899b43135:513559764,fe30f081c1066b00999ed2d024374e1c:-1126858130,6e9ed018e24ea700640dacbc7669086b:-1739055078,d00d7c937731e30063fc27010e7c0c18:-1210779104,3a501d8f6075a300e6ab8b924800813c:2056691745,1930dd8f2275a3004fa3bc271a205f85:1465355950,23cf018f3975a300ea4bbd6a212cebf6:2127596206,18ee054faf75a300bf699b347dd7f808:-1576035295,1cb8c90bd875a300aeaa8e1c09558910:1363589786,c5e78d0b4375a3002a65c6bb31da776d:1501741722,1b8709c70375a300c2d4da85fe38a25f:-915414740,65a2c9079375a300f2c2658cb1aed596:458013687</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_documentation_x_nuta2_nutanix_ca_environment_subnet_mtom_environment_uuid_en</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_documentation element="environment_uuid" label="Environment UUID" language="en" table="x_nuta2_nutanix_ca_environment_subnet_mtom"><sys_documentation action="INSERT_OR_UPDATE"><element>environment_uuid</element><help/><hint/><label>Environment UUID</label><language>en</language><name>x_nuta2_nutanix_ca_environment_subnet_mtom</name><plural>Environment UUIDs</plural><sys_class_name>sys_documentation</sys_class_name><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 06:32:32</sys_created_on><sys_id>53484cb82f77a1904627de1a2799b677</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Environment UUID</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_documentation_x_nuta2_nutanix_ca_environment_subnet_mtom_environment_uuid_en</sys_update_name><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 06:32:32</sys_updated_on><url/><url_target/></sys_documentation></sys_documentation></record_update>]]></payload>
<payload_hash>-889289281</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>daab4133c3d4569064971612b4013122</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30430000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>Environment Subnet MTOM.Environment UUID</target_name>
<type>Field Label</type>
<update_domain>global</update_domain>
<update_guid>14a34d7ce1fba190583927d29d23a5f6</update_guid>
<update_guid_history>14a34d7ce1fba190583927d29d23a5f6:-889289281,97484cb8de77a1903f182b26162d84ca:-889289281</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_properties_7f27e5112fe4b1104627de1a2799b6ee</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description/><ignore_cache>true</ignore_cache><is_private>false</is_private><name>x_nuta2_nutanix_ca.sync</name><read_roles>x_nuta2_nutanix_ca.calm_admin,x_nuta2_nutanix_ca.user</read_roles><suffix>x_nuta2_nutanix_ca.sync</suffix><sys_class_name>sys_properties</sys_class_name><sys_created_by>subuhee.fathima</sys_created_by><sys_created_on>2023-08-08 09:39:32</sys_created_on><sys_id>7f27e5112fe4b1104627de1a2799b6ee</sys_id><sys_mod_count>14</sys_mod_count><sys_name>x_nuta2_nutanix_ca.sync</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_properties_7f27e5112fe4b1104627de1a2799b6ee</sys_update_name><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-05-22 09:28:06</sys_updated_on><type>string</type><value>0</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=7f27e5112fe4b1104627de1a2799b6ee"/></record_update>]]></payload>
<payload_hash>143235199</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>deab0533c3d4569064971612b401314d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c316d0000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>x_nuta2_nutanix_ca.sync</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>5750344a4216c6d0ab7032a33869498c</update_guid>
<update_guid_history>5750344a4216c6d0ab7032a33869498c:143235199,cf9a3365911e46d0069e95ce762d0c6a:163572574,ebf8bfa98ada46d0764fff707220df11:143235199,5e922f6d77d646d0145f9561de6de988:163572574,5c0893e1f09646d00da1ab1d38ce5b5f:143235199,0ff54ba1591646d052e01ceca66eb8a0:163572574,46b543a1ba1646d0dd16a61c369a1abc:143235199,4bdc3aedf59246d0540558b3962694de:163572574,d8cbf66da39246d0cc591a582d68212a:143235199,5f093937b3340210c90e5d6368e29ff7:163572574,dad06816cb2b4210eb00358f0d9b7745:163572574,07688be466e702108b3f85564031b62a:163572574,6dd2ec5478bb0210a6d6f0f875b1b7d9:163572574,b75941bbd6303150df2e74c39119991d:1051656351,b903b9993468b1108d8438e2f10940ee:1071993726,03e23999fd68b110f88dcdcf389f3217:1051656351,5ffd29d50ee4b110d4106e38ef6cfbd6:1071993726,f619295162e4b1108ceed970f415b005:1051656351</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_script_include_b234e44937c26b00fdfc097973990e72</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_nuta2_nutanix_ca.Nutanix_ImportEnvironment&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;Nutanix_ImportEnvironment&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var Nutanix_ImportEnvironment = Class.create();
Nutanix_ImportEnvironment.prototype = {
	initialize: function () {
		this.appUtil = new Nutanix_Calm_Utils();
		this.logger = new Nutanix_Calm_Logger();
	},
	startImportEnvironment: function (current) {
		var envUUID = '';
		try {
			this.logger.debug("Inside Nutanix_ImportEnvironment.startImportEnvironment");
			envUUID = current.payload + '';
			var response = this.appUtil.makeCalmApiCall("GET", this.appUtil.configuration.api.getEnvironment + envUUID + "", "");
			if (response.getStatusCode() == '200' || response.getStatusCode() == '201') {
				this.logger.info("Connection established to " + this.appUtil.configuration.api.getEnvironment + envUUID + "");
				//this.appUtil.insertIntoQueue("processImportedEnvironment", "", current.parameter+'', response.getBody());
				//TO GET PROJECT NAME
				var projectTable = new GlideRecord(this.appUtil.configuration.table.Project + "");
				projectTable.addQuery('sys_id', current.parameter);
				projectTable.query();
				var projectName = '';
				while (projectTable.next()) {
					projectName = projectTable.name;
				}
				//////
				this.appUtil.insertIntoQueue("processImportedEnvironment", "", current.parameter + ',' + projectName, response.getBody(), 'Process environment data', 'This job processes the imported environment data.');
				this.logger.info("Successfully imported Environment of Project :- " + projectName);
			} else {
				this.logger.debug("Nutanix_ImportEnvironment.startImportEnvironment :- Connection to environment/" + envUUID + " not established :- " + response.haveError() + " Status code :- " + response.getStatusCode());
			}
		} catch (e) {
			this.logger.debug("Nutanix_ImportEnvironment.startImportEnvironment :- Exception caught during retrieval of environment/" + envUUID + ". Error: " + e);
			this.logger.error("Exception caught during retrieval of environment/" + envUUID + ". Error: " + e);
		}
	},
	processImportedEnvironment: function (current) {
		var envUUID = '';
		try {
			this.logger.debug("Inside Nutanix_ImportEnvironment.processImportedEnvironment");
			var insertData = new GlideRecord(this.appUtil.configuration.table.stagingEnvironment + "");
			var projectSysId = current.parameter.split(',')[0] + '';
			var entity = this.appUtil.parse(current.payload);
			var status = entity.status;
			var resource = entity.status.resources;
			var metadata = entity.metadata;
			envUUID = metadata.uuid;
			insertData.initialize();
			var field;
			//insertData.name = current.parameter.split(',')[1]+''+" Environment";
			insertData.name = metadata.name + "";
			//To insert status data
			for (var key in status) {

				field = status[key];
				if (key != 'resources' &amp;&amp; key != 'name') {
					insertData[key] = (field.constructor === Object || field.constructor === Array) ? JSON.stringify(field) : field + '';
				}
			}
			//To insert resources data
			for (var key in resource) {
				field = resource[key];
				insertData[key] = (field.constructor === Object || field.constructor === Array) ? JSON.stringify(field) : field + '';
			}
			//To insert metadata
			for (var key in metadata) {
				if (key != 'name') {
					field = metadata[key];
					insertData[key] = (field.constructor === Object || field.constructor === Array) ? JSON.stringify(field) : field + '';
				}
			}
			insertData['project'] = projectSysId;
			insertData.insert();

			this.logger.debug("Starting Env and Subnet Sync for " + JSON.stringify(entity.metadata));
			this.createEnvAndSubnetRelation(current.getValue('payload'));
			this.logger.debug("Synced Env and Subnet Sync for " + JSON.stringify(entity.metadata));
		} catch (e) {
			this.logger.debug("Nutanix_ImportEnvironment.processImportedEnvironment :- Exception caught during processing of environment/" + envUUID + ". Error :- " + e);
			this.logger.error("Exception caught during processing of environment/" + envUUID + ". Error :- " + e);
		}
	},
	createEnvAndSubnetRelation: function (payload) {
		try {
			this.logger.debug("Inside Nutanix_ImportEnvironment.createEnvAndSubnetRelation " + payload);
			if (!payload) {
				this.logger.debug("Failed to create ENV-SUBNET-RELATION at Nutanix_ImportEnvironment.createEnvAndSubnetRelation Since the payload is empty");
				return;
			}
			var decodedPayload = JSON.parse(payload);
			var envUUID = decodedPayload.metadata.uuid;
			var infraInclusionList = decodedPayload.spec.resources.infra_inclusion_list; // TODO: check for undefined parents
			var subnetReferences = [];

			// Infra inclusion list is an Array so we need to pick up only the first item which
			// has a key called 'subnet_references' which contains subnet uuid for this env
			// Incase we didn't find any it will be an empty array so we don't need to create any records
			for (var key in infraInclusionList) {
				if (infraInclusionList[key].subnet_references &amp;&amp; infraInclusionList[key].subnet_references.constructor === Array) {
					subnetReferences = infraInclusionList[key].subnet_references;
					break;
				}
			}

			// We don't need to create any records if the subnetReferences are empty
			// In most cases it should not be empty because we will have atleast 1 default
			// subnet for a given environment
			if (subnetReferences.length === 0) {
				this.logger.debug("Nutanix_ImportEnvironment.createEnvAndSubnetRelation| Skipping EnvAndSubnetRelation Record creation | reason: Subnet references are empty in payload " + JSON.stringify(decodedPayload.spec.resources.infra_inclusion_list));
				return;
			}

			var activeSubnets = [];
			for (var index in subnetReferences) {
				var subnetUUID = subnetReferences[index].uuid;
				activeSubnets.push(subnetUUID);
				var ENV_Subnet = envUUID + '_' + subnetUUID;

				// Checking for existing subnets and env relation to prevent duplicate record creation
				var envAndSubnetRelation = new GlideRecord('x_nuta2_nutanix_ca_environment_subnet_mtom');
				if (envAndSubnetRelation.get('envuuid_subnetuuid', ENV_Subnet)) {
					this.logger.debug(']]&gt;🔃&lt;![CDATA[ [Skipped...] Found an existing relation ' + subnetUUID);
					continue;
				}

				envAndSubnetRelation.newRecord();
				envAndSubnetRelation.setValue('environment_uuid', envUUID);
				envAndSubnetRelation.setValue('subnet_uuid', subnetUUID);
				envAndSubnetRelation.setValue('envuuid_subnetuuid', envUUID + '_' + subnetUUID);
				envAndSubnetRelation.insert();
			}

			// Handling deleted env or subnets 
			// We should remove any relations if they are removed in NCM
			var cleanUpRealtionQuery = 'environment_uuid=' + envUUID + '^subnet_uuid!=' + activeSubnets.join('^subnet_uuid!=');
			var cleanUpRealtionRecords = new GlideRecord('x_nuta2_nutanix_ca_environment_subnet_mtom');
			cleanUpRealtionRecords.addEncodedQuery(cleanUpRealtionQuery);
			cleanUpRealtionRecords.deleteMultiple();
			this.logger.debug('Deleting the records that match this query = ' + cleanUpRealtionRecords.getEncodedQuery());
			this.logger.debug('Active Subnets = ' + activeSubnets);

			this.logger.debug(['Nutanix_ImportEnvironment.createEnvAndSubnetRelation | Created subnets for env', envUUID, 'total records created:', subnetReferences.length].join(' '));

		} catch (err) {
			this.logger.debug(['Nutanix_ImportEnvironment.createEnvAndSubnetRelation :- Exception caught during processing of environment/', payload, '. Error :- ', JSON.stringify(e)].join(' '));
		}
	},
	type: 'Nutanix_ImportEnvironment'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;nikita.kumari&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-26 09:54:06&lt;/sys_created_on&gt;&lt;sys_id&gt;b234e44937c26b00fdfc097973990e72&lt;/sys_id&gt;&lt;sys_mod_count&gt;68&lt;/sys_mod_count&gt;&lt;sys_name&gt;Nutanix_ImportEnvironment&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_b234e44937c26b00fdfc097973990e72&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-04-18 11:21:00&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-750513449</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>deab0533c3d4569064971612b4013150</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30b40000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>Nutanix_ImportEnvironment</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>f1240e47c5694210eb4d64c9ea2c0926</update_guid>
<update_guid_history>f1240e47c5694210eb4d64c9ea2c0926:-750513449,dc5fc6c6573fa5101723f13179e7705f:2146094720,194f068a903fa5105e72305f23aef7f0:1544307738,3d4d4ec6d23fa51027ae54c5ea180432:2146094720,724bcac2593fa510fd044e5e41b299e2:-207734454,2d8ac646c73fa51061c40059fa842bca:-1828526004,96690642d03fa5108cfc589fed9d1d22:-1893320849,9c878682443fa510b4106c3b0b981ce8:1617124687,ed3646ceabfba510fc48fbf205715550:805437946,90a506ce0dfba510495c50620f81ecd8:1565697581,cf6546ce78fba510723c030b53c0695d:-637012241,9b03464e2cfba5103410b5a76c4a610f:1232377536,44ce3d0a27fba51042068772995edba2:-885053510,ec2ebd0a19fba5104e5def4360a504be:-284103079,0a5d390a77fba510be1422a5772b7b49:1238926320,1b0d7d869cfba510c988c6bae2f02c1b:-1995021940,bbdc3dc6effba5101ea3a21a664fbf30:-74216212,ed2c3d86f6fba5103ed6c2bbcf349803:1330457124,2bfbb586d4fba510ae3f3a35d91a1a0e:1518225561,43c41d8e5c736510c68b39749d051426:1073776954,92ab30868b77e1106758115abab97780:-185984048,4eb8c97caafba190cdf5bbaccf0f88f2:-1848454029,250405bce6fba19032b4346865f32c88:-687283640,23f305bce1fba19094f202cf446c4a91:-1634104087,383970f831bba190dc85873782b862a4:-687283640,b3d7dc781db7a1902f2a9e52e0f552c7:1615844087,7697d4780eb7a19048cdc25d451c3266:1263162778,5087d47884b7a190294c4796d7fa7649:-67419808,9457507832b7a190a2434a784f31fcc3:-789907452,e4f61cf47bb7a1907db4bff50748c316:305583990,81c61c382bb7a190cb57ac3caa2813b5:-1590246321,04a618f047b7a1901abe6ed7ab1abb2e:-18264639,6f4614f422b7a19061281384e5dc6b88:-1136228060,2f2654388ab7a190ab190e716dbcd83f:-1927209132,82d5103866b7a19077d15da08e198119:853236732,978514f4e5b7a1904f61102a88268e5f:2144947514,f584dc7033b7a190c94c67f19f4846f7:-700788906,790418b0feb7a190abbad3f1e9010a3a:781522565,e02f4870ebb7a190c00c33e549fa61ed:-1769603361,bd7dad509903a410167beb20f87884ea:1536741593,03ff308224eda110be429ad76d4a56d1:-1237302043,bd7dad509903a410167beb20f87884ea:1536741593,0f89b221436d6110a48faa7f77a14d82:-1237302043,bd7dad509903a410167beb20f87884ea:1536741593,c58215c082e9e9108f89cfa76d2becbc:-1237302043,bd7dad509903a410167beb20f87884ea:1536741593,a1b5054cb32223008a49c201ce0a7a1d:-897369004,3718c5b1dc5ee300fbe3c7814d5cec2b:-419352612,0cc70571425ee300c3fabfbdd3a8c6d9:907983201,b347cdfd851ee300749fa740e233a2d0:-637323615,f856c5fd711ee300541e7fcf9cb8b59a:1996363804,cae40131b95ee300ce784ba1c0763320:-1455997238,7df389bdf01ee300e784c19c7a99bb3c:-646224290,3742497d641ee300ec5b0e3dc8e10b66:-161754787,eb3049f9761ee3004f571b2209ba5f81:300240693,cf3f303db21ee3004a64b3a9f569a1ea:931958029,e07cc5d575ce6b0004371684d3a30146:-360522391,650cc1d52bce6b00f380c00e45c15e70:1802202839,a87bc995abce6b007e6994251e434d16:-360522391,9af8491551ce6b00d0c32a33f4f08135:-718761129,31b5855186ce6b004d975c080954e6ed:-1436652677,5a454151e0ce6b0099c0377f211f7ea4:-1617191045,dee83419868e6b0017529eb209365fdf:-1303154084,d158f4911b8e6b003e8a7411a6d51ce6:-2036054066,70c99ecd220a6b00a6e55838084da825:311904074,9e1781c174466b00a380f8465ca804c8:820876823,aad6c5c173466b008f7355c7423998f1:1727459944,43564d8188466b0076a43cb48af43fe8:-367043521,1c75cd4130466b002bf2d7c44ae5b077:753027296,aff4c941c5466b008b3651f02cc23710:617317864,39b30141c6466b008d394e97d00c4f95:-385424906,d322cdcdf9066b0097d6910364644eed:613450710,326178c1c9066b0097b508bb53c7c01f:-1227076965,21c0fc4162066b00e22fe3996f63941b:-1476567939,4944644968c26b0099a8848a70cb4a15:632038972</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_transform_entry_f6f9c520db9e2300570c9b81ca9619d1</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_transform_entry"&gt;&lt;sys_transform_entry action="INSERT_OR_UPDATE"&gt;&lt;choice_action&gt;create&lt;/choice_action&gt;&lt;coalesce&gt;false&lt;/coalesce&gt;&lt;coalesce_case_sensitive&gt;false&lt;/coalesce_case_sensitive&gt;&lt;coalesce_empty_fields&gt;false&lt;/coalesce_empty_fields&gt;&lt;date_format&gt;yyyy-MM-dd HH:mm:ss&lt;/date_format&gt;&lt;map display_value="Nutanix Transform MarketPlaceItems"&gt;5228bcc3db91230084249235ca961967&lt;/map&gt;&lt;reference_value_field/&gt;&lt;source_field&gt;version&lt;/source_field&gt;&lt;source_script&gt;&lt;![CDATA[answer = (function transformEntry(source) {

	// Add your code here
	return ""; // return the value to be put into the target field

})(source);]]&gt;&lt;/source_script&gt;&lt;source_table&gt;x_nuta2_nutanix_ca_nutanix_staging_marketplace_items&lt;/source_table&gt;&lt;sys_class_name&gt;sys_transform_entry&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-12-07 09:37:36&lt;/sys_created_on&gt;&lt;sys_id&gt;f6f9c520db9e2300570c9b81ca9619d1&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;version&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_transform_entry_f6f9c520db9e2300570c9b81ca9619d1&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-01-18 09:06:16&lt;/sys_updated_on&gt;&lt;target_field&gt;version_mpi&lt;/target_field&gt;&lt;target_table&gt;x_nuta2_nutanix_ca_nutanix_marketplaceitems&lt;/target_table&gt;&lt;use_source_script&gt;false&lt;/use_source_script&gt;&lt;/sys_transform_entry&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1830957221</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>deab0533c3d4569064971612b4013153</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c2fb10000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table/>
<target_name>version</target_name>
<type>Field Map</type>
<update_domain>global</update_domain>
<update_guid>6cac34719973fd109dbf16a94d42a6c8</update_guid>
<update_guid_history>6cac34719973fd109dbf16a94d42a6c8:-1830957221,faf9c520459e230014e87cd99ce925d2:53199298,7fbf3c025aeda110ce77f17da6505e13:-1001294840,faf9c520459e230014e87cd99ce925d2:53199298,e8b9ba61116d6110277b67229d1deb3f:-1001294840,faf9c520459e230014e87cd99ce925d2:53199298,13121500bbe9e910899a3c366ad6bf71:-1001294840,faf9c520459e230014e87cd99ce925d2:53199298</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_dictionary_x_nuta2_nutanix_ca_subnet_subnet_type</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update&gt;&lt;sys_dictionary action="INSERT_OR_UPDATE" element="subnet_type" table="x_nuta2_nutanix_ca_subnet"&gt;&lt;active&gt;true&lt;/active&gt;&lt;array&gt;false&lt;/array&gt;&lt;attributes/&gt;&lt;audit&gt;false&lt;/audit&gt;&lt;calculation&gt;&lt;![CDATA[(function calculatedFieldValue(current) {

	// Add your code here
	return '';  // return the calculated value

})(current);]]&gt;&lt;/calculation&gt;&lt;choice/&gt;&lt;choice_field/&gt;&lt;choice_table/&gt;&lt;column_label&gt;Subnet Type&lt;/column_label&gt;&lt;comments/&gt;&lt;create_roles/&gt;&lt;default_value/&gt;&lt;defaultsort/&gt;&lt;delete_roles/&gt;&lt;dependent/&gt;&lt;dependent_on_field/&gt;&lt;display&gt;false&lt;/display&gt;&lt;dynamic_creation&gt;false&lt;/dynamic_creation&gt;&lt;dynamic_creation_script/&gt;&lt;dynamic_default_value/&gt;&lt;dynamic_ref_qual/&gt;&lt;element&gt;subnet_type&lt;/element&gt;&lt;element_reference&gt;false&lt;/element_reference&gt;&lt;foreign_database/&gt;&lt;formula/&gt;&lt;function_definition/&gt;&lt;function_field&gt;false&lt;/function_field&gt;&lt;internal_type display_value="String"&gt;string&lt;/internal_type&gt;&lt;mandatory&gt;false&lt;/mandatory&gt;&lt;max_length&gt;30&lt;/max_length&gt;&lt;name&gt;x_nuta2_nutanix_ca_subnet&lt;/name&gt;&lt;next_element/&gt;&lt;primary&gt;false&lt;/primary&gt;&lt;read_only&gt;false&lt;/read_only&gt;&lt;read_roles/&gt;&lt;reference/&gt;&lt;reference_cascade_rule/&gt;&lt;reference_floats&gt;false&lt;/reference_floats&gt;&lt;reference_key/&gt;&lt;reference_qual/&gt;&lt;reference_qual_condition/&gt;&lt;reference_type/&gt;&lt;spell_check&gt;false&lt;/spell_check&gt;&lt;staged&gt;false&lt;/staged&gt;&lt;sys_class_name&gt;sys_dictionary&lt;/sys_class_name&gt;&lt;sys_created_by&gt;users.midserver&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-04-26 07:12:38&lt;/sys_created_on&gt;&lt;sys_id&gt;d4e7da2993358e1090acfa497bba10d8&lt;/sys_id&gt;&lt;sys_name&gt;Subnet Type&lt;/sys_name&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_dictionary_x_nuta2_nutanix_ca_subnet_subnet_type&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;users.midserver&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-04-26 07:12:38&lt;/sys_updated_on&gt;&lt;table_reference&gt;false&lt;/table_reference&gt;&lt;text_index&gt;false&lt;/text_index&gt;&lt;unique&gt;false&lt;/unique&gt;&lt;use_dependent_field&gt;false&lt;/use_dependent_field&gt;&lt;use_dynamic_default&gt;false&lt;/use_dynamic_default&gt;&lt;use_reference_qualifier&gt;simple&lt;/use_reference_qualifier&gt;&lt;virtual&gt;false&lt;/virtual&gt;&lt;virtual_type&gt;script&lt;/virtual_type&gt;&lt;widget/&gt;&lt;write_roles/&gt;&lt;xml_view&gt;false&lt;/xml_view&gt;&lt;/sys_dictionary&gt;&lt;/record_update&gt;</payload>
<payload_hash>-121675283</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>deab4133c3d4569064971612b4013121</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30d80000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_subnet</table>
<target_name>Subnet.Subnet Type</target_name>
<type>Dictionary</type>
<update_domain>global</update_domain>
<update_guid>6d089e2918358e107ffcad31f74a23c9</update_guid>
<update_guid_history>6d089e2918358e107ffcad31f74a23c9:-121675283</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_related_x_nuta2_nutanix_ca_nutanix_environment_null</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_ui_related sys_domain="global" table="x_nuta2_nutanix_ca_nutanix_environment" version="2" view=""><sys_ui_related_list_entry action="INSERT_OR_UPDATE"><filter/><list_id display_value="Environment - Default view" name="x_nuta2_nutanix_ca_nutanix_environment" related_list="NULL" sys_domain="global" view="Default view">86df51c537866b00fdfc097973990e7c</list_id><order_by/><position>0</position><related_list>x_nuta2_nutanix_ca_nutanix_calm_credential.environment</related_list><sys_class_name>sys_ui_related_list_entry</sys_class_name><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-04-24 09:29:08</sys_created_on><sys_id>2514e80593f1ca1090acfa497bba103f</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-04-24 09:29:08</sys_updated_on></sys_ui_related_list_entry><sys_ui_related_list_entry action="INSERT_OR_UPDATE"><filter/><list_id display_value="Environment - Default view" name="x_nuta2_nutanix_ca_nutanix_environment" related_list="NULL" sys_domain="global" view="Default view">86df51c537866b00fdfc097973990e7c</list_id><order_by/><position>1</position><related_list>REL:d237f890db162300570c9b81ca9619b6</related_list><sys_class_name>sys_ui_related_list_entry</sys_class_name><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-04-24 09:29:08</sys_created_on><sys_id>6d14e80593f1ca1090acfa497bba103f</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-04-24 09:29:08</sys_updated_on></sys_ui_related_list_entry><sys_ui_related_list_entry action="INSERT_OR_UPDATE"><filter/><list_id display_value="Environment - Default view" name="x_nuta2_nutanix_ca_nutanix_environment" related_list="NULL" sys_domain="global" view="Default view">86df51c537866b00fdfc097973990e7c</list_id><order_by/><position>2</position><related_list>x_nuta2_nutanix_ca_nutanix_cloud_providers.environment</related_list><sys_class_name>sys_ui_related_list_entry</sys_class_name><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-04-24 09:29:08</sys_created_on><sys_id>6114e80593f1ca1090acfa497bba1040</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-04-24 09:29:08</sys_updated_on></sys_ui_related_list_entry><sys_ui_related_list_entry action="INSERT_OR_UPDATE"><filter/><list_id display_value="Environment - Default view" name="x_nuta2_nutanix_ca_nutanix_environment" related_list="NULL" sys_domain="global" view="Default view">86df51c537866b00fdfc097973990e7c</list_id><order_by/><position>3</position><related_list>REL:6da85cb82fb7a1904627de1a2799b637</related_list><sys_class_name>sys_ui_related_list_entry</sys_class_name><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-04-24 09:29:08</sys_created_on><sys_id>6514e80593f1ca1090acfa497bba1040</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-04-24 09:29:08</sys_updated_on></sys_ui_related_list_entry><sys_ui_related_list_entry action="INSERT_OR_UPDATE"><filter/><list_id display_value="Environment - Default view" name="x_nuta2_nutanix_ca_nutanix_environment" related_list="NULL" sys_domain="global" view="Default view">86df51c537866b00fdfc097973990e7c</list_id><order_by/><position>4</position><related_list>REL:9322a08193f1ca1090acfa497bba1075</related_list><sys_class_name>sys_ui_related_list_entry</sys_class_name><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-04-24 09:29:08</sys_created_on><sys_id>6914e80593f1ca1090acfa497bba1040</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-04-24 09:29:08</sys_updated_on></sys_ui_related_list_entry><sys_ui_related_list action="INSERT_OR_UPDATE"><calculated_name>Environment - Default view</calculated_name><filter/><name>x_nuta2_nutanix_ca_nutanix_environment</name><order_by/><position/><related_list/><sys_class_name>sys_ui_related_list</sys_class_name><sys_created_by>users.midserver</sys_created_by><sys_created_on>2024-04-24 09:29:08</sys_created_on><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>86df51c537866b00fdfc097973990e7c</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Environment - Default view</sys_name><sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_ui_related_x_nuta2_nutanix_ca_nutanix_environment_null</sys_update_name><sys_updated_by>users.midserver</sys_updated_by><sys_updated_on>2024-04-24 09:29:08</sys_updated_on><sys_user/><view display_value="Default view" name="NULL">Default view</view><view_name/></sys_ui_related_list></sys_ui_related></record_update>]]></payload>
<payload_hash>336548250</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>e2ab0533c3d4569064971612b4013156</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30c60000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_environment</table>
<target_name>Environment</target_name>
<type>Related Lists</type>
<update_domain>global</update_domain>
<update_guid>2114e805c4f1ca1097fb18209c79b942</update_guid>
<update_guid_history>2114e805c4f1ca1097fb18209c79b942:336548250,f7a4159819319010c17ff30bd75f7f72:-977525116,f35fb48e83ada11020bcacf0f728f89c:11642095,f7a4159819319010c17ff30bd75f7f72:-977525116,b9c9f6a1426d61108f0dd248bb5cfd2c:11642095,f7a4159819319010c17ff30bd75f7f72:-977525116,c6b1910cbca9e910471258637e3c657e:11642095,f7a4159819319010c17ff30bd75f7f72:-977525116,21fd6a4ca6322300db486d9424715683:505674656,1d3c224f40e263001d21388b730d1ac3:283088921,c2e18d8f4eee2300c3d52b97412403e8:2145848886,f2fc60f6daa62300dd21f95a8ec17962:1757960865,ea893c900d1623003a1a69bafd9e157f:254898278,4adf51c568866b0058ef9f38b0b9967e:-887203731</update_guid_history>
<update_set display_value=""/>
<view>Default view</view>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_list_x_nuta2_nutanix_ca_environment_subnet_mtom_null</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_ui_list parent="" relationship="" sys_domain="global" table="x_nuta2_nutanix_ca_environment_subnet_mtom" version="2" view=""><sys_ui_list_element action="INSERT_OR_UPDATE"><average_value>false</average_value><element>environment_uuid</element><list_id display_value="x_nuta2_nutanix_ca_environment_subnet_mtom" element="NULL" name="x_nuta2_nutanix_ca_environment_subnet_mtom" parent="NULL" relationship="NULL" sys_domain="global" view="Default view">d3e710382fb7a1904627de1a2799b62e</list_id><max_value>false</max_value><min_value>false</min_value><position>0</position><sum>false</sum><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 07:40:49</sys_created_on><sys_id>dfe710382fb7a1904627de1a2799b62f</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 07:40:49</sys_updated_on></sys_ui_list_element><sys_ui_list_element action="INSERT_OR_UPDATE"><average_value>false</average_value><element>subnet_uuid</element><list_id display_value="x_nuta2_nutanix_ca_environment_subnet_mtom" element="NULL" name="x_nuta2_nutanix_ca_environment_subnet_mtom" parent="NULL" relationship="NULL" sys_domain="global" view="Default view">d3e710382fb7a1904627de1a2799b62e</list_id><max_value>false</max_value><min_value>false</min_value><position>1</position><sum>false</sum><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 07:40:49</sys_created_on><sys_id>97e710382fb7a1904627de1a2799b630</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 07:40:49</sys_updated_on></sys_ui_list_element><sys_ui_list action="INSERT_OR_UPDATE"><average_value>false</average_value><element/><max_value>false</max_value><min_value>false</min_value><name>x_nuta2_nutanix_ca_environment_subnet_mtom</name><parent/><position/><relationship/><sum>false</sum><sys_class_name>sys_ui_list</sys_class_name><sys_created_by>ratakondala.arun</sys_created_by><sys_created_on>2023-06-30 07:40:48</sys_created_on><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>d3e710382fb7a1904627de1a2799b62e</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_nuta2_nutanix_ca_environment_subnet_mtom</sys_name><sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package><sys_policy/><sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope><sys_update_name>sys_ui_list_x_nuta2_nutanix_ca_environment_subnet_mtom_null</sys_update_name><sys_updated_by>ratakondala.arun</sys_updated_by><sys_updated_on>2023-06-30 07:40:48</sys_updated_on><sys_user/><view display_value="Default view" name="NULL">Default view</view><view_name/></sys_ui_list></sys_ui_list></record_update>]]></payload>
<payload_hash>400451670</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>e6ab0533c3d4569064971612b4013155</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c30370000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_environment_subnet_mtom</table>
<target_name>Environment Subnet MTOM</target_name>
<type>List Layout</type>
<update_domain>global</update_domain>
<update_guid>9ca34d7ce3fba19095516d1ff8ecbaf2</update_guid>
<update_guid_history>9ca34d7ce3fba19095516d1ff8ecbaf2:400451670,d3e750b8adb7a190bb04ddf568cc7086:400451670</update_guid_history>
<update_set display_value=""/>
<view>Default view</view>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="NCM Self-Service">3b7631654f452b001200e5201310c76b</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_98175968dba623000462fe1b689619fd</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name/&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;false&lt;/client&gt;&lt;client_script_v2&gt;&lt;![CDATA[function onClick(g_form) {

}]]&gt;&lt;/client_script_v2&gt;&lt;comments/&gt;&lt;condition&gt;current.state+''=='active' &amp;amp;&amp;amp; new Nutanix_ClientServerScriptBridge().checkQueue();&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style&gt;primary&lt;/form_style&gt;&lt;format_for_configurable_workspace&gt;false&lt;/format_for_configurable_workspace&gt;&lt;hint&gt;Launch Catalog Item&lt;/hint&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;true&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;true&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style&gt;unstyled&lt;/list_style&gt;&lt;messages/&gt;&lt;name&gt;Launch&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;69&lt;/order&gt;&lt;script&gt;&lt;![CDATA[var url = '';
onActionClick();

function onActionClick() {
	var portal_check = gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal');
    if (gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') == 'true') {

        var plugin_properties = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
        if (!plugin_properties.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'))) {

            return;

        }
        var portal_url_suffix = '';
        //plugin_properties.select_service_portal.url_suffix + '';

        if (portal_url_suffix == '') {
            if (current.blueprint.getRefRecord()) {
                url = '/sp?id=sc_cat_item&amp;sys_id=' + current.item_name + '&amp;sysparm_category=' + current.item_name.category + '&amp;sysparm_id=' + current.item_name + '&amp;sysparm_link_parent=' + current.item_name.category + '&amp;sysparm_catalog=' + gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId') + '&amp;sysparm_catalog_view=catalog_nutanix_calm_catalog&amp;type=' + current.blueprint.sys_class_name + '&amp;uuid=' + current.blueprint.getRefRecord().uuid + '&amp;profileSysId=' + current.multiple_application_profile + '&amp;projectUUID=' + current.multiple_projects+ '&amp;portal_check=' + portal_check + "&amp;a=";
            }
        } else {
            if (current.blueprint.getRefRecord()) {
                url = '/' + portal_url_suffix + '?id=sc_cat_item&amp;sys_id=' + current.item_name + '&amp;sysparm_category=' + current.item_name.category + '&amp;sysparm_id=' + current.item_name + '&amp;sysparm_link_parent=' + current.item_name.category + '&amp;sysparm_catalog=' + gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId') + '&amp;sysparm_catalog_view=catalog_nutanix_calm_catalog&amp;type=' + current.blueprint.sys_class_name + '&amp;uuid=' + current.blueprint.getRefRecord().uuid + '&amp;profileSysId=' + current.multiple_application_profile + '&amp;projectUUID=' + current.multiple_projects+ '&amp;portal_check=' + portal_check + "&amp;b=";
            }
        }
    } else {
        //Native
        if (current.blueprint.getRefRecord()) {
            url = '/com.glideapp.servicecatalog_cat_item_view.do?v=1&amp;sysparm_id=' + current.item_name + '&amp;sysparm_link_parent=' + current.item_name.category + '&amp;sysparm_catalog=' + gs.getProperty('x_nuta2_nutanix_ca.nutanix_catalog_sysId') + '&amp;sysparm_catalog_view=catalog_nutanix_calm_catalog&amp;type=' + current.blueprint.sys_class_name + '&amp;uuid=' + current.blueprint.getRefRecord().uuid + '&amp;profileSysId=' + current.multiple_application_profile + '&amp;projectUUID=' + current.multiple_projects+ '&amp;portal_check=' + portal_check + "&amp;c=";
        }
    }

    if (current.state + '' == 'deleted') {

        gs.addErrorMessage("Can not launch deleted catalog item.");
        url = 'x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=b2d6d6a54f41230065e48020a310c7b7&amp;sysparm_view=catalog_view&amp;sysparm_clear_stack=true';
    }

    action.setRedirectURL(url);
}]]&gt;&lt;/script&gt;&lt;show_insert&gt;true&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;girishgyani&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-12-19 20:51:27&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;98175968dba623000462fe1b689619fd&lt;/sys_id&gt;&lt;sys_mod_count&gt;26&lt;/sys_mod_count&gt;&lt;sys_name&gt;Launch&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="NCM Self-Service" source="x_nuta2_nutanix_ca"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_package&gt;&lt;sys_policy&gt;protected&lt;/sys_policy&gt;&lt;sys_scope display_value="NCM Self-Service"&gt;3b7631654f452b001200e5201310c76b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_98175968dba623000462fe1b689619fd&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;subuhee.fathima&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-05-23 10:21:46&lt;/sys_updated_on&gt;&lt;table&gt;x_nuta2_nutanix_ca_nutanix_runtime_configuration&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>-2042178054</payload_hash>
<remote_update_set display_value="1.7.1 Delta Updates">16ab4133c3d4569064971612b401311f</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>users.midserver</sys_created_by>
<sys_created_on>2024-09-04 08:02:19</sys_created_on>
<sys_id>eaab0533c3d4569064971612b4013154</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>191037c31950000001</sys_recorded_at>
<sys_updated_by>users.midserver</sys_updated_by>
<sys_updated_on>2024-09-04 08:02:19</sys_updated_on>
<table>x_nuta2_nutanix_ca_nutanix_runtime_configuration</table>
<target_name>Launch</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>cb364612a3560e50645a7beddcae2c8e</update_guid>
<update_guid_history>cb364612a3560e50645a7beddcae2c8e:-2042178054,acc791c803d202501386155dc23b7cc2:-970956021,bf22554054d202502b3f2c2073957a7b:1832015132,61ba8d440e920250480171ea84f3afd6:-866697591,3f7989447c92025057b701267749ca7f:-68619552,c719c9c0499202500ba10a8ffba2874a:1072213551,7ca885c00c9202506b4c08dcc1e1298a:-467591807,53e7c98022920250f1007cb2f6ae6575:-375670375,b88705007992025085e719c6f468ef59:100267590,abe64940d7920250f8b7d6e4bc41f467:732586647,bfa2cdc82c520250058fa49300f01b21:291052515,7b05c97bd84e8e10860d208aa8882890:184562825,bbd4c57bf84e8e10a435341d377af263:2019114696,f34361f31d4e0e90450a9bac233d4861:-1398708012,07d261f3ad4e0e90e5f768bd8be1b2d2:1086529393,0a8225b36a4e0e9011d7e8da687a2c3b:-1398708012,b14221b3234e0e90729958d40ecd65f6:1946937162,d3f1e973204e0e900498a91cde169e1a:-745886919,bbb12973fd4e0e90acbd964de3112002:-1001755515,e581a573804e0e90e88dd2fbd4ad186b:585131263,ca4165732a4e0e908a523a5f0bce0186:63407949,1df0a133894e0e907398657927b017e2:886195503,22906dbf7b0e0e905bbe0c66359588cf:585131263,655069ff280e0e90606b171347948786:-998760570,33cf1dbf270e0e90351357da87812801:1524481757,e14fd9bf1e0e0e90407d365ea4a0a772:-1931929706,9bfe9d7f7a0e0e901eb95ab05fe54c72:-1085038997,f45e91fba0ca0e9099f3ae26771913a5:20586743,870dddf79aca0e90233aa177007a847c:2019114696,08ddc13b35ca0e904aa2e96e306c9450:184562825,180c013bb4ca0e908dc42f8332db1e89:-2122323472,2aeac1b7e7ca0e90c2e615048a4e5ea1:103587188,96b98dfbbb8a0e9021377b9d59ac7583:1729613879,7394c9bf298a0e90f2823e42996d53df:2019114696,a9248dfb668a0e90366dafbe6ec06b51:-2026090199,29d385bb4e8a0e9059463399a1123052:-333566544,66a045bb488a0e906983924409ab91c4:878860946,ab0005bb348a0e900616e30a4ddd7a19:-316102877,d90ebcf7798a0e90f9c40380a2324234:564073524,d61db4b7de8a0e902c95a91f7ec33bad:371943159,75fcf0b7718a0e90b4a09bb07b668b06:-1881342818,e0ccf0b7138a0e90ba1b5ba4572a4401:2019114696,a95cf837478a0e9061b512b13daf1f22:1347321390,763b70b3b88a0e90ad352e4f2d01de18:184562825,e3d4ee48d6573d10f0651a5f65b546db:2019114696,7064c871cf936510809a2851a973be0d:-818605149,c8c9cc75ded761105b08fb1c27956c5b:-1258550425,39e88c7551d76110fa541512cbb6c1ab:-137160794,5756c4f1a6d761104126825652d2f0e8:1166979566,213f37fbbb3570106454b0b174749cf7:4533602,6cff7c426aeda110d0913466559ad370:1166979566,213f37fbbb3570106454b0b174749cf7:4533602,a5b93e619e6d61102e0edc39c8b1b996:1166979566,213f37fbbb3570106454b0b174749cf7:4533602,6e72dd80c3e9e9102ee5af42d20e0a0b:1166979566,213f37fbbb3570106454b0b174749cf7:4533602,883fce93e6b13010035051f197e95360:-38693046,5fae4e93f5b13010cb9e0650bf5c537a:1170000161,0f0d7bc5e52e50505e4b99cfea30cb96:-1013252941,3c8aff453c2e505061ac0b68611430e3:1900081470,5e99005d213b3300bd761c6289334221:1193495555,7581321c461b330042d6b496d94e2495:-542158104,7a90453f103633008a48f33dc6208822:1586376577,accf6833b3363300cc07f4be447ecbcb:423156052,402688653886b300b75b2d5c5ca7356e:1637061963,32928061d286b3005258453ae30c8fa7:1724247720,3bb847d0604233003bebbe939587f2dd:1353493421,d1959ee70d9033009d00e1692ed8e8e2:-553596976,88216a64286a230060e5fb4141974c14:895774205,bc87d968a9a6230029d333a79c0e527a:-1185646041,524799683ca6230027026b1c9db467c3:1716326795</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
</unload>
